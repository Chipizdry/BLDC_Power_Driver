
BLDC-PMSM Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800d128  0800d128  0000e128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d530  0800d530  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d530  0800d530  0000e530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d538  0800d538  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d538  0800d538  0000e538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d53c  0800d53c  0000e53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d540  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          000007e4  200001d8  200001d8  0000f1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a12  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039af  00000000  00000000  00028c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c8  00000000  00000000  0002db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021661  00000000  00000000  0002ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001def5  00000000  00000000  00050269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3eb2  00000000  00000000  0006e15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132010  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a74  00000000  00000000  00132054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00138ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d110 	.word	0x0800d110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d110 	.word	0x0800d110

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Configure_ADC_Channel>:
        Error_Handler();
    }
}
*/

void Configure_ADC_Channel(uint32_t channel) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

    ADC_ChannelConfTypeDef sConfig = {0};
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]

    sConfig.Channel = channel;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;  // Выберите время выборки в зависимости от ваших требований
 8000bca:	2305      	movs	r3, #5
 8000bcc:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <Configure_ADC_Channel+0x44>)
 8000bd6:	f002 ffd5 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <Configure_ADC_Channel+0x3c>
        Error_Handler();
 8000be0:	f001 fafe 	bl	80021e0 <Error_Handler>
    }
}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000200 	.word	0x20000200

08000bf0 <Read_ADC_Value>:

uint32_t Read_ADC_Value(uint32_t channel) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    Configure_ADC_Channel(channel);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffd5 	bl	8000ba8 <Configure_ADC_Channel>

    // Запуск преобразования
    HAL_ADC_Start(&hadc1);
 8000bfe:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <Read_ADC_Value+0x40>)
 8000c00:	f002 fb74 	bl	80032ec <HAL_ADC_Start>

    // Ожидание завершения преобразования
    if (HAL_ADC_PollForConversion(&hadc1, 500) != HAL_OK) {
 8000c04:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c08:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <Read_ADC_Value+0x40>)
 8000c0a:	f002 fcbb 	bl	8003584 <HAL_ADC_PollForConversion>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <Read_ADC_Value+0x28>
        Error_Handler();
 8000c14:	f001 fae4 	bl	80021e0 <Error_Handler>
    }

    // Чтение значения
    uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <Read_ADC_Value+0x40>)
 8000c1a:	f002 ff33 	bl	8003a84 <HAL_ADC_GetValue>
 8000c1e:	60f8      	str	r0, [r7, #12]

    // Остановка ADC
    HAL_ADC_Stop(&hadc1);
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <Read_ADC_Value+0x40>)
 8000c22:	f002 fc79 	bl	8003518 <HAL_ADC_Stop>

    return value;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000200 	.word	0x20000200

08000c34 <Read_ADC_Values>:


void Read_ADC_Values(uint32_t* values, uint32_t size) {
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    if (size < 6) {
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d802      	bhi.n	8000c4a <Read_ADC_Values+0x16>
        // Недостаточно места в массиве для хранения всех значений
        Error_Handler();
 8000c44:	f001 facc 	bl	80021e0 <Error_Handler>
        return;
 8000c48:	e02c      	b.n	8000ca4 <Read_ADC_Values+0x70>
    }

    // Заполнение массива значениями с каналов 1, 2, 3, 4, температурного сенсора и Vrefint
    values[0] = Read_ADC_Value(ADC_CHANNEL_1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ffd0 	bl	8000bf0 <Read_ADC_Value>
 8000c50:	4602      	mov	r2, r0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
    values[1] = Read_ADC_Value(ADC_CHANNEL_2);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	1d1c      	adds	r4, r3, #4
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff ffc8 	bl	8000bf0 <Read_ADC_Value>
 8000c60:	4603      	mov	r3, r0
 8000c62:	6023      	str	r3, [r4, #0]
    values[2] = Read_ADC_Value(ADC_CHANNEL_3);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f103 0408 	add.w	r4, r3, #8
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f7ff ffc0 	bl	8000bf0 <Read_ADC_Value>
 8000c70:	4603      	mov	r3, r0
 8000c72:	6023      	str	r3, [r4, #0]
    values[3] = Read_ADC_Value(ADC_CHANNEL_4);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f103 040c 	add.w	r4, r3, #12
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f7ff ffb8 	bl	8000bf0 <Read_ADC_Value>
 8000c80:	4603      	mov	r3, r0
 8000c82:	6023      	str	r3, [r4, #0]
    values[4] = Read_ADC_Value(ADC_CHANNEL_TEMPSENSOR);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f103 0410 	add.w	r4, r3, #16
 8000c8a:	2010      	movs	r0, #16
 8000c8c:	f7ff ffb0 	bl	8000bf0 <Read_ADC_Value>
 8000c90:	4603      	mov	r3, r0
 8000c92:	6023      	str	r3, [r4, #0]
    values[5] = Read_ADC_Value(ADC_CHANNEL_VREFINT);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f103 0414 	add.w	r4, r3, #20
 8000c9a:	2012      	movs	r0, #18
 8000c9c:	f7ff ffa8 	bl	8000bf0 <Read_ADC_Value>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	6023      	str	r3, [r4, #0]



}
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}

08000caa <SWITCH>:
 *  Created on: Jun 20, 2024
 *      Author: chipi
 */
#include "BLDC.h"

uint8_t SWITCH( bool coils[]){
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]

uint8_t connector=0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]

connector|=coils[0]&1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]
connector|=(coils[1]&1)<<1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
connector|=(coils[2]&1)<<2;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3302      	adds	r3, #2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	b25a      	sxtb	r2, r3
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	73fb      	strb	r3, [r7, #15]
return connector;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <Phaze_A_ON>:

void Phaze_A_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);}
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <Phaze_A_ON+0x18>)
 8000d18:	f007 ff2a 	bl	8008b70 <HAL_TIMEx_PWMN_Stop>
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <Phaze_A_ON+0x18>)
 8000d20:	f006 fcb0 	bl	8007684 <HAL_TIM_PWM_Start>
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000338 	.word	0x20000338

08000d2c <Phaze_A_OFF>:
void Phaze_A_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);}
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <Phaze_A_OFF+0x18>)
 8000d34:	f006 fda6 	bl	8007884 <HAL_TIM_PWM_Stop>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <Phaze_A_OFF+0x18>)
 8000d3c:	f007 fe64 	bl	8008a08 <HAL_TIMEx_PWMN_Start>
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000338 	.word	0x20000338

08000d48 <Phaze_A_ZZ>:
void Phaze_A_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);}
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <Phaze_A_ZZ+0x18>)
 8000d50:	f006 fd98 	bl	8007884 <HAL_TIM_PWM_Stop>
 8000d54:	2100      	movs	r1, #0
 8000d56:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <Phaze_A_ZZ+0x18>)
 8000d58:	f007 ff0a 	bl	8008b70 <HAL_TIMEx_PWMN_Stop>
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000338 	.word	0x20000338

08000d64 <Phaze_B_ON>:

void Phaze_B_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);}
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <Phaze_B_ON+0x18>)
 8000d6c:	f007 ff00 	bl	8008b70 <HAL_TIMEx_PWMN_Stop>
 8000d70:	2104      	movs	r1, #4
 8000d72:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <Phaze_B_ON+0x18>)
 8000d74:	f006 fc86 	bl	8007684 <HAL_TIM_PWM_Start>
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000338 	.word	0x20000338

08000d80 <Phaze_B_OFF>:
void Phaze_B_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); }
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	2104      	movs	r1, #4
 8000d86:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <Phaze_B_OFF+0x18>)
 8000d88:	f006 fd7c 	bl	8007884 <HAL_TIM_PWM_Stop>
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <Phaze_B_OFF+0x18>)
 8000d90:	f007 fe3a 	bl	8008a08 <HAL_TIMEx_PWMN_Start>
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000338 	.word	0x20000338

08000d9c <Phaze_B_ZZ>:
void Phaze_B_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);}
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	2104      	movs	r1, #4
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <Phaze_B_ZZ+0x18>)
 8000da4:	f006 fd6e 	bl	8007884 <HAL_TIM_PWM_Stop>
 8000da8:	2104      	movs	r1, #4
 8000daa:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <Phaze_B_ZZ+0x18>)
 8000dac:	f007 fee0 	bl	8008b70 <HAL_TIMEx_PWMN_Stop>
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000338 	.word	0x20000338

08000db8 <Phaze_C_ON>:

void Phaze_C_ON(void){HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  }
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <Phaze_C_ON+0x18>)
 8000dc0:	f007 fed6 	bl	8008b70 <HAL_TIMEx_PWMN_Stop>
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <Phaze_C_ON+0x18>)
 8000dc8:	f006 fc5c 	bl	8007684 <HAL_TIM_PWM_Start>
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000338 	.word	0x20000338

08000dd4 <Phaze_C_OFF>:
void Phaze_C_OFF(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);}
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4804      	ldr	r0, [pc, #16]	@ (8000dec <Phaze_C_OFF+0x18>)
 8000ddc:	f006 fd52 	bl	8007884 <HAL_TIM_PWM_Stop>
 8000de0:	2108      	movs	r1, #8
 8000de2:	4802      	ldr	r0, [pc, #8]	@ (8000dec <Phaze_C_OFF+0x18>)
 8000de4:	f007 fe10 	bl	8008a08 <HAL_TIMEx_PWMN_Start>
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000338 	.word	0x20000338

08000df0 <Phaze_C_ZZ>:
void Phaze_C_ZZ(void){HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);}
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	2108      	movs	r1, #8
 8000df6:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <Phaze_C_ZZ+0x18>)
 8000df8:	f006 fd44 	bl	8007884 <HAL_TIM_PWM_Stop>
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <Phaze_C_ZZ+0x18>)
 8000e00:	f007 feb6 	bl	8008b70 <HAL_TIMEx_PWMN_Stop>
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000338 	.word	0x20000338

08000e0c <BLDC_MotorCommutation>:


void BLDC_MotorCommutation(uint8_t halls  ){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]

	 switch (halls) {
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d838      	bhi.n	8000e90 <BLDC_MotorCommutation+0x84>
 8000e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <BLDC_MotorCommutation+0x18>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000e3d 	.word	0x08000e3d
 8000e28:	08000e4b 	.word	0x08000e4b
 8000e2c:	08000e59 	.word	0x08000e59
 8000e30:	08000e67 	.word	0x08000e67
 8000e34:	08000e75 	.word	0x08000e75
 8000e38:	08000e83 	.word	0x08000e83

	case 1:

    Phaze_A_ON();
 8000e3c:	f7ff ff68 	bl	8000d10 <Phaze_A_ON>
	Phaze_B_ZZ();
 8000e40:	f7ff ffac 	bl	8000d9c <Phaze_B_ZZ>
	Phaze_C_OFF();
 8000e44:	f7ff ffc6 	bl	8000dd4 <Phaze_C_OFF>

	break;
 8000e48:	e023      	b.n	8000e92 <BLDC_MotorCommutation+0x86>
	case 2:

    Phaze_A_OFF();
 8000e4a:	f7ff ff6f 	bl	8000d2c <Phaze_A_OFF>
	Phaze_B_ON();
 8000e4e:	f7ff ff89 	bl	8000d64 <Phaze_B_ON>
    Phaze_C_ZZ();
 8000e52:	f7ff ffcd 	bl	8000df0 <Phaze_C_ZZ>

	break;
 8000e56:	e01c      	b.n	8000e92 <BLDC_MotorCommutation+0x86>
	case 3:

	Phaze_A_ZZ();
 8000e58:	f7ff ff76 	bl	8000d48 <Phaze_A_ZZ>
	Phaze_B_ON();
 8000e5c:	f7ff ff82 	bl	8000d64 <Phaze_B_ON>
	Phaze_C_OFF();
 8000e60:	f7ff ffb8 	bl	8000dd4 <Phaze_C_OFF>

	break;
 8000e64:	e015      	b.n	8000e92 <BLDC_MotorCommutation+0x86>
	case 4:

	Phaze_A_ZZ();
 8000e66:	f7ff ff6f 	bl	8000d48 <Phaze_A_ZZ>
	Phaze_B_OFF();
 8000e6a:	f7ff ff89 	bl	8000d80 <Phaze_B_OFF>
	Phaze_C_ON();
 8000e6e:	f7ff ffa3 	bl	8000db8 <Phaze_C_ON>


	break;
 8000e72:	e00e      	b.n	8000e92 <BLDC_MotorCommutation+0x86>
	case 5:

	Phaze_A_ON();
 8000e74:	f7ff ff4c 	bl	8000d10 <Phaze_A_ON>
	Phaze_B_OFF();
 8000e78:	f7ff ff82 	bl	8000d80 <Phaze_B_OFF>
	Phaze_C_ZZ();
 8000e7c:	f7ff ffb8 	bl	8000df0 <Phaze_C_ZZ>

	break;
 8000e80:	e007      	b.n	8000e92 <BLDC_MotorCommutation+0x86>
	case 6:

	Phaze_A_OFF();
 8000e82:	f7ff ff53 	bl	8000d2c <Phaze_A_OFF>
	Phaze_B_ZZ();
 8000e86:	f7ff ff89 	bl	8000d9c <Phaze_B_ZZ>
	Phaze_C_ON();
 8000e8a:	f7ff ff95 	bl	8000db8 <Phaze_C_ON>

	break;
 8000e8e:	e000      	b.n	8000e92 <BLDC_MotorCommutation+0x86>

	default:
	break;}
 8000e90:	bf00      	nop

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop

08000e9c <lcd_write_nibble>:
        I2C_send((uint8_t)(*str), 1);
        str++;
    }
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
    uint8_t data = nibble << D4_BIT;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	73fb      	strb	r3, [r7, #15]
    data |= rs << RS_BIT;
 8000eb4:	7bfa      	ldrb	r2, [r7, #15]
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	73fb      	strb	r3, [r7, #15]
    data |= backlight_state << BL_BIT;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <lcd_write_nibble+0x7c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	b25a      	sxtb	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]
    data |= 1 << EN_BIT;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000edc:	f107 020f 	add.w	r2, r7, #15
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	214e      	movs	r1, #78	@ 0x4e
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <lcd_write_nibble+0x80>)
 8000eea:	f004 f9b7 	bl	800525c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 ffe4 	bl	8002ebc <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f023 0304 	bic.w	r3, r3, #4
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000efe:	f107 020f 	add.w	r2, r7, #15
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	214e      	movs	r1, #78	@ 0x4e
 8000f0a:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <lcd_write_nibble+0x80>)
 8000f0c:	f004 f9a6 	bl	800525c <HAL_I2C_Master_Transmit>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	200002e4 	.word	0x200002e4

08000f20 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = cmd >> 4;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = cmd & 0x0F;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 0);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffad 	bl	8000e9c <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 0);
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffa8 	bl	8000e9c <lcd_write_nibble>
    if (cmd == 0x01 || cmd == 0x02) {
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d002      	beq.n	8000f58 <lcd_send_cmd+0x38>
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d102      	bne.n	8000f5e <lcd_send_cmd+0x3e>
        HAL_Delay(2);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f001 ffaf 	bl	8002ebc <HAL_Delay>
    }
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = data >> 4;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = data & 0x0F;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 1);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff8a 	bl	8000e9c <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 1);
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff85 	bl	8000e9c <lcd_write_nibble>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcd_init>:

void lcd_init() {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000f9e:	2032      	movs	r0, #50	@ 0x32
 8000fa0:	f001 ff8c 	bl	8002ebc <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f7ff ff78 	bl	8000e9c <lcd_write_nibble>
    HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 ff85 	bl	8002ebc <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f7ff ff71 	bl	8000e9c <lcd_write_nibble>
    HAL_Delay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 ff7e 	bl	8002ebc <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f7ff ff6a 	bl	8000e9c <lcd_write_nibble>
    HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 ff77 	bl	8002ebc <HAL_Delay>
    lcd_write_nibble(0x02, 0);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff ff63 	bl	8000e9c <lcd_write_nibble>
    lcd_send_cmd(0x28);
 8000fd6:	2028      	movs	r0, #40	@ 0x28
 8000fd8:	f7ff ffa2 	bl	8000f20 <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f7ff ff9f 	bl	8000f20 <lcd_send_cmd>
    lcd_send_cmd(0x06);
 8000fe2:	2006      	movs	r0, #6
 8000fe4:	f7ff ff9c 	bl	8000f20 <lcd_send_cmd>
    lcd_send_cmd(0x01);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff ff99 	bl	8000f20 <lcd_send_cmd>
    HAL_Delay(2);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f001 ff64 	bl	8002ebc <HAL_Delay>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <lcd_write_string>:

void lcd_write_string(char *str) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001000:	e006      	b.n	8001010 <lcd_write_string+0x18>
        lcd_send_data(*str++);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffab 	bl	8000f66 <lcd_send_data>
    while (*str) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f4      	bne.n	8001002 <lcd_write_string+0xa>
    }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	3b01      	subs	r3, #1
 8001038:	2b03      	cmp	r3, #3
 800103a:	d817      	bhi.n	800106c <lcd_set_cursor+0x48>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <lcd_set_cursor+0x20>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	08001055 	.word	0x08001055
 8001048:	0800105b 	.word	0x0800105b
 800104c:	08001061 	.word	0x08001061
 8001050:	08001067 	.word	0x08001067
        case 1:
            address = 0x80;
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	73fb      	strb	r3, [r7, #15]
            break;
 8001058:	e00a      	b.n	8001070 <lcd_set_cursor+0x4c>
        case 2:
            address = 0xC0;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	73fb      	strb	r3, [r7, #15]
            break;
 800105e:	e007      	b.n	8001070 <lcd_set_cursor+0x4c>
        case 3:
            address = 0x94;
 8001060:	2394      	movs	r3, #148	@ 0x94
 8001062:	73fb      	strb	r3, [r7, #15]
            break;
 8001064:	e004      	b.n	8001070 <lcd_set_cursor+0x4c>
        case 4:
            address = 0xD4;
 8001066:	23d4      	movs	r3, #212	@ 0xd4
 8001068:	73fb      	strb	r3, [r7, #15]
            break;
 800106a:	e001      	b.n	8001070 <lcd_set_cursor+0x4c>
        default:
            address = 0x80;
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	4413      	add	r3, r2
 8001076:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff4d 	bl	8000f20 <lcd_send_cmd>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop

08001090 <lcd_clear>:

void lcd_clear(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff43 	bl	8000f20 <lcd_send_cmd>
    HAL_Delay(2);
 800109a:	2002      	movs	r0, #2
 800109c:	f001 ff0e 	bl	8002ebc <HAL_Delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <IND_WritePin>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t ind_data = 0xFF;  // По умолчанию все порты высокие (pull-up)


void IND_WritePin(uint8_t ind, uint8_t state) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	4613      	mov	r3, r2
 80010b2:	71bb      	strb	r3, [r7, #6]
    if (ind > 7) return;  // Пины PCF8574 от 0 до 7
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d829      	bhi.n	800110e <IND_WritePin+0x6a>

    if (state) {
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00f      	beq.n	80010e0 <IND_WritePin+0x3c>

        ind_data &= ~(1 << ind);  // Сбросить бит
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2201      	movs	r2, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <IND_WritePin+0x74>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <IND_WritePin+0x74>)
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e00c      	b.n	80010fa <IND_WritePin+0x56>
    } else {

        ind_data |= (1 << ind);  // Установить бит
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2201      	movs	r2, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <IND_WritePin+0x74>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <IND_WritePin+0x74>)
 80010f8:	701a      	strb	r2, [r3, #0]
    }

    HAL_I2C_Master_Transmit(&hi2c1, IND_ADDRESS << 1, &ind_data, 1, HAL_MAX_DELAY);
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <IND_WritePin+0x74>)
 8001104:	214a      	movs	r1, #74	@ 0x4a
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <IND_WritePin+0x78>)
 8001108:	f004 f8a8 	bl	800525c <HAL_I2C_Master_Transmit>
 800110c:	e000      	b.n	8001110 <IND_WritePin+0x6c>
    if (ind > 7) return;  // Пины PCF8574 от 0 до 7
 800110e:	bf00      	nop
}
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000001 	.word	0x20000001
 800111c:	200002e4 	.word	0x200002e4

08001120 <ReadButtons>:



void ReadButtons(uint8_t *buttons) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
    HAL_I2C_Master_Receive(&hi2c1, BUTTONS_ADDRESS<< 1, buttons, 1, HAL_MAX_DELAY);
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	2148      	movs	r1, #72	@ 0x48
 8001134:	4803      	ldr	r0, [pc, #12]	@ (8001144 <ReadButtons+0x24>)
 8001136:	f004 f9a9 	bl	800548c <HAL_I2C_Master_Receive>

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002e4 	.word	0x200002e4

08001148 <Get_Buttons_States>:


void Get_Buttons_States(uint8_t *buttons_states) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    uint8_t buttons;
    ReadButtons(&buttons);
 8001150:	f107 030e 	add.w	r3, r7, #14
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffe3 	bl	8001120 <ReadButtons>
    for (uint8_t pin = 0; pin < 8; pin++) {
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e013      	b.n	8001188 <Get_Buttons_States+0x40>
    	buttons_states[pin] = !((buttons >> pin) & 0x01);
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	461a      	mov	r2, r3
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	fa42 f303 	asr.w	r3, r2, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2d9      	uxtb	r1, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	460a      	mov	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
    for (uint8_t pin = 0; pin < 8; pin++) {
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	3301      	adds	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d9e8      	bls.n	8001160 <Get_Buttons_States+0x18>

    }
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <Registers_handler>:
#include "I2C_interface.h"

extern RX_BUFFER_SIZE;
extern uint8_t SLAVE_ID;

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg){
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]

			 if (rxFrame[0] == SLAVE_ID) {
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <Registers_handler+0xd8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d138      	bne.n	8001222 <Registers_handler+0x8a>
                       uint8_t opCode = rxFrame[1];
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	757b      	strb	r3, [r7, #21]

				  			  switch (opCode) {
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d852      	bhi.n	8001264 <Registers_handler+0xcc>
 80011be:	a201      	add	r2, pc, #4	@ (adr r2, 80011c4 <Registers_handler+0x2c>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	08001265 	.word	0x08001265
 80011c8:	08001265 	.word	0x08001265
 80011cc:	08001205 	.word	0x08001205
 80011d0:	08001265 	.word	0x08001265
 80011d4:	08001265 	.word	0x08001265
 80011d8:	0800120f 	.word	0x0800120f
 80011dc:	08001265 	.word	0x08001265
 80011e0:	08001265 	.word	0x08001265
 80011e4:	08001265 	.word	0x08001265
 80011e8:	08001265 	.word	0x08001265
 80011ec:	08001265 	.word	0x08001265
 80011f0:	08001265 	.word	0x08001265
 80011f4:	08001265 	.word	0x08001265
 80011f8:	08001265 	.word	0x08001265
 80011fc:	08001265 	.word	0x08001265
 8001200:	08001219 	.word	0x08001219
							   break;


				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart2,data_reg);
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	481b      	ldr	r0, [pc, #108]	@ (8001274 <Registers_handler+0xdc>)
 8001208:	f001 f87a 	bl	8002300 <handleReadHoldingRegs>
				  			   break;
 800120c:	e02b      	b.n	8001266 <Registers_handler+0xce>
				  			   break;


				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4818      	ldr	r0, [pc, #96]	@ (8001274 <Registers_handler+0xdc>)
 8001212:	f001 f8f3 	bl	80023fc <handleWriteMulyipleHandlingRegister>

                               break;
 8001216:	e026      	b.n	8001266 <Registers_handler+0xce>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister (&huart2,rcv_data_reg);
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4816      	ldr	r0, [pc, #88]	@ (8001274 <Registers_handler+0xdc>)
 800121c:	f001 f8ee 	bl	80023fc <handleWriteMulyipleHandlingRegister>

                               break;
 8001220:	e021      	b.n	8001266 <Registers_handler+0xce>
				  			   break;
				  			     }

				  			 }
			                  else{
			                            for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8001222:	2300      	movs	r3, #0
 8001224:	82fb      	strh	r3, [r7, #22]
 8001226:	e007      	b.n	8001238 <Registers_handler+0xa0>
 8001228:	8afb      	ldrh	r3, [r7, #22]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	8afb      	ldrh	r3, [r7, #22]
 8001234:	3301      	adds	r3, #1
 8001236:	82fb      	strh	r3, [r7, #22]
 8001238:	8afb      	ldrh	r3, [r7, #22]
 800123a:	2b3f      	cmp	r3, #63	@ 0x3f
 800123c:	d9f4      	bls.n	8001228 <Registers_handler+0x90>
			 				  			    	     RX_2;
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <Registers_handler+0xe0>)
 8001244:	f003 ff3e 	bl	80050c4 <HAL_GPIO_WritePin>
			 				  			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame,64 );
 8001248:	2240      	movs	r2, #64	@ 0x40
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	4809      	ldr	r0, [pc, #36]	@ (8001274 <Registers_handler+0xdc>)
 800124e:	f009 f8c4 	bl	800a3da <HAL_UARTEx_ReceiveToIdle_DMA>
			 				  			    			    // Включение прерывания IDLE
			 				  			   __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);}
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <Registers_handler+0xdc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <Registers_handler+0xdc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0210 	orr.w	r2, r2, #16
 8001260:	601a      	str	r2, [r3, #0]

                          }
 8001262:	e000      	b.n	8001266 <Registers_handler+0xce>
				  			   break;
 8001264:	bf00      	nop
                          }
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000002 	.word	0x20000002
 8001274:	20000468 	.word	0x20000468
 8001278:	48000400 	.word	0x48000400

0800127c <Check_USART2_Timeout>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Check_USART2_Timeout(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8001280:	f001 fe10 	bl	8002ea4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <Check_USART2_Timeout+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001290:	d301      	bcc.n	8001296 <Check_USART2_Timeout+0x1a>
    {

        Reset_USART2();
 8001292:	f000 f805 	bl	80012a0 <Reset_USART2>
    }
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000588 	.word	0x20000588

080012a0 <Reset_USART2>:


void Reset_USART2(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    // Остановите передачу и прием, если они активны
    HAL_UART_DMAStop(&huart2);
 80012a4:	4827      	ldr	r0, [pc, #156]	@ (8001344 <Reset_USART2+0xa4>)
 80012a6:	f007 feaf 	bl	8009008 <HAL_UART_DMAStop>
    HAL_DMA_Abort(&hdma_usart2_rx);
 80012aa:	4827      	ldr	r0, [pc, #156]	@ (8001348 <Reset_USART2+0xa8>)
 80012ac:	f003 fbe3 	bl	8004a76 <HAL_DMA_Abort>
    HAL_DMA_Abort(&hdma_usart2_tx);
 80012b0:	4826      	ldr	r0, [pc, #152]	@ (800134c <Reset_USART2+0xac>)
 80012b2:	f003 fbe0 	bl	8004a76 <HAL_DMA_Abort>

    // Отключите прерывания
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <Reset_USART2+0xa4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <Reset_USART2+0xa4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0210 	bic.w	r2, r2, #16
 80012c4:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TC);
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <Reset_USART2+0xa4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <Reset_USART2+0xa4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012d4:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <Reset_USART2+0xa4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <Reset_USART2+0xa4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0220 	bic.w	r2, r2, #32
 80012e4:	601a      	str	r2, [r3, #0]

    // Сбросьте периферийный модуль USART2
    __HAL_RCC_USART2_FORCE_RESET();
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <Reset_USART2+0xb0>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <Reset_USART2+0xb0>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	6113      	str	r3, [r2, #16]
    HAL_Delay(1); // Дождитесь завершения сброса
 80012f2:	2001      	movs	r0, #1
 80012f4:	f001 fde2 	bl	8002ebc <HAL_Delay>
    __HAL_RCC_USART2_RELEASE_RESET();
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <Reset_USART2+0xb0>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <Reset_USART2+0xb0>)
 80012fe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001302:	6113      	str	r3, [r2, #16]

    // �?нициализируйте периферийный модуль USART2 заново
   // HAL_UART_Init(&huart2);
    MX_DMA_Init();
 8001304:	f000 fd4a 	bl	8001d9c <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001308:	f000 fd18 	bl	8001d3c <MX_USART2_UART_Init>
    // Настройте DMA и запустите прием
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, RX_BUFFER_SIZE);
 800130c:	2240      	movs	r2, #64	@ 0x40
 800130e:	4911      	ldr	r1, [pc, #68]	@ (8001354 <Reset_USART2+0xb4>)
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <Reset_USART2+0xa4>)
 8001312:	f009 f862 	bl	800a3da <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <Reset_USART2+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <Reset_USART2+0xa4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0210 	orr.w	r2, r2, #16
 8001324:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <Reset_USART2+0xa8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <Reset_USART2+0xa8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0204 	bic.w	r2, r2, #4
 8001334:	601a      	str	r2, [r3, #0]

    // Обновление времени последней активности
    lastActivityTime = HAL_GetTick();
 8001336:	f001 fdb5 	bl	8002ea4 <HAL_GetTick>
 800133a:	4603      	mov	r3, r0
 800133c:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <Reset_USART2+0xb8>)
 800133e:	6013      	str	r3, [r2, #0]

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000468 	.word	0x20000468
 8001348:	200004f0 	.word	0x200004f0
 800134c:	20000534 	.word	0x20000534
 8001350:	40021000 	.word	0x40021000
 8001354:	20000624 	.word	0x20000624
 8001358:	20000588 	.word	0x20000588
 800135c:	00000000 	.word	0x00000000

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	b087      	sub	sp, #28
 8001364:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001366:	f001 fd43 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f913 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f000 fd4f 	bl	8001e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001372:	f000 fd13 	bl	8001d9c <MX_DMA_Init>
  MX_I2C1_Init();
 8001376:	f000 fa5b 	bl	8001830 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800137a:	f000 fcdf 	bl	8001d3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800137e:	f000 f96d 	bl	800165c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001382:	f000 f9db 	bl	800173c <MX_ADC2_Init>
  MX_TIM1_Init();
 8001386:	f000 fa93 	bl	80018b0 <MX_TIM1_Init>
  MX_TIM16_Init();
 800138a:	f000 fc5d 	bl	8001c48 <MX_TIM16_Init>
  MX_TIM2_Init();
 800138e:	f000 fb55 	bl	8001a3c <MX_TIM2_Init>
  MX_TIM8_Init();
 8001392:	f000 fbd3 	bl	8001b3c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  TX_2;
 8001396:	2201      	movs	r2, #1
 8001398:	2110      	movs	r1, #16
 800139a:	486d      	ldr	r0, [pc, #436]	@ (8001550 <main+0x1f0>)
 800139c:	f003 fe92 	bl	80050c4 <HAL_GPIO_WritePin>
  LED_1_ON;
 80013a0:	2201      	movs	r2, #1
 80013a2:	2120      	movs	r1, #32
 80013a4:	486a      	ldr	r0, [pc, #424]	@ (8001550 <main+0x1f0>)
 80013a6:	f003 fe8d 	bl	80050c4 <HAL_GPIO_WritePin>
 // LED_2_ON;
 // LED_3_ON;
 // LED_4_ON;
 // LED_5_ON;
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4869      	ldr	r0, [pc, #420]	@ (8001554 <main+0x1f4>)
 80013ae:	f006 f969 	bl	8007684 <HAL_TIM_PWM_Start>



  lcd_init();
 80013b2:	f7ff fdf2 	bl	8000f9a <lcd_init>
  lcd_clear();
 80013b6:	f7ff fe6b 	bl	8001090 <lcd_clear>

         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame, RX_BUFFER_SIZE);
 80013ba:	2240      	movs	r2, #64	@ 0x40
 80013bc:	4966      	ldr	r1, [pc, #408]	@ (8001558 <main+0x1f8>)
 80013be:	4867      	ldr	r0, [pc, #412]	@ (800155c <main+0x1fc>)
 80013c0:	f009 f80b 	bl	800a3da <HAL_UARTEx_ReceiveToIdle_DMA>
         __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013c4:	4b66      	ldr	r3, [pc, #408]	@ (8001560 <main+0x200>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b65      	ldr	r3, [pc, #404]	@ (8001560 <main+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]




HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80013d4:	2100      	movs	r1, #0
 80013d6:	4863      	ldr	r0, [pc, #396]	@ (8001564 <main+0x204>)
 80013d8:	f002 fb61 	bl	8003a9e <HAL_ADCEx_Calibration_Start>
HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013dc:	2100      	movs	r1, #0
 80013de:	4862      	ldr	r0, [pc, #392]	@ (8001568 <main+0x208>)
 80013e0:	f002 fb5d 	bl	8003a9e <HAL_ADCEx_Calibration_Start>
HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	@ 0x64
 80013e6:	f001 fd69 	bl	8002ebc <HAL_Delay>
RX_2;
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4858      	ldr	r0, [pc, #352]	@ (8001550 <main+0x1f0>)
 80013f0:	f003 fe68 	bl	80050c4 <HAL_GPIO_WritePin>
     HAL_ADC_Start_DMA(&hadc2, (uint16_t*)adc_buffer_1,64);
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	495d      	ldr	r1, [pc, #372]	@ (800156c <main+0x20c>)
 80013f8:	485a      	ldr	r0, [pc, #360]	@ (8001564 <main+0x204>)
 80013fa:	f002 f9c5 	bl	8003788 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Check_USART2_Timeout();
 80013fe:	f7ff ff3d 	bl	800127c <Check_USART2_Timeout>
	  if(adc_flag==1){
 8001402:	4b5b      	ldr	r3, [pc, #364]	@ (8001570 <main+0x210>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d1f9      	bne.n	80013fe <main+0x9e>

          MX_ADC1_Init();
 800140a:	f000 f927 	bl	800165c <MX_ADC1_Init>
		  Read_ADC_Values(adc_values, 6);
 800140e:	2106      	movs	r1, #6
 8001410:	4858      	ldr	r0, [pc, #352]	@ (8001574 <main+0x214>)
 8001412:	f7ff fc0f 	bl	8000c34 <Read_ADC_Values>
          Get_Buttons_States(buttons_states);
 8001416:	4858      	ldr	r0, [pc, #352]	@ (8001578 <main+0x218>)
 8001418:	f7ff fe96 	bl	8001148 <Get_Buttons_States>
          data_reg[0]=170;
 800141c:	4b57      	ldr	r3, [pc, #348]	@ (800157c <main+0x21c>)
 800141e:	22aa      	movs	r2, #170	@ 0xaa
 8001420:	801a      	strh	r2, [r3, #0]
          data_reg[1]=63;
 8001422:	4b56      	ldr	r3, [pc, #344]	@ (800157c <main+0x21c>)
 8001424:	223f      	movs	r2, #63	@ 0x3f
 8001426:	805a      	strh	r2, [r3, #2]
          data_reg[3]=31;
 8001428:	4b54      	ldr	r3, [pc, #336]	@ (800157c <main+0x21c>)
 800142a:	221f      	movs	r2, #31
 800142c:	80da      	strh	r2, [r3, #6]
          data_reg[4]=25;
 800142e:	4b53      	ldr	r3, [pc, #332]	@ (800157c <main+0x21c>)
 8001430:	2219      	movs	r2, #25
 8001432:	811a      	strh	r2, [r3, #8]
	  	         // lcd_set_cursor(1, 0);
	  	         // sprintf(int_to_str, "B1-%04d,B2-%04d ", adc_values[0],adc_values[1] );
	  	         // lcd_write_string(int_to_str);


                  IND_1_ON;
 8001434:	2101      	movs	r1, #1
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fe34 	bl	80010a4 <IND_WritePin>
                  IND_2_ON;
 800143c:	2101      	movs	r1, #1
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fe30 	bl	80010a4 <IND_WritePin>
                  IND_7_ON;
 8001444:	2101      	movs	r1, #1
 8001446:	2007      	movs	r0, #7
 8001448:	f7ff fe2c 	bl	80010a4 <IND_WritePin>

                  lcd_set_cursor(1, 0);
 800144c:	2100      	movs	r1, #0
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fde8 	bl	8001024 <lcd_set_cursor>
         	  	  sprintf(int_to_str, "%02X,%02X,%01X%01X,%01X,%01X,%04X", rxFrame[0],rxFrame[1],rxFrame[2],rxFrame[3],rxFrame[4] ,rxFrame[5],((rxFrame[6]<<8)|rxFrame[7]));
 8001454:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <main+0x1f8>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461e      	mov	r6, r3
 800145a:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <main+0x1f8>)
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	469c      	mov	ip, r3
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <main+0x1f8>)
 8001462:	789b      	ldrb	r3, [r3, #2]
 8001464:	4619      	mov	r1, r3
 8001466:	4b3c      	ldr	r3, [pc, #240]	@ (8001558 <main+0x1f8>)
 8001468:	78db      	ldrb	r3, [r3, #3]
 800146a:	4618      	mov	r0, r3
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <main+0x1f8>)
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	461c      	mov	r4, r3
 8001472:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <main+0x1f8>)
 8001474:	795b      	ldrb	r3, [r3, #5]
 8001476:	461d      	mov	r5, r3
 8001478:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <main+0x1f8>)
 800147a:	799b      	ldrb	r3, [r3, #6]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <main+0x1f8>)
 8001480:	79d2      	ldrb	r2, [r2, #7]
 8001482:	4313      	orrs	r3, r2
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	9503      	str	r5, [sp, #12]
 8001488:	9402      	str	r4, [sp, #8]
 800148a:	9001      	str	r0, [sp, #4]
 800148c:	9100      	str	r1, [sp, #0]
 800148e:	4663      	mov	r3, ip
 8001490:	4632      	mov	r2, r6
 8001492:	493b      	ldr	r1, [pc, #236]	@ (8001580 <main+0x220>)
 8001494:	483b      	ldr	r0, [pc, #236]	@ (8001584 <main+0x224>)
 8001496:	f009 fd0d 	bl	800aeb4 <siprintf>
         	  	  lcd_write_string(int_to_str);
 800149a:	483a      	ldr	r0, [pc, #232]	@ (8001584 <main+0x224>)
 800149c:	f7ff fdac 	bl	8000ff8 <lcd_write_string>


	  	          lcd_set_cursor(2, 0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff fdbe 	bl	8001024 <lcd_set_cursor>
	  	          sprintf(int_to_str, "Vcc-%02.2f,B4-%04d ", adc_values[0]*0.166,adc_values[1] );
 80014a8:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <main+0x214>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f829 	bl	8000504 <__aeabi_ui2d>
 80014b2:	a325      	add	r3, pc, #148	@ (adr r3, 8001548 <main+0x1e8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f89e 	bl	80005f8 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <main+0x214>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	492e      	ldr	r1, [pc, #184]	@ (8001588 <main+0x228>)
 80014d0:	482c      	ldr	r0, [pc, #176]	@ (8001584 <main+0x224>)
 80014d2:	f009 fcef 	bl	800aeb4 <siprintf>
	  	          lcd_write_string(int_to_str);
 80014d6:	482b      	ldr	r0, [pc, #172]	@ (8001584 <main+0x224>)
 80014d8:	f7ff fd8e 	bl	8000ff8 <lcd_write_string>

	  	          lcd_set_cursor(3, 0);
 80014dc:	2100      	movs	r1, #0
 80014de:	2003      	movs	r0, #3
 80014e0:	f7ff fda0 	bl	8001024 <lcd_set_cursor>
	  	          sprintf(int_to_str, "B5-%04d,B6-%04d ", adc_values[4],adc_values[5] );
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <main+0x214>)
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <main+0x214>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	4927      	ldr	r1, [pc, #156]	@ (800158c <main+0x22c>)
 80014ee:	4825      	ldr	r0, [pc, #148]	@ (8001584 <main+0x224>)
 80014f0:	f009 fce0 	bl	800aeb4 <siprintf>
	  	          lcd_write_string(int_to_str);
 80014f4:	4823      	ldr	r0, [pc, #140]	@ (8001584 <main+0x224>)
 80014f6:	f7ff fd7f 	bl	8000ff8 <lcd_write_string>

	  	          lcd_set_cursor(4, 0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	2004      	movs	r0, #4
 80014fe:	f7ff fd91 	bl	8001024 <lcd_set_cursor>
	  	          sprintf(int_to_str, "B7-%04d,B8-%04d ", adc_buffer_1[0],adc_buffer_1[1] );
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <main+0x20c>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <main+0x20c>)
 800150a:	885b      	ldrh	r3, [r3, #2]
 800150c:	4920      	ldr	r1, [pc, #128]	@ (8001590 <main+0x230>)
 800150e:	481d      	ldr	r0, [pc, #116]	@ (8001584 <main+0x224>)
 8001510:	f009 fcd0 	bl	800aeb4 <siprintf>
	  	          lcd_write_string(int_to_str);
 8001514:	481b      	ldr	r0, [pc, #108]	@ (8001584 <main+0x224>)
 8001516:	f7ff fd6f 	bl	8000ff8 <lcd_write_string>
	  	      		  	     // 	  lcd_write_string(int_to_str);




	  	          adc_buffer_1[0]=0;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <main+0x20c>)
 800151c:	2200      	movs	r2, #0
 800151e:	801a      	strh	r2, [r3, #0]
	  	          adc_buffer_1[1]=0;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <main+0x20c>)
 8001522:	2200      	movs	r2, #0
 8001524:	805a      	strh	r2, [r3, #2]
	  	          adc_buffer_1[2]=0;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <main+0x20c>)
 8001528:	2200      	movs	r2, #0
 800152a:	809a      	strh	r2, [r3, #4]
	  	          adc_buffer_1[3]=0;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <main+0x20c>)
 800152e:	2200      	movs	r2, #0
 8001530:	80da      	strh	r2, [r3, #6]

 		          adc_flag=0;
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <main+0x210>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
	  		      HAL_ADC_Start_DMA(&hadc2, (uint16_t*)adc_buffer_1, 64);     }
 8001538:	2240      	movs	r2, #64	@ 0x40
 800153a:	490c      	ldr	r1, [pc, #48]	@ (800156c <main+0x20c>)
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <main+0x204>)
 800153e:	f002 f923 	bl	8003788 <HAL_ADC_Start_DMA>
	  Check_USART2_Timeout();
 8001542:	e75c      	b.n	80013fe <main+0x9e>
 8001544:	f3af 8000 	nop.w
 8001548:	ed916873 	.word	0xed916873
 800154c:	3fc53f7c 	.word	0x3fc53f7c
 8001550:	48000400 	.word	0x48000400
 8001554:	2000041c 	.word	0x2000041c
 8001558:	20000624 	.word	0x20000624
 800155c:	20000468 	.word	0x20000468
 8001560:	200004f0 	.word	0x200004f0
 8001564:	20000250 	.word	0x20000250
 8001568:	20000200 	.word	0x20000200
 800156c:	2000058c 	.word	0x2000058c
 8001570:	20000584 	.word	0x20000584
 8001574:	2000060c 	.word	0x2000060c
 8001578:	2000057c 	.word	0x2000057c
 800157c:	20000764 	.word	0x20000764
 8001580:	0800d128 	.word	0x0800d128
 8001584:	200001f4 	.word	0x200001f4
 8001588:	0800d14c 	.word	0x0800d14c
 800158c:	0800d160 	.word	0x0800d160
 8001590:	0800d174 	.word	0x0800d174

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09e      	sub	sp, #120	@ 0x78
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800159e:	2228      	movs	r2, #40	@ 0x28
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 fce9 	bl	800af7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	223c      	movs	r2, #60	@ 0x3c
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f009 fcdb 	bl	800af7a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015c4:	2303      	movs	r3, #3
 80015c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80015ce:	2301      	movs	r3, #1
 80015d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d2:	2301      	movs	r3, #1
 80015d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d6:	2310      	movs	r3, #16
 80015d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fb80 	bl	8005cf4 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015fa:	f000 fdf1 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001614:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f005 fba8 	bl	8006d70 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001626:	f000 fddb 	bl	80021e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800162a:	f243 0322 	movw	r3, #12322	@ 0x3022
 800162e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fdb6 	bl	80071b4 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800164e:	f000 fdc7 	bl	80021e0 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3778      	adds	r7, #120	@ 0x78
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800167e:	4b2e      	ldr	r3, [pc, #184]	@ (8001738 <MX_ADC1_Init+0xdc>)
 8001680:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001684:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001686:	4b2c      	ldr	r3, [pc, #176]	@ (8001738 <MX_ADC1_Init+0xdc>)
 8001688:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800168c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <MX_ADC1_Init+0xdc>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <MX_ADC1_Init+0xdc>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169a:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_ADC1_Init+0xdc>)
 800169c:	2200      	movs	r2, #0
 800169e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a0:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b4:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016bc:	2201      	movs	r2, #1
 80016be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016da:	4817      	ldr	r0, [pc, #92]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016dc:	f001 fc26 	bl	8002f2c <HAL_ADC_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016e6:	f000 fd7b 	bl	80021e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	4810      	ldr	r0, [pc, #64]	@ (8001738 <MX_ADC1_Init+0xdc>)
 80016f6:	f002 fd2f 	bl	8004158 <HAL_ADCEx_MultiModeConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001700:	f000 fd6e 	bl	80021e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001704:	2301      	movs	r3, #1
 8001706:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001708:	2301      	movs	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001710:	2303      	movs	r3, #3
 8001712:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_ADC1_Init+0xdc>)
 8001722:	f002 fa2f 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800172c:	f000 fd58 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000200 	.word	0x20000200

0800173c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001752:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001754:	4a35      	ldr	r2, [pc, #212]	@ (800182c <MX_ADC2_Init+0xf0>)
 8001756:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001758:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <MX_ADC2_Init+0xec>)
 800175a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800175e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001768:	2201      	movs	r2, #1
 800176a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <MX_ADC2_Init+0xec>)
 800176e:	2201      	movs	r2, #1
 8001770:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001772:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177a:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <MX_ADC2_Init+0xec>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001782:	2201      	movs	r2, #1
 8001784:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_ADC2_Init+0xec>)
 800178e:	2203      	movs	r2, #3
 8001790:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_ADC2_Init+0xec>)
 800179c:	2204      	movs	r2, #4
 800179e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_ADC2_Init+0xec>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <MX_ADC2_Init+0xec>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017ac:	481e      	ldr	r0, [pc, #120]	@ (8001828 <MX_ADC2_Init+0xec>)
 80017ae:	f001 fbbd 	bl	8002f2c <HAL_ADC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80017b8:	f000 fd12 	bl	80021e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017bc:	2301      	movs	r3, #1
 80017be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80017c8:	2305      	movs	r3, #5
 80017ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4813      	ldr	r0, [pc, #76]	@ (8001828 <MX_ADC2_Init+0xec>)
 80017da:	f002 f9d3 	bl	8003b84 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017e4:	f000 fcfc 	bl	80021e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4619      	mov	r1, r3
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <MX_ADC2_Init+0xec>)
 80017f6:	f002 f9c5 	bl	8003b84 <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001800:	f000 fcee 	bl	80021e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001804:	2303      	movs	r3, #3
 8001806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001808:	2303      	movs	r3, #3
 800180a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_ADC2_Init+0xec>)
 8001812:	f002 f9b7 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800181c:	f000 fce0 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000250 	.word	0x20000250
 800182c:	50000100 	.word	0x50000100

08001830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <MX_I2C1_Init+0x78>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_I2C1_Init+0x74>)
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <MX_I2C1_Init+0x7c>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_I2C1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186a:	480e      	ldr	r0, [pc, #56]	@ (80018a4 <MX_I2C1_Init+0x74>)
 800186c:	f003 fc5a 	bl	8005124 <HAL_I2C_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001876:	f000 fcb3 	bl	80021e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187a:	2100      	movs	r1, #0
 800187c:	4809      	ldr	r0, [pc, #36]	@ (80018a4 <MX_I2C1_Init+0x74>)
 800187e:	f004 f9a1 	bl	8005bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001888:	f000 fcaa 	bl	80021e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800188c:	2100      	movs	r1, #0
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_I2C1_Init+0x74>)
 8001890:	f004 f9e3 	bl	8005c5a <HAL_I2CEx_ConfigDigitalFilter>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800189a:	f000 fca1 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002e4 	.word	0x200002e4
 80018a8:	40005400 	.word	0x40005400
 80018ac:	2000090e 	.word	0x2000090e

080018b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09a      	sub	sp, #104	@ 0x68
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	222c      	movs	r2, #44	@ 0x2c
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f009 fb45 	bl	800af7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f0:	4b50      	ldr	r3, [pc, #320]	@ (8001a34 <MX_TIM1_Init+0x184>)
 80018f2:	4a51      	ldr	r2, [pc, #324]	@ (8001a38 <MX_TIM1_Init+0x188>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a34 <MX_TIM1_Init+0x184>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <MX_TIM1_Init+0x184>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001902:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <MX_TIM1_Init+0x184>)
 8001904:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <MX_TIM1_Init+0x184>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001910:	4b48      	ldr	r3, [pc, #288]	@ (8001a34 <MX_TIM1_Init+0x184>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <MX_TIM1_Init+0x184>)
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800191c:	4845      	ldr	r0, [pc, #276]	@ (8001a34 <MX_TIM1_Init+0x184>)
 800191e:	f005 fdf9 	bl	8007514 <HAL_TIM_Base_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001928:	f000 fc5a 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001930:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001932:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001936:	4619      	mov	r1, r3
 8001938:	483e      	ldr	r0, [pc, #248]	@ (8001a34 <MX_TIM1_Init+0x184>)
 800193a:	f006 fa4b 	bl	8007dd4 <HAL_TIM_ConfigClockSource>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001944:	f000 fc4c 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001948:	483a      	ldr	r0, [pc, #232]	@ (8001a34 <MX_TIM1_Init+0x184>)
 800194a:	f005 fe3a 	bl	80075c2 <HAL_TIM_PWM_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001954:	f000 fc44 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001964:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001968:	4619      	mov	r1, r3
 800196a:	4832      	ldr	r0, [pc, #200]	@ (8001a34 <MX_TIM1_Init+0x184>)
 800196c:	f007 f95e 	bl	8008c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001976:	f000 fc33 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197a:	2360      	movs	r3, #96	@ 0x60
 800197c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4824      	ldr	r0, [pc, #144]	@ (8001a34 <MX_TIM1_Init+0x184>)
 80019a2:	f006 f903 	bl	8007bac <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80019ac:	f000 fc18 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	481e      	ldr	r0, [pc, #120]	@ (8001a34 <MX_TIM1_Init+0x184>)
 80019ba:	f006 f8f7 	bl	8007bac <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80019c4:	f000 fc0c 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019cc:	2208      	movs	r2, #8
 80019ce:	4619      	mov	r1, r3
 80019d0:	4818      	ldr	r0, [pc, #96]	@ (8001a34 <MX_TIM1_Init+0x184>)
 80019d2:	f006 f8eb 	bl	8007bac <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80019dc:	f000 fc00 	bl	80021e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <MX_TIM1_Init+0x184>)
 8001a16:	f007 f989 	bl	8008d2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001a20:	f000 fbde 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a24:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <MX_TIM1_Init+0x184>)
 8001a26:	f000 ff37 	bl	8002898 <HAL_TIM_MspPostInit>

}
 8001a2a:	bf00      	nop
 8001a2c:	3768      	adds	r7, #104	@ 0x68
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000338 	.word	0x20000338
 8001a38:	40012c00 	.word	0x40012c00

08001a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a68:	4b33      	ldr	r3, [pc, #204]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a70:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b2c      	ldr	r3, [pc, #176]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a90:	4829      	ldr	r0, [pc, #164]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001a92:	f005 fd3f 	bl	8007514 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001a9c:	f000 fba0 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4822      	ldr	r0, [pc, #136]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001aae:	f006 f991 	bl	8007dd4 <HAL_TIM_ConfigClockSource>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ab8:	f000 fb92 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001abc:	481e      	ldr	r0, [pc, #120]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001abe:	f005 ff77 	bl	80079b0 <HAL_TIM_IC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ac8:	f000 fb8a 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4817      	ldr	r0, [pc, #92]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001adc:	f007 f8a6 	bl	8008c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001ae6:	f000 fb7b 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2208      	movs	r2, #8
 8001afe:	4619      	mov	r1, r3
 8001b00:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001b02:	f005 ffb6 	bl	8007a72 <HAL_TIM_IC_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001b0c:	f000 fb68 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b10:	2302      	movs	r3, #2
 8001b12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b14:	2302      	movs	r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	@ (8001b38 <MX_TIM2_Init+0xfc>)
 8001b20:	f005 ffa7 	bl	8007a72 <HAL_TIM_IC_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001b2a:	f000 fb59 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	3730      	adds	r7, #48	@ 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000384 	.word	0x20000384

08001b3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b68:	4b35      	ldr	r3, [pc, #212]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b6a:	4a36      	ldr	r2, [pc, #216]	@ (8001c44 <MX_TIM8_Init+0x108>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b94:	482a      	ldr	r0, [pc, #168]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001b96:	f005 fcbd 	bl	8007514 <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001ba0:	f000 fb1e 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4823      	ldr	r0, [pc, #140]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001bb2:	f006 f90f 	bl	8007dd4 <HAL_TIM_ConfigClockSource>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001bbc:	f000 fb10 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001bc0:	481f      	ldr	r0, [pc, #124]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001bc2:	f005 fef5 	bl	80079b0 <HAL_TIM_IC_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001bcc:	f000 fb08 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4817      	ldr	r0, [pc, #92]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001be4:	f007 f822 	bl	8008c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001bee:	f000 faf7 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001c0a:	f005 ff32 	bl	8007a72 <HAL_TIM_IC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001c14:	f000 fae4 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2204      	movs	r2, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <MX_TIM8_Init+0x104>)
 8001c28:	f005 ff23 	bl	8007a72 <HAL_TIM_IC_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001c32:	f000 fad5 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200003d0 	.word	0x200003d0
 8001c44:	40013400 	.word	0x40013400

08001c48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b092      	sub	sp, #72	@ 0x48
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c62:	463b      	mov	r3, r7
 8001c64:	222c      	movs	r2, #44	@ 0x2c
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f009 f986 	bl	800af7a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c70:	4a31      	ldr	r2, [pc, #196]	@ (8001d38 <MX_TIM16_Init+0xf0>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c8e:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c9a:	4826      	ldr	r0, [pc, #152]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001c9c:	f005 fc3a 	bl	8007514 <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ca6:	f000 fa9b 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001caa:	4822      	ldr	r0, [pc, #136]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001cac:	f005 fc89 	bl	80075c2 <HAL_TIM_PWM_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001cb6:	f000 fa93 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cba:	2360      	movs	r3, #96	@ 0x60
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 100;
 8001cbe:	2364      	movs	r3, #100	@ 0x64
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001ce0:	f005 ff64 	bl	8007bac <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001cea:	f000 fa79 	bl	80021e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	4619      	mov	r1, r3
 8001d14:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001d16:	f007 f809 	bl	8008d2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001d20:	f000 fa5e 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001d24:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <MX_TIM16_Init+0xec>)
 8001d26:	f000 fdb7 	bl	8002898 <HAL_TIM_MspPostInit>

}
 8001d2a:	bf00      	nop
 8001d2c:	3748      	adds	r7, #72	@ 0x48
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000041c 	.word	0x2000041c
 8001d38:	40014400 	.word	0x40014400

08001d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d42:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <MX_USART2_UART_Init+0x5c>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 128000;
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d48:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8001d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_USART2_UART_Init+0x58>)
 8001d80:	f007 f877 	bl	8008e72 <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d8a:	f000 fa29 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000468 	.word	0x20000468
 8001d98:	40004400 	.word	0x40004400

08001d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_DMA_Init+0x70>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <MX_DMA_Init+0x70>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <MX_DMA_Init+0x70>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dba:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <MX_DMA_Init+0x70>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a13      	ldr	r2, [pc, #76]	@ (8001e0c <MX_DMA_Init+0x70>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_DMA_Init+0x70>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2106      	movs	r1, #6
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f002 fd71 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ddc:	2010      	movs	r0, #16
 8001dde:	f002 fd8a 	bl	80048f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2102      	movs	r1, #2
 8001de6:	2011      	movs	r0, #17
 8001de8:	f002 fd69 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001dec:	2011      	movs	r0, #17
 8001dee:	f002 fd82 	bl	80048f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	2038      	movs	r0, #56	@ 0x38
 8001df8:	f002 fd61 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001dfc:	2038      	movs	r0, #56	@ 0x38
 8001dfe:	f002 fd7a 	bl	80048f6 <HAL_NVIC_EnableIRQ>

}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e26:	4b3e      	ldr	r3, [pc, #248]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e30:	6153      	str	r3, [r2, #20]
 8001e32:	4b3b      	ldr	r3, [pc, #236]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a37      	ldr	r2, [pc, #220]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e48:	6153      	str	r3, [r2, #20]
 8001e4a:	4b35      	ldr	r3, [pc, #212]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b32      	ldr	r3, [pc, #200]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4a31      	ldr	r2, [pc, #196]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e60:	6153      	str	r3, [r2, #20]
 8001e62:	4b2f      	ldr	r3, [pc, #188]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a2b      	ldr	r2, [pc, #172]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <MX_GPIO_Init+0x110>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001e8c:	4825      	ldr	r0, [pc, #148]	@ (8001f24 <MX_GPIO_Init+0x114>)
 8001e8e:	f003 f919 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5_Pin|DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 8001e98:	4823      	ldr	r0, [pc, #140]	@ (8001f28 <MX_GPIO_Init+0x118>)
 8001e9a:	f003 f913 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8001e9e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481b      	ldr	r0, [pc, #108]	@ (8001f24 <MX_GPIO_Init+0x114>)
 8001eb8:	f002 ff72 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERRUPT_Pin HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_Pin|HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 8001ebc:	f247 0304 	movw	r3, #28676	@ 0x7004
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ec2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4815      	ldr	r0, [pc, #84]	@ (8001f28 <MX_GPIO_Init+0x118>)
 8001ed4:	f002 ff64 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5_Pin DIRECT_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_5_Pin|DIRECT_Pin|LED_1_Pin;
 8001ed8:	f44f 6303 	mov.w	r3, #2096	@ 0x830
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <MX_GPIO_Init+0x118>)
 8001ef2:	f002 ff55 	bl	8004da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2008      	movs	r0, #8
 8001efc:	f002 fcdf 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001f00:	2008      	movs	r0, #8
 8001f02:	f002 fcf8 	bl	80048f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2028      	movs	r0, #40	@ 0x28
 8001f0c:	f002 fcd7 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f10:	2028      	movs	r0, #40	@ 0x28
 8001f12:	f002 fcf0 	bl	80048f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	@ 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000400 	.word	0x48000400

08001f2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12) // если прерывание поступило от ножки PA1
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f3c:	d12d      	bne.n	8001f9a <HAL_GPIO_EXTI_Callback+0x6e>
	   {
		if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)){
 8001f3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f42:	485c      	ldr	r0, [pc, #368]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8001f44:	f003 f8a6 	bl	8005094 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10e      	bne.n	8001f6c <HAL_GPIO_EXTI_Callback+0x40>

				   LED_1_ON;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2120      	movs	r1, #32
 8001f52:	4858      	ldr	r0, [pc, #352]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8001f54:	f003 f8b6 	bl	80050c4 <HAL_GPIO_WritePin>
				   BLDC_STATE[0]=0;
 8001f58:	4b57      	ldr	r3, [pc, #348]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
				   BLDC_MotorCommutation(SWITCH(BLDC_STATE));
 8001f5e:	4856      	ldr	r0, [pc, #344]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001f60:	f7fe fea3 	bl	8000caa <SWITCH>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe ff50 	bl	8000e0c <BLDC_MotorCommutation>
			   }

		     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)){
 8001f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f70:	4850      	ldr	r0, [pc, #320]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8001f72:	f003 f88f 	bl	8005094 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <HAL_GPIO_EXTI_Callback+0x6e>
		           LED_1_OFF;
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2120      	movs	r1, #32
 8001f80:	484c      	ldr	r0, [pc, #304]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8001f82:	f003 f89f 	bl	80050c4 <HAL_GPIO_WritePin>
		    	   BLDC_STATE[0]=1;
 8001f86:	4b4c      	ldr	r3, [pc, #304]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
		    	   BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 8001f8c:	484a      	ldr	r0, [pc, #296]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001f8e:	f7fe fe8c 	bl	8000caa <SWITCH>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe ff39 	bl	8000e0c <BLDC_MotorCommutation>


	   }


   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PC13
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa0:	d12f      	bne.n	8002002 <HAL_GPIO_EXTI_Callback+0xd6>
   {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)){
 8001fa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa6:	4843      	ldr	r0, [pc, #268]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8001fa8:	f003 f874 	bl	8005094 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_GPIO_EXTI_Callback+0xa6>
              LED_2_ON;
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fb8:	4840      	ldr	r0, [pc, #256]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x190>)
 8001fba:	f003 f883 	bl	80050c4 <HAL_GPIO_WritePin>
	      	  BLDC_STATE[1]=0;
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
	      	  BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 8001fc4:	483c      	ldr	r0, [pc, #240]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001fc6:	f7fe fe70 	bl	8000caa <SWITCH>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe ff1d 	bl	8000e0c <BLDC_MotorCommutation>

       if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)){
 8001fd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd6:	4837      	ldr	r0, [pc, #220]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8001fd8:	f003 f85c 	bl	8005094 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_GPIO_EXTI_Callback+0xd6>
              LED_2_OFF;
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe8:	4834      	ldr	r0, [pc, #208]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x190>)
 8001fea:	f003 f86b 	bl	80050c4 <HAL_GPIO_WritePin>
    	      BLDC_STATE[1]=1;
 8001fee:	4b32      	ldr	r3, [pc, #200]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
    	      BLDC_MotorCommutation(SWITCH(BLDC_STATE)); }
 8001ff4:	4830      	ldr	r0, [pc, #192]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001ff6:	f7fe fe58 	bl	8000caa <SWITCH>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe ff05 	bl	8000e0c <BLDC_MotorCommutation>
             // EXTI->PR = EXTI_PR_PR13;
         }


   if(GPIO_Pin == GPIO_PIN_14) // если прерывание поступило от ножки PC14
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002008:	d12f      	bne.n	800206a <HAL_GPIO_EXTI_Callback+0x13e>
     {

	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)){
 800200a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800200e:	4829      	ldr	r0, [pc, #164]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8002010:	f003 f840 	bl	8005094 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10f      	bne.n	800203a <HAL_GPIO_EXTI_Callback+0x10e>
           LED_3_ON;
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002020:	4826      	ldr	r0, [pc, #152]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x190>)
 8002022:	f003 f84f 	bl	80050c4 <HAL_GPIO_WritePin>
		   BLDC_STATE[2]=0;
 8002026:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002028:	2200      	movs	r2, #0
 800202a:	709a      	strb	r2, [r3, #2]
		   BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 800202c:	4822      	ldr	r0, [pc, #136]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 800202e:	f7fe fe3c 	bl	8000caa <SWITCH>
 8002032:	4603      	mov	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fee9 	bl	8000e0c <BLDC_MotorCommutation>

	   if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)){
 800203a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800203e:	481d      	ldr	r0, [pc, #116]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8002040:	f003 f828 	bl	8005094 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <HAL_GPIO_EXTI_Callback+0x13e>
           LED_3_OFF;
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002050:	481a      	ldr	r0, [pc, #104]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x190>)
 8002052:	f003 f837 	bl	80050c4 <HAL_GPIO_WritePin>
		   BLDC_STATE[2]=1;
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002058:	2201      	movs	r2, #1
 800205a:	709a      	strb	r2, [r3, #2]
		   BLDC_MotorCommutation(SWITCH(BLDC_STATE));}
 800205c:	4816      	ldr	r0, [pc, #88]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x18c>)
 800205e:	f7fe fe24 	bl	8000caa <SWITCH>
 8002062:	4603      	mov	r3, r0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fed1 	bl	8000e0c <BLDC_MotorCommutation>
	       //EXTI->PR = EXTI_PR_PR14;
       }


   if(GPIO_Pin == GPIO_PIN_2) // если прерывание поступило от ножки PB_5
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11c      	bne.n	80020aa <HAL_GPIO_EXTI_Callback+0x17e>
      {
	   if (GPIO_PIN_SET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_2)){
 8002070:	2104      	movs	r1, #4
 8002072:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8002074:	f003 f80e 	bl	8005094 <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d108      	bne.n	8002090 <HAL_GPIO_EXTI_Callback+0x164>

		   LED_4_ON;
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002084:	480d      	ldr	r0, [pc, #52]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x190>)
 8002086:	f003 f81d 	bl	80050c4 <HAL_GPIO_WritePin>
		   Get_Buttons_States(buttons_states);
 800208a:	480d      	ldr	r0, [pc, #52]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x194>)
 800208c:	f7ff f85c 	bl	8001148 <Get_Buttons_States>

	   }

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_2)){
 8002090:	2104      	movs	r1, #4
 8002092:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x188>)
 8002094:	f002 fffe 	bl	8005094 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_GPIO_EXTI_Callback+0x17e>
           LED_4_OFF;
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x190>)
 80020a6:	f003 f80d 	bl	80050c4 <HAL_GPIO_WritePin>
         //  EXTI->PR = EXTI_PR_PR5;
            }


        }
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	48000400 	.word	0x48000400
 80020b8:	20000578 	.word	0x20000578
 80020bc:	48000800 	.word	0x48000800
 80020c0:	2000057c 	.word	0x2000057c

080020c4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]


	    RX_2;
 80020cc:	2200      	movs	r2, #0
 80020ce:	2110      	movs	r1, #16
 80020d0:	4813      	ldr	r0, [pc, #76]	@ (8002120 <HAL_UART_TxCpltCallback+0x5c>)
 80020d2:	f002 fff7 	bl	80050c4 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 80020d6:	f000 fee5 	bl	8002ea4 <HAL_GetTick>
 80020da:	4603      	mov	r3, r0
 80020dc:	4a11      	ldr	r2, [pc, #68]	@ (8002124 <HAL_UART_TxCpltCallback+0x60>)
 80020de:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxFrame,RX_BUFFER_SIZE);
 80020e0:	2240      	movs	r2, #64	@ 0x40
 80020e2:	4911      	ldr	r1, [pc, #68]	@ (8002128 <HAL_UART_TxCpltCallback+0x64>)
 80020e4:	4811      	ldr	r0, [pc, #68]	@ (800212c <HAL_UART_TxCpltCallback+0x68>)
 80020e6:	f008 f978 	bl	800a3da <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <HAL_UART_TxCpltCallback+0x68>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_UART_TxCpltCallback+0x68>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HAL_UART_TxCpltCallback+0x6c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_UART_TxCpltCallback+0x6c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0204 	bic.w	r2, r2, #4
 8002108:	601a      	str	r2, [r3, #0]
	    LED_2_OFF;
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002110:	4808      	ldr	r0, [pc, #32]	@ (8002134 <HAL_UART_TxCpltCallback+0x70>)
 8002112:	f002 ffd7 	bl	80050c4 <HAL_GPIO_WritePin>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	48000400 	.word	0x48000400
 8002124:	20000588 	.word	0x20000588
 8002128:	20000624 	.word	0x20000624
 800212c:	20000468 	.word	0x20000468
 8002130:	200004f0 	.word	0x200004f0
 8002134:	48000800 	.word	0x48000800

08002138 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a10      	ldr	r2, [pc, #64]	@ (800218c <HAL_UARTEx_RxEventCallback+0x54>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11a      	bne.n	8002184 <HAL_UARTEx_RxEventCallback+0x4c>
	{
		lastActivityTime = HAL_GetTick();
 800214e:	f000 fea9 	bl	8002ea4 <HAL_GetTick>
 8002152:	4603      	mov	r3, r0
 8002154:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <HAL_UARTEx_RxEventCallback+0x58>)
 8002156:	6013      	str	r3, [r2, #0]
		LED_2_ON;
 8002158:	2201      	movs	r2, #1
 800215a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800215e:	480d      	ldr	r0, [pc, #52]	@ (8002194 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002160:	f002 ffb0 	bl	80050c4 <HAL_GPIO_WritePin>

	    __HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_UARTEx_RxEventCallback+0x60>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_UARTEx_RxEventCallback+0x60>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0210 	bic.w	r2, r2, #16
 8002172:	601a      	str	r2, [r3, #0]

	    HAL_DMA_Abort(&hdma_usart2_rx);
 8002174:	4809      	ldr	r0, [pc, #36]	@ (800219c <HAL_UARTEx_RxEventCallback+0x64>)
 8002176:	f002 fc7e 	bl	8004a76 <HAL_DMA_Abort>

	    Registers_handler(rxFrame, data_reg, rcv_data_reg);
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x68>)
 800217c:	4909      	ldr	r1, [pc, #36]	@ (80021a4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800217e:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <HAL_UARTEx_RxEventCallback+0x70>)
 8002180:	f7ff f80a 	bl	8001198 <Registers_handler>

	}
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40004400 	.word	0x40004400
 8002190:	20000588 	.word	0x20000588
 8002194:	48000800 	.word	0x48000800
 8002198:	20000468 	.word	0x20000468
 800219c:	200004f0 	.word	0x200004f0
 80021a0:	200007e4 	.word	0x200007e4
 80021a4:	20000764 	.word	0x20000764
 80021a8:	20000624 	.word	0x20000624

080021ac <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

    if(hadc->Instance == ADC2) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a06      	ldr	r2, [pc, #24]	@ (80021d4 <HAL_ADC_ConvCpltCallback+0x28>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_ConvCpltCallback+0x1e>



        HAL_ADC_Stop_DMA(&hadc2);
 80021be:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80021c0:	f001 fbfe 	bl	80039c0 <HAL_ADC_Stop_DMA>

              adc_flag = 1;
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_ADC_ConvCpltCallback+0x30>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]

    }



}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	50000100 	.word	0x50000100
 80021d8:	20000250 	.word	0x20000250
 80021dc:	20000584 	.word	0x20000584

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <Error_Handler+0x8>

080021ec <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80021f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021fc:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	74fb      	strb	r3, [r7, #19]
 8002202:	e023      	b.n	800224c <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4053      	eors	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8002214:	2301      	movs	r3, #1
 8002216:	74bb      	strb	r3, [r7, #18]
 8002218:	e012      	b.n	8002240 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	617b      	str	r3, [r7, #20]
			if (flag)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800223a:	7cbb      	ldrb	r3, [r7, #18]
 800223c:	3301      	adds	r3, #1
 800223e:	74bb      	strb	r3, [r7, #18]
 8002240:	7cbb      	ldrb	r3, [r7, #18]
 8002242:	2b08      	cmp	r3, #8
 8002244:	d9e9      	bls.n	800221a <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	3301      	adds	r3, #1
 800224a:	74fb      	strb	r3, [r7, #19]
 800224c:	7cfa      	ldrb	r2, [r7, #19]
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	429a      	cmp	r2, r3
 8002252:	d3d7      	bcc.n	8002204 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	b29b      	uxth	r3, r3
 8002268:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	b29b      	uxth	r3, r3

}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	4619      	mov	r1, r3
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	f7ff ffac 	bl	80021ec <calcCRC16ModBus>
 8002294:	4603      	mov	r3, r0
 8002296:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	3301      	adds	r3, #1
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	8afa      	ldrh	r2, [r7, #22]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80022a6:	8afb      	ldrh	r3, [r7, #22]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	b299      	uxth	r1, r3
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4413      	add	r3, r2
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]

    TX_2;
 80022b6:	2201      	movs	r2, #1
 80022b8:	2110      	movs	r1, #16
 80022ba:	4810      	ldr	r0, [pc, #64]	@ (80022fc <sendModBusRequest+0x80>)
 80022bc:	f002 ff02 	bl	80050c4 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);

    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3302      	adds	r3, #2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f006 fe1f 	bl	8008f10 <HAL_UART_Transmit_DMA>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <sendModBusRequest+0x6c>

	        RX_2;
 80022d8:	2200      	movs	r2, #0
 80022da:	2110      	movs	r1, #16
 80022dc:	4807      	ldr	r0, [pc, #28]	@ (80022fc <sendModBusRequest+0x80>)
 80022de:	f002 fef1 	bl	80050c4 <HAL_GPIO_WritePin>

	        Error_Handler();
 80022e2:	f7ff ff7d 	bl	80021e0 <Error_Handler>
 80022e6:	e004      	b.n	80022f2 <sendModBusRequest+0x76>
	    }

	 else{
		  LED_1_OFF;
 80022e8:	2200      	movs	r2, #0
 80022ea:	2120      	movs	r1, #32
 80022ec:	4803      	ldr	r0, [pc, #12]	@ (80022fc <sendModBusRequest+0x80>)
 80022ee:	f002 fee9 	bl	80050c4 <HAL_GPIO_WritePin>
	  }

}
 80022f2:	bf00      	nop
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	48000400 	.word	0x48000400

08002300 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800230a:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <handleReadHoldingRegs+0xf0>)
 800230c:	789b      	ldrb	r3, [r3, #2]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	b21a      	sxth	r2, r3
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <handleReadHoldingRegs+0xf0>)
 8002314:	78db      	ldrb	r3, [r3, #3]
 8002316:	b21b      	sxth	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b21b      	sxth	r3, r3
 800231c:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800231e:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <handleReadHoldingRegs+0xf0>)
 8002320:	791b      	ldrb	r3, [r3, #4]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21a      	sxth	r2, r3
 8002326:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <handleReadHoldingRegs+0xf0>)
 8002328:	795b      	ldrb	r3, [r3, #5]
 800232a:	b21b      	sxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b21b      	sxth	r3, r3
 8002330:	817b      	strh	r3, [r7, #10]

	startingReg=startingReg-30001;
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8002338:	3b31      	subs	r3, #49	@ 0x31
 800233a:	82fb      	strh	r3, [r7, #22]

	uint16_t endAddr = startingReg+numOfregs-1;
 800233c:	8afa      	ldrh	r2, [r7, #22]
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	4413      	add	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 8002348:	897b      	ldrh	r3, [r7, #10]
 800234a:	2b7d      	cmp	r3, #125	@ 0x7d
 800234c:	d905      	bls.n	800235a <handleReadHoldingRegs+0x5a>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 800234e:	2103      	movs	r1, #3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f8d3 	bl	80024fc <sendModbusException>
		return MODBUS_ERROR;
 8002356:	2300      	movs	r3, #0
 8002358:	e045      	b.n	80023e6 <handleReadHoldingRegs+0xe6>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 800235a:	893b      	ldrh	r3, [r7, #8]
 800235c:	2b3c      	cmp	r3, #60	@ 0x3c
 800235e:	d905      	bls.n	800236c <handleReadHoldingRegs+0x6c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8002360:	2102      	movs	r1, #2
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8ca 	bl	80024fc <sendModbusException>
		return MODBUS_ERROR;
 8002368:	2300      	movs	r3, #0
 800236a:	e03c      	b.n	80023e6 <handleReadHoldingRegs+0xe6>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 800236c:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <handleReadHoldingRegs+0xf4>)
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <handleReadHoldingRegs+0xf8>)
 8002372:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <handleReadHoldingRegs+0xf0>)
 8002376:	785a      	ldrb	r2, [r3, #1]
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <handleReadHoldingRegs+0xf8>)
 800237a:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800237c:	897b      	ldrh	r3, [r7, #10]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <handleReadHoldingRegs+0xf8>)
 8002386:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8002388:	2303      	movs	r3, #3
 800238a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e01d      	b.n	80023ce <handleReadHoldingRegs+0xce>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8002392:	8afb      	ldrh	r3, [r7, #22]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	b299      	uxth	r1, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	613a      	str	r2, [r7, #16]
 80023a6:	b2c9      	uxtb	r1, r1
 80023a8:	4a13      	ldr	r2, [pc, #76]	@ (80023f8 <handleReadHoldingRegs+0xf8>)
 80023aa:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80023ac:	8afb      	ldrh	r3, [r7, #22]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	8819      	ldrh	r1, [r3, #0]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	613a      	str	r2, [r7, #16]
 80023bc:	b2c9      	uxtb	r1, r1
 80023be:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <handleReadHoldingRegs+0xf8>)
 80023c0:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80023c2:	8afb      	ldrh	r3, [r7, #22]
 80023c4:	3301      	adds	r3, #1
 80023c6:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	897b      	ldrh	r3, [r7, #10]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dbdd      	blt.n	8002392 <handleReadHoldingRegs+0x92>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	4906      	ldr	r1, [pc, #24]	@ (80023f8 <handleReadHoldingRegs+0xf8>)
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff4c 	bl	800227c <sendModBusRequest>
	return 1;
 80023e4:	2301      	movs	r3, #1

}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000624 	.word	0x20000624
 80023f4:	20000002 	.word	0x20000002
 80023f8:	20000664 	.word	0x20000664

080023fc <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8002406:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002408:	789b      	ldrb	r3, [r3, #2]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b21a      	sxth	r2, r3
 800240e:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002410:	78db      	ldrb	r3, [r3, #3]
 8002412:	b21b      	sxth	r3, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	b21b      	sxth	r3, r3
 8002418:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 800241a:	4b35      	ldr	r3, [pc, #212]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 800241c:	791b      	ldrb	r3, [r3, #4]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b21a      	sxth	r2, r3
 8002422:	4b33      	ldr	r3, [pc, #204]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002424:	795b      	ldrb	r3, [r3, #5]
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21b      	sxth	r3, r3
 800242c:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <handleWriteMulyipleHandlingRegister+0x3e>
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	2b7b      	cmp	r3, #123	@ 0x7b
 8002438:	d905      	bls.n	8002446 <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 800243a:	2103      	movs	r1, #3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f85d 	bl	80024fc <sendModbusException>
		return MODBUS_ERROR;
 8002442:	2300      	movs	r3, #0
 8002444:	e04f      	b.n	80024e6 <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8002446:	8afa      	ldrh	r2, [r7, #22]
 8002448:	897b      	ldrh	r3, [r7, #10]
 800244a:	4413      	add	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8002452:	893b      	ldrh	r3, [r7, #8]
 8002454:	2b3c      	cmp	r3, #60	@ 0x3c
 8002456:	d905      	bls.n	8002464 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8002458:	2102      	movs	r1, #2
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f84e 	bl	80024fc <sendModbusException>
		return MODBUS_ERROR;
 8002460:	2300      	movs	r3, #0
 8002462:	e040      	b.n	80024e6 <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8002464:	2307      	movs	r3, #7
 8002466:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e019      	b.n	80024a2 <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	613a      	str	r2, [r7, #16]
 8002474:	4a1e      	ldr	r2, [pc, #120]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b21a      	sxth	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1c59      	adds	r1, r3, #1
 8002480:	6139      	str	r1, [r7, #16]
 8002482:	491b      	ldr	r1, [pc, #108]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b219      	sxth	r1, r3
 800248c:	8afb      	ldrh	r3, [r7, #22]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	82fa      	strh	r2, [r7, #22]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	b28a      	uxth	r2, r1
 800249a:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbe1      	blt.n	800246e <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <handleWriteMulyipleHandlingRegister+0xf8>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024b0:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80024b2:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024b4:	785a      	ldrb	r2, [r3, #1]
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024b8:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80024ba:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024bc:	789a      	ldrb	r2, [r3, #2]
 80024be:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024c0:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80024c2:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024c4:	78da      	ldrb	r2, [r3, #3]
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024c8:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024cc:	791a      	ldrb	r2, [r3, #4]
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024d0:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 80024d2:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <handleWriteMulyipleHandlingRegister+0xf4>)
 80024d4:	795a      	ldrb	r2, [r3, #5]
 80024d6:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024d8:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 80024da:	2206      	movs	r2, #6
 80024dc:	4906      	ldr	r1, [pc, #24]	@ (80024f8 <handleWriteMulyipleHandlingRegister+0xfc>)
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fecc 	bl	800227c <sendModBusRequest>
	return 1;   // success
 80024e4:	2301      	movs	r3, #1

}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000624 	.word	0x20000624
 80024f4:	20000002 	.word	0x20000002
 80024f8:	20000664 	.word	0x20000664

080024fc <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <sendModbusException+0x3c>)
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <sendModbusException+0x40>)
 800250e:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <sendModbusException+0x3c>)
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <sendModbusException+0x40>)
 800251c:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 800251e:	4a07      	ldr	r2, [pc, #28]	@ (800253c <sendModbusException+0x40>)
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8002524:	2203      	movs	r2, #3
 8002526:	4905      	ldr	r1, [pc, #20]	@ (800253c <sendModbusException+0x40>)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fea7 	bl	800227c <sendModBusRequest>
 800252e:	4603      	mov	r3, r0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000624 	.word	0x20000624
 800253c:	20000664 	.word	0x20000664

08002540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <HAL_MspInit+0x44>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4a0e      	ldr	r2, [pc, #56]	@ (8002584 <HAL_MspInit+0x44>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6193      	str	r3, [r2, #24]
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <HAL_MspInit+0x44>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_MspInit+0x44>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a08      	ldr	r2, [pc, #32]	@ (8002584 <HAL_MspInit+0x44>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_MspInit+0x44>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a8:	d12e      	bne.n	8002608 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025aa:	4b47      	ldr	r3, [pc, #284]	@ (80026c8 <HAL_ADC_MspInit+0x140>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a45      	ldr	r2, [pc, #276]	@ (80026c8 <HAL_ADC_MspInit+0x140>)
 80025b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025b4:	4b44      	ldr	r3, [pc, #272]	@ (80026c8 <HAL_ADC_MspInit+0x140>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10b      	bne.n	80025d4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025bc:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4a42      	ldr	r2, [pc, #264]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	6153      	str	r3, [r2, #20]
 80025c8:	4b40      	ldr	r3, [pc, #256]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4a3c      	ldr	r2, [pc, #240]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 80025da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025de:	6153      	str	r3, [r2, #20]
 80025e0:	4b3a      	ldr	r3, [pc, #232]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025ec:	230f      	movs	r3, #15
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f0:	2303      	movs	r3, #3
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002602:	f002 fbcd 	bl	8004da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002606:	e05a      	b.n	80026be <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a30      	ldr	r2, [pc, #192]	@ (80026d0 <HAL_ADC_MspInit+0x148>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d155      	bne.n	80026be <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002612:	4b2d      	ldr	r3, [pc, #180]	@ (80026c8 <HAL_ADC_MspInit+0x140>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	4a2b      	ldr	r2, [pc, #172]	@ (80026c8 <HAL_ADC_MspInit+0x140>)
 800261a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <HAL_ADC_MspInit+0x140>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10b      	bne.n	800263c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002624:	4b29      	ldr	r3, [pc, #164]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4a28      	ldr	r2, [pc, #160]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262e:	6153      	str	r3, [r2, #20]
 8002630:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 8002642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002646:	6153      	str	r3, [r2, #20]
 8002648:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_ADC_MspInit+0x144>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002654:	2370      	movs	r3, #112	@ 0x70
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002658:	2303      	movs	r3, #3
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266a:	f002 fb99 	bl	8004da0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800266e:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_ADC_MspInit+0x150>)
 8002672:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 8002676:	2200      	movs	r2, #0
 8002678:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800267a:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002686:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 8002688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800268c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 8002690:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002694:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002696:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800269c:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026a2:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 80026a4:	f002 f941 	bl	800492a <HAL_DMA_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_ADC_MspInit+0x12a>
      Error_Handler();
 80026ae:	f7ff fd97 	bl	80021e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80026b8:	4a06      	ldr	r2, [pc, #24]	@ (80026d4 <HAL_ADC_MspInit+0x14c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80026be:	bf00      	nop
 80026c0:	3730      	adds	r7, #48	@ 0x30
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000864 	.word	0x20000864
 80026cc:	40021000 	.word	0x40021000
 80026d0:	50000100 	.word	0x50000100
 80026d4:	200002a0 	.word	0x200002a0
 80026d8:	40020408 	.word	0x40020408

080026dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <HAL_I2C_MspInit+0x7c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d128      	bne.n	8002750 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <HAL_I2C_MspInit+0x80>)
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4a16      	ldr	r2, [pc, #88]	@ (800275c <HAL_I2C_MspInit+0x80>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002708:	6153      	str	r3, [r2, #20]
 800270a:	4b14      	ldr	r3, [pc, #80]	@ (800275c <HAL_I2C_MspInit+0x80>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002716:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800271c:	2312      	movs	r3, #18
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002728:	2304      	movs	r3, #4
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	480b      	ldr	r0, [pc, #44]	@ (8002760 <HAL_I2C_MspInit+0x84>)
 8002734:	f002 fb34 	bl	8004da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <HAL_I2C_MspInit+0x80>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4a07      	ldr	r2, [pc, #28]	@ (800275c <HAL_I2C_MspInit+0x80>)
 800273e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002742:	61d3      	str	r3, [r2, #28]
 8002744:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_I2C_MspInit+0x80>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002750:	bf00      	nop
 8002752:	3728      	adds	r7, #40	@ 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40005400 	.word	0x40005400
 800275c:	40021000 	.word	0x40021000
 8002760:	48000400 	.word	0x48000400

08002764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	@ 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a40      	ldr	r2, [pc, #256]	@ (8002884 <HAL_TIM_Base_MspInit+0x120>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a3f      	ldr	r2, [pc, #252]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 800278c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002790:	6193      	str	r3, [r2, #24]
 8002792:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279a:	623b      	str	r3, [r7, #32]
 800279c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800279e:	e06d      	b.n	800287c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a8:	d129      	bne.n	80027fe <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027aa:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a36      	ldr	r2, [pc, #216]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4a30      	ldr	r2, [pc, #192]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027cc:	6153      	str	r3, [r2, #20]
 80027ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ec:	2301      	movs	r3, #1
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	4825      	ldr	r0, [pc, #148]	@ (800288c <HAL_TIM_Base_MspInit+0x128>)
 80027f8:	f002 fad2 	bl	8004da0 <HAL_GPIO_Init>
}
 80027fc:	e03e      	b.n	800287c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a23      	ldr	r2, [pc, #140]	@ (8002890 <HAL_TIM_Base_MspInit+0x12c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d128      	bne.n	800285a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002808:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a1e      	ldr	r2, [pc, #120]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 800280e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002826:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282a:	6153      	str	r3, [r2, #20]
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002838:	2340      	movs	r3, #64	@ 0x40
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002848:	2305      	movs	r3, #5
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	480e      	ldr	r0, [pc, #56]	@ (800288c <HAL_TIM_Base_MspInit+0x128>)
 8002854:	f002 faa4 	bl	8004da0 <HAL_GPIO_Init>
}
 8002858:	e010      	b.n	800287c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM16)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a0d      	ldr	r2, [pc, #52]	@ (8002894 <HAL_TIM_Base_MspInit+0x130>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10b      	bne.n	800287c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_TIM_Base_MspInit+0x124>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	bf00      	nop
 800287e:	3738      	adds	r7, #56	@ 0x38
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40021000 	.word	0x40021000
 800288c:	48000400 	.word	0x48000400
 8002890:	40013400 	.word	0x40013400
 8002894:	40014400 	.word	0x40014400

08002898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a32      	ldr	r2, [pc, #200]	@ (8002980 <HAL_TIM_MspPostInit+0xe8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d13a      	bne.n	8002930 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4a31      	ldr	r2, [pc, #196]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c4:	6153      	str	r3, [r2, #20]
 80028c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028dc:	6153      	str	r3, [r2, #20]
 80028de:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80028ea:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80028ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028fc:	2306      	movs	r3, #6
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800290a:	f002 fa49 	bl	8004da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800290e:	2303      	movs	r3, #3
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800291e:	2306      	movs	r3, #6
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4817      	ldr	r0, [pc, #92]	@ (8002988 <HAL_TIM_MspPostInit+0xf0>)
 800292a:	f002 fa39 	bl	8004da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800292e:	e022      	b.n	8002976 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM16)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a15      	ldr	r2, [pc, #84]	@ (800298c <HAL_TIM_MspPostInit+0xf4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d11d      	bne.n	8002976 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	6153      	str	r3, [r2, #20]
 8002946:	4b0f      	ldr	r3, [pc, #60]	@ (8002984 <HAL_TIM_MspPostInit+0xec>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002972:	f002 fa15 	bl	8004da0 <HAL_GPIO_Init>
}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	@ 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40021000 	.word	0x40021000
 8002988:	48000400 	.word	0x48000400
 800298c:	40014400 	.word	0x40014400

08002990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a51      	ldr	r2, [pc, #324]	@ (8002af4 <HAL_UART_MspInit+0x164>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f040 809c 	bne.w	8002aec <HAL_UART_MspInit+0x15c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029b4:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029be:	61d3      	str	r3, [r2, #28]
 80029c0:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4a49      	ldr	r2, [pc, #292]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d6:	6153      	str	r3, [r2, #20]
 80029d8:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e4:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	4a43      	ldr	r2, [pc, #268]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ee:	6153      	str	r3, [r2, #20]
 80029f0:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_UART_MspInit+0x168>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a1c:	f002 f9c0 	bl	8004da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a20:	2308      	movs	r3, #8
 8002a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a30:	2307      	movs	r3, #7
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4830      	ldr	r0, [pc, #192]	@ (8002afc <HAL_UART_MspInit+0x16c>)
 8002a3c:	f002 f9b0 	bl	8004da0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a40:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a42:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_UART_MspInit+0x174>)
 8002a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b2b      	ldr	r3, [pc, #172]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a58:	4b29      	ldr	r3, [pc, #164]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a64:	4b26      	ldr	r3, [pc, #152]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a6a:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a72:	4823      	ldr	r0, [pc, #140]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a74:	f001 ff59 	bl	800492a <HAL_DMA_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8002a7e:	f7ff fbaf 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a86:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a88:	4a1d      	ldr	r2, [pc, #116]	@ (8002b00 <HAL_UART_MspInit+0x170>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002a90:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <HAL_UART_MspInit+0x17c>)
 8002a92:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a94:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002a96:	2210      	movs	r2, #16
 8002a98:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002aa2:	2280      	movs	r2, #128	@ 0x80
 8002aa4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002aba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002abe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ac0:	4811      	ldr	r0, [pc, #68]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002ac2:	f001 ff32 	bl	800492a <HAL_DMA_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8002acc:	f7ff fb88 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002ad4:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b08 <HAL_UART_MspInit+0x178>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2026      	movs	r0, #38	@ 0x26
 8002ae2:	f001 feec 	bl	80048be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ae6:	2026      	movs	r0, #38	@ 0x26
 8002ae8:	f001 ff05 	bl	80048f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	@ 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40004400 	.word	0x40004400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	200004f0 	.word	0x200004f0
 8002b04:	4002006c 	.word	0x4002006c
 8002b08:	20000534 	.word	0x20000534
 8002b0c:	40020080 	.word	0x40020080

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <NMI_Handler+0x4>

08002b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <HardFault_Handler+0x4>

08002b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <MemManage_Handler+0x4>

08002b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <BusFault_Handler+0x4>

08002b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <UsageFault_Handler+0x4>

08002b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b66:	f000 f989 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 8002b72:	2004      	movs	r0, #4
 8002b74:	f002 fabe 	bl	80050f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b80:	4802      	ldr	r0, [pc, #8]	@ (8002b8c <DMA1_Channel6_IRQHandler+0x10>)
 8002b82:	f001 fff4 	bl	8004b6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200004f0 	.word	0x200004f0

08002b90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b94:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <DMA1_Channel7_IRQHandler+0x10>)
 8002b96:	f001 ffea 	bl	8004b6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000534 	.word	0x20000534

08002ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <USART2_IRQHandler+0x10>)
 8002baa:	f006 fabf 	bl	800912c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000468 	.word	0x20000468

08002bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HAL_A_Pin);
 8002bbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002bc0:	f002 fa98 	bl	80050f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HAL_B_Pin);
 8002bc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bc8:	f002 fa94 	bl	80050f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HAL_C_Pin);
 8002bcc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bd0:	f002 fa90 	bl	80050f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002bdc:	4802      	ldr	r0, [pc, #8]	@ (8002be8 <DMA2_Channel1_IRQHandler+0x10>)
 8002bde:	f001 ffc6 	bl	8004b6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200002a0 	.word	0x200002a0

08002bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_kill>:

int _kill(int pid, int sig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c06:	f008 fa0b 	bl	800b020 <__errno>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2216      	movs	r2, #22
 8002c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_exit>:

void _exit (int status)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ffe7 	bl	8002bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c2e:	bf00      	nop
 8002c30:	e7fd      	b.n	8002c2e <_exit+0x12>

08002c32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e00a      	b.n	8002c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c44:	f3af 8000 	nop.w
 8002c48:	4601      	mov	r1, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	60ba      	str	r2, [r7, #8]
 8002c50:	b2ca      	uxtb	r2, r1
 8002c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	dbf0      	blt.n	8002c44 <_read+0x12>
  }

  return len;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e009      	b.n	8002c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	60ba      	str	r2, [r7, #8]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	dbf1      	blt.n	8002c7e <_write+0x12>
  }
  return len;
 8002c9a:	687b      	ldr	r3, [r7, #4]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_close>:

int _close(int file)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_isatty>:

int _isatty(int file)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ce4:	2301      	movs	r3, #1
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f008 f970 	bl	800b020 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000a000 	.word	0x2000a000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000868 	.word	0x20000868
 8002d74:	200009c0 	.word	0x200009c0

08002d78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002da0:	f7ff ffea 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	@ (8002ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <LoopForever+0xe>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002de8 <LoopForever+0x16>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dca:	f008 f92f 	bl	800b02c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dce:	f7fe fac7 	bl	8001360 <main>

08002dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd2:	e7fe      	b.n	8002dd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dd4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002de0:	0800d540 	.word	0x0800d540
  ldr r2, =_sbss
 8002de4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002de8:	200009bc 	.word	0x200009bc

08002dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_2_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_Init+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	@ (8002e18 <HAL_Init+0x28>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f001 fd51 	bl	80048a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	200f      	movs	r0, #15
 8002e08:	f000 f808 	bl	8002e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7ff fb98 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000

08002e1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e24:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <HAL_InitTick+0x54>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_InitTick+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fd69 	bl	8004912 <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f001 fd31 	bl	80048be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	@ (8002e78 <HAL_InitTick+0x5c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000004 	.word	0x20000004
 8002e74:	2000000c 	.word	0x2000000c
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_IncTick+0x20>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_IncTick+0x24>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <HAL_IncTick+0x24>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	2000000c 	.word	0x2000000c
 8002ea0:	2000086c 	.word	0x2000086c

08002ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <HAL_GetTick+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000086c 	.word	0x2000086c

08002ebc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff ffee 	bl	8002ea4 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d005      	beq.n	8002ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_Delay+0x44>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ee2:	bf00      	nop
 8002ee4:	f7ff ffde 	bl	8002ea4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d8f7      	bhi.n	8002ee4 <HAL_Delay+0x28>
  {
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000000c 	.word	0x2000000c

08002f04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b09a      	sub	sp, #104	@ 0x68
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e1c9      	b.n	80032e0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d176      	bne.n	800304c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d152      	bne.n	800300c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fb01 	bl	8002588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d13b      	bne.n	800300c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f001 fa9b 	bl	80044d0 <ADC_Disable>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d12f      	bne.n	800300c <HAL_ADC_Init+0xe0>
 8002fac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d12b      	bne.n	800300c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fbc:	f023 0302 	bic.w	r3, r3, #2
 8002fc0:	f043 0202 	orr.w	r2, r3, #2
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fd6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002fe6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe8:	4b86      	ldr	r3, [pc, #536]	@ (8003204 <HAL_ADC_Init+0x2d8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a86      	ldr	r2, [pc, #536]	@ (8003208 <HAL_ADC_Init+0x2dc>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	0c9a      	lsrs	r2, r3, #18
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f9      	bne.n	8003000 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003028:	d110      	bne.n	800304c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f023 0312 	bic.w	r3, r3, #18
 8003032:	f043 0210 	orr.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8136 	bne.w	80032c6 <HAL_ADC_Init+0x39a>
 800305a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 8131 	bne.w	80032c6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 8129 	bne.w	80032c6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800308c:	d004      	beq.n	8003098 <HAL_ADC_Init+0x16c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5e      	ldr	r2, [pc, #376]	@ (800320c <HAL_ADC_Init+0x2e0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_ADC_Init+0x170>
 8003098:	4b5d      	ldr	r3, [pc, #372]	@ (8003210 <HAL_ADC_Init+0x2e4>)
 800309a:	e000      	b.n	800309e <HAL_ADC_Init+0x172>
 800309c:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <HAL_ADC_Init+0x2e8>)
 800309e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030a8:	d102      	bne.n	80030b0 <HAL_ADC_Init+0x184>
 80030aa:	4b58      	ldr	r3, [pc, #352]	@ (800320c <HAL_ADC_Init+0x2e0>)
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e01a      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a55      	ldr	r2, [pc, #340]	@ (800320c <HAL_ADC_Init+0x2e0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d103      	bne.n	80030c2 <HAL_ADC_Init+0x196>
 80030ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e011      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a54      	ldr	r2, [pc, #336]	@ (8003218 <HAL_ADC_Init+0x2ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d102      	bne.n	80030d2 <HAL_ADC_Init+0x1a6>
 80030cc:	4b53      	ldr	r3, [pc, #332]	@ (800321c <HAL_ADC_Init+0x2f0>)
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e009      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a51      	ldr	r2, [pc, #324]	@ (800321c <HAL_ADC_Init+0x2f0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <HAL_ADC_Init+0x1b6>
 80030dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_ADC_Init+0x2ec>)
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e001      	b.n	80030e6 <HAL_ADC_Init+0x1ba>
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d108      	bne.n	8003106 <HAL_ADC_Init+0x1da>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_ADC_Init+0x1da>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_ADC_Init+0x1dc>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11c      	bne.n	8003146 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800310c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_ADC_Init+0x202>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_ADC_Init+0x202>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_ADC_Init+0x204>
 800312e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003130:	2b00      	cmp	r3, #0
 8003132:	d108      	bne.n	8003146 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	431a      	orrs	r2, r3
 8003142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003144:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7e5b      	ldrb	r3, [r3, #25]
 800314a:	035b      	lsls	r3, r3, #13
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003150:	2a01      	cmp	r2, #1
 8003152:	d002      	beq.n	800315a <HAL_ADC_Init+0x22e>
 8003154:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003158:	e000      	b.n	800315c <HAL_ADC_Init+0x230>
 800315a:	2200      	movs	r2, #0
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4313      	orrs	r3, r2
 800316a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800316c:	4313      	orrs	r3, r2
 800316e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d11b      	bne.n	80031b2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7e5b      	ldrb	r3, [r3, #25]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	3b01      	subs	r3, #1
 8003188:	045a      	lsls	r2, r3, #17
 800318a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800318c:	4313      	orrs	r3, r2
 800318e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003192:	663b      	str	r3, [r7, #96]	@ 0x60
 8003194:	e00d      	b.n	80031b2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d03a      	beq.n	8003230 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_ADC_Init+0x2ec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_ADC_Init+0x2a2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a14      	ldr	r2, [pc, #80]	@ (800321c <HAL_ADC_Init+0x2f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d128      	bne.n	8003220 <HAL_ADC_Init+0x2f4>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80031d6:	d012      	beq.n	80031fe <HAL_ADC_Init+0x2d2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e0:	d00a      	beq.n	80031f8 <HAL_ADC_Init+0x2cc>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80031ea:	d002      	beq.n	80031f2 <HAL_ADC_Init+0x2c6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	e018      	b.n	8003224 <HAL_ADC_Init+0x2f8>
 80031f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031f6:	e015      	b.n	8003224 <HAL_ADC_Init+0x2f8>
 80031f8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80031fc:	e012      	b.n	8003224 <HAL_ADC_Init+0x2f8>
 80031fe:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003202:	e00f      	b.n	8003224 <HAL_ADC_Init+0x2f8>
 8003204:	20000004 	.word	0x20000004
 8003208:	431bde83 	.word	0x431bde83
 800320c:	50000100 	.word	0x50000100
 8003210:	50000300 	.word	0x50000300
 8003214:	50000700 	.word	0x50000700
 8003218:	50000400 	.word	0x50000400
 800321c:	50000500 	.word	0x50000500
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003228:	4313      	orrs	r3, r2
 800322a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800322c:	4313      	orrs	r3, r2
 800322e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d114      	bne.n	8003268 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800324c:	f023 0302 	bic.w	r3, r3, #2
 8003250:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7e1b      	ldrb	r3, [r3, #24]
 8003256:	039a      	lsls	r2, r3, #14
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4313      	orrs	r3, r2
 8003262:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003264:	4313      	orrs	r3, r2
 8003266:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <HAL_ADC_Init+0x3bc>)
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003278:	430b      	orrs	r3, r1
 800327a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10c      	bne.n	800329e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f023 010f 	bic.w	r1, r3, #15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
 800329c:	e007      	b.n	80032ae <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 020f 	bic.w	r2, r2, #15
 80032ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f023 0303 	bic.w	r3, r3, #3
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80032c4:	e00a      	b.n	80032dc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f023 0312 	bic.w	r3, r3, #18
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80032dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3768      	adds	r7, #104	@ 0x68
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	fff0c007 	.word	0xfff0c007

080032ec <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 80f9 	bne.w	80034fa <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Start+0x2a>
 8003312:	2302      	movs	r3, #2
 8003314:	e0f4      	b.n	8003500 <HAL_ADC_Start+0x214>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 f872 	bl	8004408 <ADC_Enable>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 80e0 	bne.w	80034f0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800334c:	d004      	beq.n	8003358 <HAL_ADC_Start+0x6c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6d      	ldr	r2, [pc, #436]	@ (8003508 <HAL_ADC_Start+0x21c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d106      	bne.n	8003366 <HAL_ADC_Start+0x7a>
 8003358:	4b6c      	ldr	r3, [pc, #432]	@ (800350c <HAL_ADC_Start+0x220>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_ADC_Start+0x9a>
 8003364:	e005      	b.n	8003372 <HAL_ADC_Start+0x86>
 8003366:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_ADC_Start+0x224>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_ADC_Start+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800337a:	d004      	beq.n	8003386 <HAL_ADC_Start+0x9a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a64      	ldr	r2, [pc, #400]	@ (8003514 <HAL_ADC_Start+0x228>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d115      	bne.n	80033b2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d036      	beq.n	800340e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80033b0:	e02d      	b.n	800340e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_Start+0xe6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003508 <HAL_ADC_Start+0x21c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10a      	bne.n	80033e8 <HAL_ADC_Start+0xfc>
 80033d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e008      	b.n	80033fa <HAL_ADC_Start+0x10e>
 80033e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <HAL_ADC_Start+0x228>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003406:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341a:	d106      	bne.n	800342a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003420:	f023 0206 	bic.w	r2, r3, #6
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	645a      	str	r2, [r3, #68]	@ 0x44
 8003428:	e002      	b.n	8003430 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	221c      	movs	r2, #28
 800343e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003448:	d004      	beq.n	8003454 <HAL_ADC_Start+0x168>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2e      	ldr	r2, [pc, #184]	@ (8003508 <HAL_ADC_Start+0x21c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d106      	bne.n	8003462 <HAL_ADC_Start+0x176>
 8003454:	4b2d      	ldr	r3, [pc, #180]	@ (800350c <HAL_ADC_Start+0x220>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03e      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 8003460:	e005      	b.n	800346e <HAL_ADC_Start+0x182>
 8003462:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_ADC_Start+0x224>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2b00      	cmp	r3, #0
 800346c:	d037      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003476:	d004      	beq.n	8003482 <HAL_ADC_Start+0x196>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_ADC_Start+0x21c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d106      	bne.n	8003490 <HAL_ADC_Start+0x1a4>
 8003482:	4b22      	ldr	r3, [pc, #136]	@ (800350c <HAL_ADC_Start+0x220>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2b05      	cmp	r3, #5
 800348c:	d027      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 800348e:	e005      	b.n	800349c <HAL_ADC_Start+0x1b0>
 8003490:	4b1f      	ldr	r3, [pc, #124]	@ (8003510 <HAL_ADC_Start+0x224>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2b05      	cmp	r3, #5
 800349a:	d020      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a4:	d004      	beq.n	80034b0 <HAL_ADC_Start+0x1c4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a17      	ldr	r2, [pc, #92]	@ (8003508 <HAL_ADC_Start+0x21c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d106      	bne.n	80034be <HAL_ADC_Start+0x1d2>
 80034b0:	4b16      	ldr	r3, [pc, #88]	@ (800350c <HAL_ADC_Start+0x220>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d010      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 80034bc:	e005      	b.n	80034ca <HAL_ADC_Start+0x1de>
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <HAL_ADC_Start+0x224>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	d009      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d2:	d004      	beq.n	80034de <HAL_ADC_Start+0x1f2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003514 <HAL_ADC_Start+0x228>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10f      	bne.n	80034fe <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	e006      	b.n	80034fe <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80034f8:	e001      	b.n	80034fe <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	50000100 	.word	0x50000100
 800350c:	50000300 	.word	0x50000300
 8003510:	50000700 	.word	0x50000700
 8003514:	50000400 	.word	0x50000400

08003518 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADC_Stop+0x1a>
 800352e:	2302      	movs	r3, #2
 8003530:	e023      	b.n	800357a <HAL_ADC_Stop+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800353a:	216c      	movs	r1, #108	@ 0x6c
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f001 f82d 	bl	800459c <ADC_ConversionStop>
 8003542:	4603      	mov	r3, r0
 8003544:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 ffbf 	bl	80044d0 <ADC_Disable>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b08      	cmp	r3, #8
 8003598:	d102      	bne.n	80035a0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800359a:	2308      	movs	r3, #8
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e03a      	b.n	8003616 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a8:	d004      	beq.n	80035b4 <HAL_ADC_PollForConversion+0x30>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a72      	ldr	r2, [pc, #456]	@ (8003778 <HAL_ADC_PollForConversion+0x1f4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_PollForConversion+0x34>
 80035b4:	4b71      	ldr	r3, [pc, #452]	@ (800377c <HAL_ADC_PollForConversion+0x1f8>)
 80035b6:	e000      	b.n	80035ba <HAL_ADC_PollForConversion+0x36>
 80035b8:	4b71      	ldr	r3, [pc, #452]	@ (8003780 <HAL_ADC_PollForConversion+0x1fc>)
 80035ba:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d112      	bne.n	80035ee <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d11d      	bne.n	8003612 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0bf      	b.n	800376e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0ad      	b.n	800376e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003612:	230c      	movs	r3, #12
 8003614:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361e:	d004      	beq.n	800362a <HAL_ADC_PollForConversion+0xa6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a54      	ldr	r2, [pc, #336]	@ (8003778 <HAL_ADC_PollForConversion+0x1f4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d106      	bne.n	8003638 <HAL_ADC_PollForConversion+0xb4>
 800362a:	4b54      	ldr	r3, [pc, #336]	@ (800377c <HAL_ADC_PollForConversion+0x1f8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_ADC_PollForConversion+0xd4>
 8003636:	e005      	b.n	8003644 <HAL_ADC_PollForConversion+0xc0>
 8003638:	4b51      	ldr	r3, [pc, #324]	@ (8003780 <HAL_ADC_PollForConversion+0x1fc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_ADC_PollForConversion+0xd4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800364c:	d004      	beq.n	8003658 <HAL_ADC_PollForConversion+0xd4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a4c      	ldr	r2, [pc, #304]	@ (8003784 <HAL_ADC_PollForConversion+0x200>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d104      	bne.n	8003662 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e00f      	b.n	8003682 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366a:	d004      	beq.n	8003676 <HAL_ADC_PollForConversion+0xf2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <HAL_ADC_PollForConversion+0x1f4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d102      	bne.n	800367c <HAL_ADC_PollForConversion+0xf8>
 8003676:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800367a:	e000      	b.n	800367e <HAL_ADC_PollForConversion+0xfa>
 800367c:	4b41      	ldr	r3, [pc, #260]	@ (8003784 <HAL_ADC_PollForConversion+0x200>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003682:	f7ff fc0f 	bl	8002ea4 <HAL_GetTick>
 8003686:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003688:	e021      	b.n	80036ce <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d01d      	beq.n	80036ce <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_ADC_PollForConversion+0x124>
 8003698:	f7ff fc04 	bl	8002ea4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d212      	bcs.n	80036ce <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04f      	b.n	800376e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0d6      	beq.n	800368a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d131      	bne.n	800375a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d12c      	bne.n	800375a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d125      	bne.n	800375a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d112      	bne.n	8003742 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d112      	bne.n	800375a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003740:	e00b      	b.n	800375a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	50000100 	.word	0x50000100
 800377c:	50000300 	.word	0x50000300
 8003780:	50000700 	.word	0x50000700
 8003784:	50000400 	.word	0x50000400

08003788 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80f7 	bne.w	8003996 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_Start_DMA+0x2e>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e0f2      	b.n	800399c <HAL_ADC_Start_DMA+0x214>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_Start_DMA+0x4a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_ADC_Start_DMA+0x21c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d109      	bne.n	80037e6 <HAL_ADC_Start_DMA+0x5e>
 80037d2:	4b75      	ldr	r3, [pc, #468]	@ (80039a8 <HAL_ADC_Start_DMA+0x220>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e008      	b.n	80037f8 <HAL_ADC_Start_DMA+0x70>
 80037e6:	4b71      	ldr	r3, [pc, #452]	@ (80039ac <HAL_ADC_Start_DMA+0x224>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80c5 	beq.w	8003988 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fe02 	bl	8004408 <ADC_Enable>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 80b7 	bne.w	800397e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382c:	d004      	beq.n	8003838 <HAL_ADC_Start_DMA+0xb0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5c      	ldr	r2, [pc, #368]	@ (80039a4 <HAL_ADC_Start_DMA+0x21c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d106      	bne.n	8003846 <HAL_ADC_Start_DMA+0xbe>
 8003838:	4b5b      	ldr	r3, [pc, #364]	@ (80039a8 <HAL_ADC_Start_DMA+0x220>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_ADC_Start_DMA+0xde>
 8003844:	e005      	b.n	8003852 <HAL_ADC_Start_DMA+0xca>
 8003846:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_ADC_Start_DMA+0x224>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_ADC_Start_DMA+0xde>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800385a:	d004      	beq.n	8003866 <HAL_ADC_Start_DMA+0xde>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a53      	ldr	r2, [pc, #332]	@ (80039b0 <HAL_ADC_Start_DMA+0x228>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d115      	bne.n	8003892 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d036      	beq.n	80038ee <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003888:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003890:	e02d      	b.n	80038ee <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a6:	d004      	beq.n	80038b2 <HAL_ADC_Start_DMA+0x12a>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3d      	ldr	r2, [pc, #244]	@ (80039a4 <HAL_ADC_Start_DMA+0x21c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10a      	bne.n	80038c8 <HAL_ADC_Start_DMA+0x140>
 80038b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e008      	b.n	80038da <HAL_ADC_Start_DMA+0x152>
 80038c8:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <HAL_ADC_Start_DMA+0x228>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d106      	bne.n	800390a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	f023 0206 	bic.w	r2, r3, #6
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
 8003908:	e002      	b.n	8003910 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	4a25      	ldr	r2, [pc, #148]	@ (80039b4 <HAL_ADC_Start_DMA+0x22c>)
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <HAL_ADC_Start_DMA+0x230>)
 8003926:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	4a23      	ldr	r2, [pc, #140]	@ (80039bc <HAL_ADC_Start_DMA+0x234>)
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	221c      	movs	r2, #28
 8003936:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0210 	orr.w	r2, r2, #16
 8003946:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3340      	adds	r3, #64	@ 0x40
 8003962:	4619      	mov	r1, r3
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f001 f826 	bl	80049b8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0204 	orr.w	r2, r2, #4
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e00d      	b.n	800399a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003986:	e008      	b.n	800399a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003994:	e001      	b.n	800399a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	50000100 	.word	0x50000100
 80039a8:	50000300 	.word	0x50000300
 80039ac:	50000700 	.word	0x50000700
 80039b0:	50000400 	.word	0x50000400
 80039b4:	0800433d 	.word	0x0800433d
 80039b8:	080043b7 	.word	0x080043b7
 80039bc:	080043d3 	.word	0x080043d3

080039c0 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Stop_DMA+0x1a>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e050      	b.n	8003a7c <HAL_ADC_Stop_DMA+0xbc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039e2:	216c      	movs	r1, #108	@ 0x6c
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fdd9 	bl	800459c <ADC_ConversionStop>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13e      	bne.n	8003a72 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d10f      	bne.n	8003a30 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 f82e 	bl	8004a76 <HAL_DMA_Abort>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0210 	bic.w	r2, r2, #16
 8003a3e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fd42 	bl	80044d0 <ADC_Disable>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e002      	b.n	8003a58 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fd3c 	bl	80044d0 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_ADCEx_Calibration_Start+0x1c>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e05f      	b.n	8003b7a <HAL_ADCEx_Calibration_Start+0xdc>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fd04 	bl	80044d0 <ADC_Disable>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d14e      	bne.n	8003b70 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8003ae6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003afc:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b0c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003b0e:	f7ff f9c9 	bl	8002ea4 <HAL_GetTick>
 8003b12:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b14:	e01c      	b.n	8003b50 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b16:	f7ff f9c5 	bl	8002ea4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b0a      	cmp	r3, #10
 8003b22:	d915      	bls.n	8003b50 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b32:	d10d      	bne.n	8003b50 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	f023 0312 	bic.w	r3, r3, #18
 8003b3c:	f043 0210 	orr.w	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e014      	b.n	8003b7a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b5e:	d0da      	beq.n	8003b16 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f023 0303 	bic.w	r3, r3, #3
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b09b      	sub	sp, #108	@ 0x6c
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x22>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e2c8      	b.n	8004138 <HAL_ADC_ConfigChannel+0x5b4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f040 82ac 	bne.w	8004116 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d81c      	bhi.n	8003c00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	231f      	movs	r3, #31
 8003bdc:	4093      	lsls	r3, r2
 8003bde:	43db      	mvns	r3, r3
 8003be0:	4019      	ands	r1, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bfe:	e063      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d81e      	bhi.n	8003c46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	3b1e      	subs	r3, #30
 8003c1c:	221f      	movs	r2, #31
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	4019      	ands	r1, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	3b1e      	subs	r3, #30
 8003c38:	fa00 f203 	lsl.w	r2, r0, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c44:	e040      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b0e      	cmp	r3, #14
 8003c4c:	d81e      	bhi.n	8003c8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	3b3c      	subs	r3, #60	@ 0x3c
 8003c62:	221f      	movs	r2, #31
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	4019      	ands	r1, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	3b3c      	subs	r3, #60	@ 0x3c
 8003c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c8a:	e01d      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	3b5a      	subs	r3, #90	@ 0x5a
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	4019      	ands	r1, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	3b5a      	subs	r3, #90	@ 0x5a
 8003cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 80e5 	bne.w	8003ea2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d91c      	bls.n	8003d1a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	3b1e      	subs	r3, #30
 8003cf2:	2207      	movs	r2, #7
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	4019      	ands	r1, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6898      	ldr	r0, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	3b1e      	subs	r3, #30
 8003d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	619a      	str	r2, [r3, #24]
 8003d18:	e019      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6959      	ldr	r1, [r3, #20]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	4019      	ands	r1, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6898      	ldr	r0, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	fa00 f203 	lsl.w	r2, r0, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d84f      	bhi.n	8003e10 <HAL_ADC_ConfigChannel+0x28c>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <HAL_ADC_ConfigChannel+0x1f4>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003def 	.word	0x08003def
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d8e:	4b99      	ldr	r3, [pc, #612]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x470>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	0691      	lsls	r1, r2, #26
 8003d98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003da6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003da8:	e07b      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003db0:	4b90      	ldr	r3, [pc, #576]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x470>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	0691      	lsls	r1, r2, #26
 8003dba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dc8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003dca:	e06a      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003dd2:	4b88      	ldr	r3, [pc, #544]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x470>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	0691      	lsls	r1, r2, #26
 8003ddc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dde:	430a      	orrs	r2, r1
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dea:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003dec:	e059      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003df4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x470>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	0691      	lsls	r1, r2, #26
 8003dfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e00:	430a      	orrs	r2, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e0c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003e0e:	e048      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	069b      	lsls	r3, r3, #26
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e32:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	069b      	lsls	r3, r3, #26
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d107      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e56:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e7a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	069b      	lsls	r3, r3, #26
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8003ea0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d108      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x33e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x33e>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x340>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 8131 	bne.w	800412c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d00f      	beq.n	8003ef2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	400a      	ands	r2, r1
 8003eec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003ef0:	e049      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d91c      	bls.n	8003f4e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	3b1b      	subs	r3, #27
 8003f26:	2207      	movs	r2, #7
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	4019      	ands	r1, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6898      	ldr	r0, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b1b      	subs	r3, #27
 8003f40:	fa00 f203 	lsl.w	r2, r0, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]
 8003f4c:	e01b      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6959      	ldr	r1, [r3, #20]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	2207      	movs	r2, #7
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	4019      	ands	r1, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6898      	ldr	r0, [r3, #8]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f8e:	d004      	beq.n	8003f9a <HAL_ADC_ConfigChannel+0x416>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a18      	ldr	r2, [pc, #96]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x474>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x41a>
 8003f9a:	4b18      	ldr	r3, [pc, #96]	@ (8003ffc <HAL_ADC_ConfigChannel+0x478>)
 8003f9c:	e000      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x41c>
 8003f9e:	4b18      	ldr	r3, [pc, #96]	@ (8004000 <HAL_ADC_ConfigChannel+0x47c>)
 8003fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d105      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003fba:	2b11      	cmp	r3, #17
 8003fbc:	d105      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003fce:	2b12      	cmp	r3, #18
 8003fd0:	f040 80ac 	bne.w	800412c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f040 80a5 	bne.w	800412c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fea:	d10b      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x480>
 8003fec:	4b02      	ldr	r3, [pc, #8]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x474>)
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e023      	b.n	800403a <HAL_ADC_ConfigChannel+0x4b6>
 8003ff2:	bf00      	nop
 8003ff4:	83fff000 	.word	0x83fff000
 8003ff8:	50000100 	.word	0x50000100
 8003ffc:	50000300 	.word	0x50000300
 8004000:	50000700 	.word	0x50000700
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4e      	ldr	r2, [pc, #312]	@ (8004144 <HAL_ADC_ConfigChannel+0x5c0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d103      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x492>
 800400e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e011      	b.n	800403a <HAL_ADC_ConfigChannel+0x4b6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4b      	ldr	r2, [pc, #300]	@ (8004148 <HAL_ADC_ConfigChannel+0x5c4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d102      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x4a2>
 8004020:	4b4a      	ldr	r3, [pc, #296]	@ (800414c <HAL_ADC_ConfigChannel+0x5c8>)
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e009      	b.n	800403a <HAL_ADC_ConfigChannel+0x4b6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a48      	ldr	r2, [pc, #288]	@ (800414c <HAL_ADC_ConfigChannel+0x5c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d102      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x4b2>
 8004030:	4b45      	ldr	r3, [pc, #276]	@ (8004148 <HAL_ADC_ConfigChannel+0x5c4>)
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e001      	b.n	800403a <HAL_ADC_ConfigChannel+0x4b6>
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d108      	bne.n	800405a <HAL_ADC_ConfigChannel+0x4d6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x4d6>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_ADC_ConfigChannel+0x4d8>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d150      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004060:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x4fe>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x4fe>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_ADC_ConfigChannel+0x500>
 8004082:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004084:	2b00      	cmp	r3, #0
 8004086:	d13c      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d11d      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x548>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004098:	d118      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800409a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80040a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004150 <HAL_ADC_ConfigChannel+0x5cc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <HAL_ADC_ConfigChannel+0x5d0>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	0c9a      	lsrs	r2, r3, #18
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040bc:	e002      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f9      	bne.n	80040be <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040ca:	e02e      	b.n	800412a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b11      	cmp	r3, #17
 80040d2:	d10b      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x568>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040dc:	d106      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80040de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80040e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040ea:	e01e      	b.n	800412a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b12      	cmp	r3, #18
 80040f2:	d11a      	bne.n	800412a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80040f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004100:	e013      	b.n	800412a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004114:	e00a      	b.n	800412c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004128:	e000      	b.n	800412c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800412a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004134:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004138:	4618      	mov	r0, r3
 800413a:	376c      	adds	r7, #108	@ 0x6c
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	50000100 	.word	0x50000100
 8004148:	50000400 	.word	0x50000400
 800414c:	50000500 	.word	0x50000500
 8004150:	20000004 	.word	0x20000004
 8004154:	431bde83 	.word	0x431bde83

08004158 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004158:	b480      	push	{r7}
 800415a:	b099      	sub	sp, #100	@ 0x64
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004170:	d102      	bne.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004172:	4b6d      	ldr	r3, [pc, #436]	@ (8004328 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	e01a      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6a      	ldr	r2, [pc, #424]	@ (8004328 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d103      	bne.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004182:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	e011      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a67      	ldr	r2, [pc, #412]	@ (800432c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d102      	bne.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004194:	4b66      	ldr	r3, [pc, #408]	@ (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	e009      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a64      	ldr	r2, [pc, #400]	@ (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d102      	bne.n	80041aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80041a4:	4b61      	ldr	r3, [pc, #388]	@ (800432c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	e001      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0b0      	b.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0a9      	b.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 808d 	bne.w	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 8086 	bne.w	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041f4:	d004      	beq.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a4b      	ldr	r2, [pc, #300]	@ (8004328 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004200:	4b4c      	ldr	r3, [pc, #304]	@ (8004334 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004202:	e000      	b.n	8004206 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004204:	4b4c      	ldr	r3, [pc, #304]	@ (8004338 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004206:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d040      	beq.n	8004292 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004222:	035b      	lsls	r3, r3, #13
 8004224:	430b      	orrs	r3, r1
 8004226:	431a      	orrs	r2, r3
 8004228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800422a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d15c      	bne.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800426e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004270:	2b00      	cmp	r3, #0
 8004272:	d14b      	bne.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800427c:	f023 030f 	bic.w	r3, r3, #15
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	6811      	ldr	r1, [r2, #0]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	430a      	orrs	r2, r1
 800428a:	431a      	orrs	r2, r3
 800428c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800428e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004290:	e03c      	b.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800429a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800429c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d108      	bne.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d123      	bne.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80042e0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d112      	bne.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80042e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042ee:	f023 030f 	bic.w	r3, r3, #15
 80042f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042f4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80042f6:	e009      	b.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800430a:	e000      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800430c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004316:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800431a:	4618      	mov	r0, r3
 800431c:	3764      	adds	r7, #100	@ 0x64
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	50000100 	.word	0x50000100
 800432c:	50000400 	.word	0x50000400
 8004330:	50000500 	.word	0x50000500
 8004334:	50000300 	.word	0x50000300
 8004338:	50000700 	.word	0x50000700

0800433c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d126      	bne.n	80043a4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800436c:	2b00      	cmp	r3, #0
 800436e:	d115      	bne.n	800439c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7fd ff05 	bl	80021ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80043a2:	e004      	b.n	80043ae <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7fe fd9d 	bl	8002f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7fe fd8d 	bl	8002f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d108      	bne.n	8004434 <ADC_Enable+0x2c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <ADC_Enable+0x2c>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <ADC_Enable+0x2e>
 8004434:	2300      	movs	r3, #0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d143      	bne.n	80044c2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	4b22      	ldr	r3, [pc, #136]	@ (80044cc <ADC_Enable+0xc4>)
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f043 0210 	orr.w	r2, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004458:	f043 0201 	orr.w	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e02f      	b.n	80044c4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004474:	f7fe fd16 	bl	8002ea4 <HAL_GetTick>
 8004478:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800447a:	e01b      	b.n	80044b4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800447c:	f7fe fd12 	bl	8002ea4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d914      	bls.n	80044b4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00d      	beq.n	80044b4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d1dc      	bne.n	800447c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	8000003f 	.word	0x8000003f

080044d0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d108      	bne.n	80044fc <ADC_Disable+0x2c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <ADC_Disable+0x2c>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <ADC_Disable+0x2e>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d047      	beq.n	8004592 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030d 	and.w	r3, r3, #13
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10f      	bne.n	8004530 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0202 	orr.w	r2, r2, #2
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2203      	movs	r2, #3
 8004526:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004528:	f7fe fcbc 	bl	8002ea4 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800452e:	e029      	b.n	8004584 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0210 	orr.w	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e023      	b.n	8004594 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800454c:	f7fe fcaa 	bl	8002ea4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d914      	bls.n	8004584 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10d      	bne.n	8004584 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	f043 0210 	orr.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d0dc      	beq.n	800454c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 809b 	beq.w	80046f8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d0:	d12a      	bne.n	8004628 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d126      	bne.n	8004628 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d122      	bne.n	8004628 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80045e2:	230c      	movs	r3, #12
 80045e4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80045e6:	e014      	b.n	8004612 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4a46      	ldr	r2, [pc, #280]	@ (8004704 <ADC_ConversionStop+0x168>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d90d      	bls.n	800460c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	f043 0210 	orr.w	r2, r3, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e076      	b.n	80046fa <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3301      	adds	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	2b40      	cmp	r3, #64	@ 0x40
 800461e:	d1e3      	bne.n	80045e8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2240      	movs	r2, #64	@ 0x40
 8004626:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b60      	cmp	r3, #96	@ 0x60
 800462c:	d015      	beq.n	800465a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d10e      	bne.n	800465a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0210 	orr.w	r2, r2, #16
 8004658:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d015      	beq.n	800468c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b08      	cmp	r3, #8
 800466c:	d10e      	bne.n	800468c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004678:	2b00      	cmp	r3, #0
 800467a:	d107      	bne.n	800468c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0220 	orr.w	r2, r2, #32
 800468a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b60      	cmp	r3, #96	@ 0x60
 8004690:	d005      	beq.n	800469e <ADC_ConversionStop+0x102>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b6c      	cmp	r3, #108	@ 0x6c
 8004696:	d105      	bne.n	80046a4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004698:	230c      	movs	r3, #12
 800469a:	617b      	str	r3, [r7, #20]
        break;
 800469c:	e005      	b.n	80046aa <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800469e:	2308      	movs	r3, #8
 80046a0:	617b      	str	r3, [r7, #20]
        break;
 80046a2:	e002      	b.n	80046aa <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80046a4:	2304      	movs	r3, #4
 80046a6:	617b      	str	r3, [r7, #20]
        break;
 80046a8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80046aa:	f7fe fbfb 	bl	8002ea4 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80046b0:	e01b      	b.n	80046ea <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046b2:	f7fe fbf7 	bl	8002ea4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b0b      	cmp	r3, #11
 80046be:	d914      	bls.n	80046ea <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00d      	beq.n	80046ea <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f043 0210 	orr.w	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e007      	b.n	80046fa <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1dc      	bne.n	80046b2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	000993ff 	.word	0x000993ff

08004708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004718:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <__NVIC_SetPriorityGrouping+0x44>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004724:	4013      	ands	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473a:	4a04      	ldr	r2, [pc, #16]	@ (800474c <__NVIC_SetPriorityGrouping+0x44>)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	60d3      	str	r3, [r2, #12]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004754:	4b04      	ldr	r3, [pc, #16]	@ (8004768 <__NVIC_GetPriorityGrouping+0x18>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	f003 0307 	and.w	r3, r3, #7
}
 800475e:	4618      	mov	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477a:	2b00      	cmp	r3, #0
 800477c:	db0b      	blt.n	8004796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	f003 021f 	and.w	r2, r3, #31
 8004784:	4907      	ldr	r1, [pc, #28]	@ (80047a4 <__NVIC_EnableIRQ+0x38>)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2001      	movs	r0, #1
 800478e:	fa00 f202 	lsl.w	r2, r0, r2
 8004792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000e100 	.word	0xe000e100

080047a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	6039      	str	r1, [r7, #0]
 80047b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	db0a      	blt.n	80047d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	490c      	ldr	r1, [pc, #48]	@ (80047f4 <__NVIC_SetPriority+0x4c>)
 80047c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	440b      	add	r3, r1
 80047cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d0:	e00a      	b.n	80047e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	4908      	ldr	r1, [pc, #32]	@ (80047f8 <__NVIC_SetPriority+0x50>)
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	3b04      	subs	r3, #4
 80047e0:	0112      	lsls	r2, r2, #4
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	440b      	add	r3, r1
 80047e6:	761a      	strb	r2, [r3, #24]
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000e100 	.word	0xe000e100
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	@ 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f1c3 0307 	rsb	r3, r3, #7
 8004816:	2b04      	cmp	r3, #4
 8004818:	bf28      	it	cs
 800481a:	2304      	movcs	r3, #4
 800481c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3304      	adds	r3, #4
 8004822:	2b06      	cmp	r3, #6
 8004824:	d902      	bls.n	800482c <NVIC_EncodePriority+0x30>
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3b03      	subs	r3, #3
 800482a:	e000      	b.n	800482e <NVIC_EncodePriority+0x32>
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004830:	f04f 32ff 	mov.w	r2, #4294967295
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43da      	mvns	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	401a      	ands	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004844:	f04f 31ff 	mov.w	r1, #4294967295
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	43d9      	mvns	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004854:	4313      	orrs	r3, r2
         );
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	@ 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3b01      	subs	r3, #1
 8004870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004874:	d301      	bcc.n	800487a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004876:	2301      	movs	r3, #1
 8004878:	e00f      	b.n	800489a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800487a:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <SysTick_Config+0x40>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004882:	210f      	movs	r1, #15
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	f7ff ff8e 	bl	80047a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <SysTick_Config+0x40>)
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004892:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <SysTick_Config+0x40>)
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000e010 	.word	0xe000e010

080048a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff29 	bl	8004708 <__NVIC_SetPriorityGrouping>
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	4603      	mov	r3, r0
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048d0:	f7ff ff3e 	bl	8004750 <__NVIC_GetPriorityGrouping>
 80048d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	6978      	ldr	r0, [r7, #20]
 80048dc:	f7ff ff8e 	bl	80047fc <NVIC_EncodePriority>
 80048e0:	4602      	mov	r2, r0
 80048e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff5d 	bl	80047a8 <__NVIC_SetPriority>
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	4603      	mov	r3, r0
 80048fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff31 	bl	800476c <__NVIC_EnableIRQ>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ffa2 	bl	8004864 <SysTick_Config>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e037      	b.n	80049b0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004956:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800495a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f9c8 	bl	8004d28 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_DMA_Start_IT+0x20>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e04a      	b.n	8004a6e <HAL_DMA_Start_IT+0xb6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d13a      	bne.n	8004a60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f95c 	bl	8004ccc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 020e 	orr.w	r2, r2, #14
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e00f      	b.n	8004a4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 020a 	orr.w	r2, r2, #10
 8004a3c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0204 	bic.w	r2, r2, #4
 8004a4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e005      	b.n	8004a6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e02e      	b.n	8004ae6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d008      	beq.n	8004aa4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e020      	b.n	8004ae6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 020e 	bic.w	r2, r2, #14
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	2101      	movs	r1, #1
 8004ace:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d005      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e027      	b.n	8004b64 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020e 	bic.w	r2, r2, #14
 8004b22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b42:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    }
  }
  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d024      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x72>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01f      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0204 	bic.w	r2, r2, #4
 8004bbc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc6:	2104      	movs	r1, #4
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d06a      	beq.n	8004cac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004bde:	e065      	b.n	8004cac <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	2202      	movs	r2, #2
 8004be6:	409a      	lsls	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02c      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xdc>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d027      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 020a 	bic.w	r2, r2, #10
 8004c16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c28:	2102      	movs	r1, #2
 8004c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d035      	beq.n	8004cac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c48:	e030      	b.n	8004cac <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2208      	movs	r2, #8
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d028      	beq.n	8004cac <HAL_DMA_IRQHandler+0x13e>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d023      	beq.n	8004cac <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 020e 	bic.w	r2, r2, #14
 8004c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
    }
  }
}
 8004caa:	e7ff      	b.n	8004cac <HAL_DMA_IRQHandler+0x13e>
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d108      	bne.n	8004d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d0a:	e007      	b.n	8004d1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x60>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d80f      	bhi.n	8004d5c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b12      	ldr	r3, [pc, #72]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x64>)
 8004d44:	4413      	add	r3, r2
 8004d46:	4a12      	ldr	r2, [pc, #72]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x68>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	009a      	lsls	r2, r3, #2
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <DMA_CalcBaseAndBitshift+0x6c>)
 8004d58:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004d5a:	e00e      	b.n	8004d7a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x70>)
 8004d64:	4413      	add	r3, r2
 8004d66:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x68>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a09      	ldr	r2, [pc, #36]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x74>)
 8004d78:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40020407 	.word	0x40020407
 8004d8c:	bffdfff8 	.word	0xbffdfff8
 8004d90:	cccccccd 	.word	0xcccccccd
 8004d94:	40020000 	.word	0x40020000
 8004d98:	bffdfbf8 	.word	0xbffdfbf8
 8004d9c:	40020400 	.word	0x40020400

08004da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dae:	e154      	b.n	800505a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	2101      	movs	r1, #1
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 8146 	beq.w	8005054 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d005      	beq.n	8004de0 <HAL_GPIO_Init+0x40>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d130      	bne.n	8004e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	2203      	movs	r2, #3
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e16:	2201      	movs	r2, #1
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	f003 0201 	and.w	r2, r3, #1
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d017      	beq.n	8004e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	2203      	movs	r2, #3
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4013      	ands	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d123      	bne.n	8004ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	08da      	lsrs	r2, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3208      	adds	r2, #8
 8004e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	08da      	lsrs	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3208      	adds	r2, #8
 8004ecc:	6939      	ldr	r1, [r7, #16]
 8004ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	2203      	movs	r2, #3
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 0203 	and.w	r2, r3, #3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80a0 	beq.w	8005054 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f14:	4b58      	ldr	r3, [pc, #352]	@ (8005078 <HAL_GPIO_Init+0x2d8>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	4a57      	ldr	r2, [pc, #348]	@ (8005078 <HAL_GPIO_Init+0x2d8>)
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	6193      	str	r3, [r2, #24]
 8004f20:	4b55      	ldr	r3, [pc, #340]	@ (8005078 <HAL_GPIO_Init+0x2d8>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f2c:	4a53      	ldr	r2, [pc, #332]	@ (800507c <HAL_GPIO_Init+0x2dc>)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	3302      	adds	r3, #2
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	220f      	movs	r2, #15
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f56:	d019      	beq.n	8004f8c <HAL_GPIO_Init+0x1ec>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a49      	ldr	r2, [pc, #292]	@ (8005080 <HAL_GPIO_Init+0x2e0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_GPIO_Init+0x1e8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a48      	ldr	r2, [pc, #288]	@ (8005084 <HAL_GPIO_Init+0x2e4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00d      	beq.n	8004f84 <HAL_GPIO_Init+0x1e4>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a47      	ldr	r2, [pc, #284]	@ (8005088 <HAL_GPIO_Init+0x2e8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <HAL_GPIO_Init+0x1e0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a46      	ldr	r2, [pc, #280]	@ (800508c <HAL_GPIO_Init+0x2ec>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_GPIO_Init+0x1dc>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	e008      	b.n	8004f8e <HAL_GPIO_Init+0x1ee>
 8004f7c:	2305      	movs	r3, #5
 8004f7e:	e006      	b.n	8004f8e <HAL_GPIO_Init+0x1ee>
 8004f80:	2303      	movs	r3, #3
 8004f82:	e004      	b.n	8004f8e <HAL_GPIO_Init+0x1ee>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e002      	b.n	8004f8e <HAL_GPIO_Init+0x1ee>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_GPIO_Init+0x1ee>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	f002 0203 	and.w	r2, r2, #3
 8004f94:	0092      	lsls	r2, r2, #2
 8004f96:	4093      	lsls	r3, r2
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f9e:	4937      	ldr	r1, [pc, #220]	@ (800507c <HAL_GPIO_Init+0x2dc>)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fac:	4b38      	ldr	r3, [pc, #224]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ffa:	4a25      	ldr	r2, [pc, #148]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005000:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	43db      	mvns	r3, r3
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005024:	4a1a      	ldr	r2, [pc, #104]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800502a:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	43db      	mvns	r3, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800504e:	4a10      	ldr	r2, [pc, #64]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3301      	adds	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f aea3 	bne.w	8004db0 <HAL_GPIO_Init+0x10>
  }
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40021000 	.word	0x40021000
 800507c:	40010000 	.word	0x40010000
 8005080:	48000400 	.word	0x48000400
 8005084:	48000800 	.word	0x48000800
 8005088:	48000c00 	.word	0x48000c00
 800508c:	48001000 	.word	0x48001000
 8005090:	40010400 	.word	0x40010400

08005094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	e001      	b.n	80050b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
 80050d0:	4613      	mov	r3, r2
 80050d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050e0:	e002      	b.n	80050e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050fe:	4b08      	ldr	r3, [pc, #32]	@ (8005120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800510a:	4a05      	ldr	r2, [pc, #20]	@ (8005120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fc ff0a 	bl	8001f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40010400 	.word	0x40010400

08005124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e08d      	b.n	8005252 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fd fac6 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	@ 0x24
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005174:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005184:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d107      	bne.n	800519e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	e006      	b.n	80051ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d108      	bne.n	80051c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	e007      	b.n	80051d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69d9      	ldr	r1, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	460b      	mov	r3, r1
 800526a:	817b      	strh	r3, [r7, #10]
 800526c:	4613      	mov	r3, r2
 800526e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 80fd 	bne.w	8005478 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_I2C_Master_Transmit+0x30>
 8005288:	2302      	movs	r3, #2
 800528a:	e0f6      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005294:	f7fd fe06 	bl	8002ea4 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2319      	movs	r3, #25
 80052a0:	2201      	movs	r2, #1
 80052a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fa0a 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0e1      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2221      	movs	r2, #33	@ 0x21
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2210      	movs	r2, #16
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	893a      	ldrh	r2, [r7, #8]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2bff      	cmp	r3, #255	@ 0xff
 80052e6:	d906      	bls.n	80052f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	22ff      	movs	r2, #255	@ 0xff
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80052ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e007      	b.n	8005306 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005300:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005304:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d024      	beq.n	8005358 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	b2db      	uxtb	r3, r3
 8005344:	3301      	adds	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	8979      	ldrh	r1, [r7, #10]
 800534a:	4b4e      	ldr	r3, [pc, #312]	@ (8005484 <HAL_I2C_Master_Transmit+0x228>)
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fc05 	bl	8005b60 <I2C_TransferConfig>
 8005356:	e066      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535c:	b2da      	uxtb	r2, r3
 800535e:	8979      	ldrh	r1, [r7, #10]
 8005360:	4b48      	ldr	r3, [pc, #288]	@ (8005484 <HAL_I2C_Master_Transmit+0x228>)
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fbfa 	bl	8005b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800536c:	e05b      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f9fd 	bl	8005772 <I2C_WaitOnTXISFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07b      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d034      	beq.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d130      	bne.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	@ 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f976 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e04d      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2bff      	cmp	r3, #255	@ 0xff
 80053e6:	d90e      	bls.n	8005406 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	22ff      	movs	r2, #255	@ 0xff
 80053ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	8979      	ldrh	r1, [r7, #10]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fbae 	bl	8005b60 <I2C_TransferConfig>
 8005404:	e00f      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005414:	b2da      	uxtb	r2, r3
 8005416:	8979      	ldrh	r1, [r7, #10]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fb9d 	bl	8005b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d19e      	bne.n	800536e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	6a39      	ldr	r1, [r7, #32]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f9e3 	bl	8005800 <I2C_WaitOnSTOPFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e01a      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2220      	movs	r2, #32
 800544a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <HAL_I2C_Master_Transmit+0x22c>)
 8005458:	400b      	ands	r3, r1
 800545a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	80002000 	.word	0x80002000
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	461a      	mov	r2, r3
 8005498:	460b      	mov	r3, r1
 800549a:	817b      	strh	r3, [r7, #10]
 800549c:	4613      	mov	r3, r2
 800549e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	f040 80db 	bne.w	8005664 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_I2C_Master_Receive+0x30>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0d4      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054c4:	f7fd fcee 	bl	8002ea4 <HAL_GetTick>
 80054c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2319      	movs	r3, #25
 80054d0:	2201      	movs	r2, #1
 80054d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f8f2 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0bf      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2222      	movs	r2, #34	@ 0x22
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2210      	movs	r2, #16
 80054f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	893a      	ldrh	r2, [r7, #8]
 8005506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2bff      	cmp	r3, #255	@ 0xff
 8005516:	d90e      	bls.n	8005536 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005522:	b2da      	uxtb	r2, r3
 8005524:	8979      	ldrh	r1, [r7, #10]
 8005526:	4b52      	ldr	r3, [pc, #328]	@ (8005670 <HAL_I2C_Master_Receive+0x1e4>)
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fb16 	bl	8005b60 <I2C_TransferConfig>
 8005534:	e06d      	b.n	8005612 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	b2da      	uxtb	r2, r3
 8005546:	8979      	ldrh	r1, [r7, #10]
 8005548:	4b49      	ldr	r3, [pc, #292]	@ (8005670 <HAL_I2C_Master_Receive+0x1e4>)
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fb05 	bl	8005b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005556:	e05c      	b.n	8005612 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	6a39      	ldr	r1, [r7, #32]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f993 	bl	8005888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e07c      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d034      	beq.n	8005612 <HAL_I2C_Master_Receive+0x186>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d130      	bne.n	8005612 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2180      	movs	r1, #128	@ 0x80
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f880 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e04d      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2bff      	cmp	r3, #255	@ 0xff
 80055d2:	d90e      	bls.n	80055f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	22ff      	movs	r2, #255	@ 0xff
 80055d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	8979      	ldrh	r1, [r7, #10]
 80055e2:	2300      	movs	r3, #0
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fab8 	bl	8005b60 <I2C_TransferConfig>
 80055f0:	e00f      	b.n	8005612 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005600:	b2da      	uxtb	r2, r3
 8005602:	8979      	ldrh	r1, [r7, #10]
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 faa7 	bl	8005b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d19d      	bne.n	8005558 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	6a39      	ldr	r1, [r7, #32]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f8ed 	bl	8005800 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e01a      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2220      	movs	r2, #32
 8005636:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <HAL_I2C_Master_Receive+0x1e8>)
 8005644:	400b      	ands	r3, r1
 8005646:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	80002400 	.word	0x80002400
 8005674:	fe00e800 	.word	0xfe00e800

08005678 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d103      	bne.n	8005696 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d007      	beq.n	80056b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	619a      	str	r2, [r3, #24]
  }
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d0:	e03b      	b.n	800574a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f962 	bl	80059a0 <I2C_IsErrorOccurred>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e041      	b.n	800576a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d02d      	beq.n	800574a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fd fbd9 	bl	8002ea4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnFlagUntilTimeout+0x44>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d122      	bne.n	800574a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	429a      	cmp	r2, r3
 8005720:	d113      	bne.n	800574a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e00f      	b.n	800576a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d0b4      	beq.n	80056d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800577e:	e033      	b.n	80057e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f90b 	bl	80059a0 <I2C_IsErrorOccurred>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e031      	b.n	80057f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d025      	beq.n	80057e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579c:	f7fd fb82 	bl	8002ea4 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d302      	bcc.n	80057b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11a      	bne.n	80057e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d013      	beq.n	80057e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e007      	b.n	80057f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d1c4      	bne.n	8005780 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800580c:	e02f      	b.n	800586e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f8c4 	bl	80059a0 <I2C_IsErrorOccurred>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e02d      	b.n	800587e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fd fb3f 	bl	8002ea4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d11a      	bne.n	800586e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b20      	cmp	r3, #32
 8005844:	d013      	beq.n	800586e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e007      	b.n	800587e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b20      	cmp	r3, #32
 800587a:	d1c8      	bne.n	800580e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005898:	e071      	b.n	800597e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f87e 	bl	80059a0 <I2C_IsErrorOccurred>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d13b      	bne.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d138      	bne.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d105      	bne.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d121      	bne.n	800592e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2204      	movs	r2, #4
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2220      	movs	r2, #32
 80058fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b24      	ldr	r3, [pc, #144]	@ (800599c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800590c:	400b      	ands	r3, r1
 800590e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
 800592c:	e002      	b.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005934:	f7fd fab6 	bl	8002ea4 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d119      	bne.n	800597e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d116      	bne.n	800597e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b04      	cmp	r3, #4
 800595c:	d00f      	beq.n	800597e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b04      	cmp	r3, #4
 800598a:	d002      	beq.n	8005992 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d083      	beq.n	800589a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	fe00e800 	.word	0xfe00e800

080059a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d068      	beq.n	8005a9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2210      	movs	r2, #16
 80059d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059d4:	e049      	b.n	8005a6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d045      	beq.n	8005a6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fd fa61 	bl	8002ea4 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_IsErrorOccurred+0x54>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d13a      	bne.n	8005a6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a16:	d121      	bne.n	8005a5c <I2C_IsErrorOccurred+0xbc>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a1e:	d01d      	beq.n	8005a5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d01a      	beq.n	8005a5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a36:	f7fd fa35 	bl	8002ea4 <HAL_GetTick>
 8005a3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a3c:	e00e      	b.n	8005a5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a3e:	f7fd fa31 	bl	8002ea4 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b19      	cmp	r3, #25
 8005a4a:	d907      	bls.n	8005a5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f043 0320 	orr.w	r3, r3, #32
 8005a52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a5a:	e006      	b.n	8005a6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d1e9      	bne.n	8005a3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d003      	beq.n	8005a80 <I2C_IsErrorOccurred+0xe0>
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0aa      	beq.n	80059d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d103      	bne.n	8005a90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f043 0308 	orr.w	r3, r3, #8
 8005ad8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01c      	beq.n	8005b4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff fdaf 	bl	8005678 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4b0d      	ldr	r3, [pc, #52]	@ (8005b5c <I2C_IsErrorOccurred+0x1bc>)
 8005b26:	400b      	ands	r3, r1
 8005b28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3728      	adds	r7, #40	@ 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	fe00e800 	.word	0xfe00e800

08005b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b78:	7a7b      	ldrb	r3, [r7, #9]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	0d5b      	lsrs	r3, r3, #21
 8005b9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005b9e:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <I2C_TransferConfig+0x60>)
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	ea02 0103 	and.w	r1, r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	03ff63ff 	.word	0x03ff63ff

08005bc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d138      	bne.n	8005c4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e032      	b.n	8005c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2224      	movs	r2, #36	@ 0x24
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6819      	ldr	r1, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d139      	bne.n	8005ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e033      	b.n	8005ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2224      	movs	r2, #36	@ 0x24
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005cac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f001 b823 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 817d 	beq.w	800602a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d30:	4bbc      	ldr	r3, [pc, #752]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 030c 	and.w	r3, r3, #12
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d00c      	beq.n	8005d56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d3c:	4bb9      	ldr	r3, [pc, #740]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d15c      	bne.n	8005e02 <HAL_RCC_OscConfig+0x10e>
 8005d48:	4bb6      	ldr	r3, [pc, #728]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d54:	d155      	bne.n	8005e02 <HAL_RCC_OscConfig+0x10e>
 8005d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005d62:	fa93 f3a3 	rbit	r3, r3
 8005d66:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6e:	fab3 f383 	clz	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d102      	bne.n	8005d88 <HAL_RCC_OscConfig+0x94>
 8005d82:	4ba8      	ldr	r3, [pc, #672]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	e015      	b.n	8005db4 <HAL_RCC_OscConfig+0xc0>
 8005d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005d94:	fa93 f3a3 	rbit	r3, r3
 8005d98:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005da0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005da4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005da8:	fa93 f3a3 	rbit	r3, r3
 8005dac:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005db0:	4b9c      	ldr	r3, [pc, #624]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005db8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005dbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005dc0:	fa92 f2a2 	rbit	r2, r2
 8005dc4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005dc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005dcc:	fab2 f282 	clz	r2, r2
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	f042 0220 	orr.w	r2, r2, #32
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f002 021f 	and.w	r2, r2, #31
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f202 	lsl.w	r2, r1, r2
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 811f 	beq.w	8006028 <HAL_RCC_OscConfig+0x334>
 8005dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8116 	bne.w	8006028 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f000 bfaf 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e12:	d106      	bne.n	8005e22 <HAL_RCC_OscConfig+0x12e>
 8005e14:	4b83      	ldr	r3, [pc, #524]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a82      	ldr	r2, [pc, #520]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e036      	b.n	8005e90 <HAL_RCC_OscConfig+0x19c>
 8005e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x158>
 8005e32:	4b7c      	ldr	r3, [pc, #496]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7b      	ldr	r2, [pc, #492]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b79      	ldr	r3, [pc, #484]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a78      	ldr	r2, [pc, #480]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e021      	b.n	8005e90 <HAL_RCC_OscConfig+0x19c>
 8005e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x184>
 8005e5e:	4b71      	ldr	r3, [pc, #452]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a70      	ldr	r2, [pc, #448]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0x19c>
 8005e78:	4b6a      	ldr	r3, [pc, #424]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a69      	ldr	r2, [pc, #420]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b67      	ldr	r3, [pc, #412]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a66      	ldr	r2, [pc, #408]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e90:	4b64      	ldr	r3, [pc, #400]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	f023 020f 	bic.w	r2, r3, #15
 8005e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	495f      	ldr	r1, [pc, #380]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d059      	beq.n	8005f6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fc fff3 	bl	8002ea4 <HAL_GetTick>
 8005ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	e00a      	b.n	8005eda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fc ffee 	bl	8002ea4 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b64      	cmp	r3, #100	@ 0x64
 8005ed2:	d902      	bls.n	8005eda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	f000 bf43 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
 8005eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ede:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005ee6:	fa93 f3a3 	rbit	r3, r3
 8005eea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005eee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef2:	fab3 f383 	clz	r3, r3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d102      	bne.n	8005f0c <HAL_RCC_OscConfig+0x218>
 8005f06:	4b47      	ldr	r3, [pc, #284]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	e015      	b.n	8005f38 <HAL_RCC_OscConfig+0x244>
 8005f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f10:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005f18:	fa93 f3a3 	rbit	r3, r3
 8005f1c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005f20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f24:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005f28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005f2c:	fa93 f3a3 	rbit	r3, r3
 8005f30:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005f34:	4b3b      	ldr	r3, [pc, #236]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f3c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005f40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005f44:	fa92 f2a2 	rbit	r2, r2
 8005f48:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005f4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005f50:	fab2 f282 	clz	r2, r2
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	f042 0220 	orr.w	r2, r2, #32
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	f002 021f 	and.w	r2, r2, #31
 8005f60:	2101      	movs	r1, #1
 8005f62:	fa01 f202 	lsl.w	r2, r1, r2
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0ab      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x1d0>
 8005f6c:	e05d      	b.n	800602a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6e:	f7fc ff99 	bl	8002ea4 <HAL_GetTick>
 8005f72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f78:	f7fc ff94 	bl	8002ea4 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b64      	cmp	r3, #100	@ 0x64
 8005f86:	d902      	bls.n	8005f8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	f000 bee9 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
 8005f8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f92:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005f9a:	fa93 f3a3 	rbit	r3, r3
 8005f9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005fa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa6:	fab3 f383 	clz	r3, r3
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x2cc>
 8005fba:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	e015      	b.n	8005fec <HAL_RCC_OscConfig+0x2f8>
 8005fc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fc4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005fcc:	fa93 f3a3 	rbit	r3, r3
 8005fd0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fd8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005fdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005fe0:	fa93 f3a3 	rbit	r3, r3
 8005fe4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8006024 <HAL_RCC_OscConfig+0x330>)
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ff0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005ff4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005ff8:	fa92 f2a2 	rbit	r2, r2
 8005ffc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8006000:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8006004:	fab2 f282 	clz	r2, r2
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	f042 0220 	orr.w	r2, r2, #32
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	f002 021f 	and.w	r2, r2, #31
 8006014:	2101      	movs	r1, #1
 8006016:	fa01 f202 	lsl.w	r2, r1, r2
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ab      	bne.n	8005f78 <HAL_RCC_OscConfig+0x284>
 8006020:	e003      	b.n	800602a <HAL_RCC_OscConfig+0x336>
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800602a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800602e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 817d 	beq.w	800633a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006040:	4ba6      	ldr	r3, [pc, #664]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800604c:	4ba3      	ldr	r3, [pc, #652]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 030c 	and.w	r3, r3, #12
 8006054:	2b08      	cmp	r3, #8
 8006056:	d172      	bne.n	800613e <HAL_RCC_OscConfig+0x44a>
 8006058:	4ba0      	ldr	r3, [pc, #640]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d16c      	bne.n	800613e <HAL_RCC_OscConfig+0x44a>
 8006064:	2302      	movs	r3, #2
 8006066:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8006076:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607a:	fab3 f383 	clz	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <HAL_RCC_OscConfig+0x3a0>
 800608e:	4b93      	ldr	r3, [pc, #588]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	e013      	b.n	80060bc <HAL_RCC_OscConfig+0x3c8>
 8006094:	2302      	movs	r3, #2
 8006096:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800609e:	fa93 f3a3 	rbit	r3, r3
 80060a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80060a6:	2302      	movs	r3, #2
 80060a8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80060ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060b0:	fa93 f3a3 	rbit	r3, r3
 80060b4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80060b8:	4b88      	ldr	r3, [pc, #544]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	2202      	movs	r2, #2
 80060be:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80060c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80060c6:	fa92 f2a2 	rbit	r2, r2
 80060ca:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80060ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80060d2:	fab2 f282 	clz	r2, r2
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	f042 0220 	orr.w	r2, r2, #32
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	f002 021f 	and.w	r2, r2, #31
 80060e2:	2101      	movs	r1, #1
 80060e4:	fa01 f202 	lsl.w	r2, r1, r2
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <HAL_RCC_OscConfig+0x410>
 80060ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d002      	beq.n	8006104 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f000 be2e 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006104:	4b75      	ldr	r3, [pc, #468]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800610c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006110:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	21f8      	movs	r1, #248	@ 0xf8
 800611a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006122:	fa91 f1a1 	rbit	r1, r1
 8006126:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800612a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800612e:	fab1 f181 	clz	r1, r1
 8006132:	b2c9      	uxtb	r1, r1
 8006134:	408b      	lsls	r3, r1
 8006136:	4969      	ldr	r1, [pc, #420]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 8006138:	4313      	orrs	r3, r2
 800613a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613c:	e0fd      	b.n	800633a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800613e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8088 	beq.w	8006260 <HAL_RCC_OscConfig+0x56c>
 8006150:	2301      	movs	r3, #1
 8006152:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006156:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800615a:	fa93 f3a3 	rbit	r3, r3
 800615e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006162:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006166:	fab3 f383 	clz	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006170:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	461a      	mov	r2, r3
 8006178:	2301      	movs	r3, #1
 800617a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617c:	f7fc fe92 	bl	8002ea4 <HAL_GetTick>
 8006180:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006184:	e00a      	b.n	800619c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006186:	f7fc fe8d 	bl	8002ea4 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d902      	bls.n	800619c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	f000 bde2 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
 800619c:	2302      	movs	r3, #2
 800619e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80061a6:	fa93 f3a3 	rbit	r3, r3
 80061aa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80061ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d102      	bne.n	80061cc <HAL_RCC_OscConfig+0x4d8>
 80061c6:	4b45      	ldr	r3, [pc, #276]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	e013      	b.n	80061f4 <HAL_RCC_OscConfig+0x500>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80061d6:	fa93 f3a3 	rbit	r3, r3
 80061da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80061de:	2302      	movs	r3, #2
 80061e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80061e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80061f0:	4b3a      	ldr	r3, [pc, #232]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	2202      	movs	r2, #2
 80061f6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80061fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80061fe:	fa92 f2a2 	rbit	r2, r2
 8006202:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8006206:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800620a:	fab2 f282 	clz	r2, r2
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	f042 0220 	orr.w	r2, r2, #32
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	f002 021f 	and.w	r2, r2, #31
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f202 	lsl.w	r2, r1, r2
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0af      	beq.n	8006186 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006226:	4b2d      	ldr	r3, [pc, #180]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800622e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	21f8      	movs	r1, #248	@ 0xf8
 800623c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006240:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006244:	fa91 f1a1 	rbit	r1, r1
 8006248:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800624c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006250:	fab1 f181 	clz	r1, r1
 8006254:	b2c9      	uxtb	r1, r1
 8006256:	408b      	lsls	r3, r1
 8006258:	4920      	ldr	r1, [pc, #128]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 800625a:	4313      	orrs	r3, r2
 800625c:	600b      	str	r3, [r1, #0]
 800625e:	e06c      	b.n	800633a <HAL_RCC_OscConfig+0x646>
 8006260:	2301      	movs	r3, #1
 8006262:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006276:	fab3 f383 	clz	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006280:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fc fe0a 	bl	8002ea4 <HAL_GetTick>
 8006290:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006296:	f7fc fe05 	bl	8002ea4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	f000 bd5a 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
 80062ac:	2302      	movs	r3, #2
 80062ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80062be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d104      	bne.n	80062e0 <HAL_RCC_OscConfig+0x5ec>
 80062d6:	4b01      	ldr	r3, [pc, #4]	@ (80062dc <HAL_RCC_OscConfig+0x5e8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	e015      	b.n	8006308 <HAL_RCC_OscConfig+0x614>
 80062dc:	40021000 	.word	0x40021000
 80062e0:	2302      	movs	r3, #2
 80062e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062ea:	fa93 f3a3 	rbit	r3, r3
 80062ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80062f2:	2302      	movs	r3, #2
 80062f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80062f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062fc:	fa93 f3a3 	rbit	r3, r3
 8006300:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006304:	4bc8      	ldr	r3, [pc, #800]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	2202      	movs	r2, #2
 800630a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800630e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006312:	fa92 f2a2 	rbit	r2, r2
 8006316:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800631a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800631e:	fab2 f282 	clz	r2, r2
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	f042 0220 	orr.w	r2, r2, #32
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	f002 021f 	and.w	r2, r2, #31
 800632e:	2101      	movs	r1, #1
 8006330:	fa01 f202 	lsl.w	r2, r1, r2
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ad      	bne.n	8006296 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800633a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800633e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8110 	beq.w	8006570 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d079      	beq.n	8006454 <HAL_RCC_OscConfig+0x760>
 8006360:	2301      	movs	r3, #1
 8006362:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006366:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800636a:	fa93 f3a3 	rbit	r3, r3
 800636e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006376:	fab3 f383 	clz	r3, r3
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	4bab      	ldr	r3, [pc, #684]	@ (800662c <HAL_RCC_OscConfig+0x938>)
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	461a      	mov	r2, r3
 8006386:	2301      	movs	r3, #1
 8006388:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638a:	f7fc fd8b 	bl	8002ea4 <HAL_GetTick>
 800638e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006394:	f7fc fd86 	bl	8002ea4 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d902      	bls.n	80063aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	f000 bcdb 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
 80063aa:	2302      	movs	r3, #2
 80063ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80063b4:	fa93 f3a3 	rbit	r3, r3
 80063b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80063bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80063c4:	2202      	movs	r2, #2
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	fa93 f2a3 	rbit	r2, r3
 80063d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	2202      	movs	r2, #2
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	fa93 f2a3 	rbit	r2, r3
 80063fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006402:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006404:	4b88      	ldr	r3, [pc, #544]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 8006406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800640c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006410:	2102      	movs	r1, #2
 8006412:	6019      	str	r1, [r3, #0]
 8006414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	fa93 f1a3 	rbit	r1, r3
 8006422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006426:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800642a:	6019      	str	r1, [r3, #0]
  return result;
 800642c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006430:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	fab3 f383 	clz	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0a0      	beq.n	8006394 <HAL_RCC_OscConfig+0x6a0>
 8006452:	e08d      	b.n	8006570 <HAL_RCC_OscConfig+0x87c>
 8006454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006458:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006464:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	fa93 f2a3 	rbit	r2, r3
 800646e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006472:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006476:	601a      	str	r2, [r3, #0]
  return result;
 8006478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800647c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006480:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006482:	fab3 f383 	clz	r3, r3
 8006486:	b2db      	uxtb	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	4b68      	ldr	r3, [pc, #416]	@ (800662c <HAL_RCC_OscConfig+0x938>)
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	461a      	mov	r2, r3
 8006492:	2300      	movs	r3, #0
 8006494:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006496:	f7fc fd05 	bl	8002ea4 <HAL_GetTick>
 800649a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800649e:	e00a      	b.n	80064b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a0:	f7fc fd00 	bl	8002ea4 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d902      	bls.n	80064b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	f000 bc55 	b.w	8006d60 <HAL_RCC_OscConfig+0x106c>
 80064b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80064be:	2202      	movs	r2, #2
 80064c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	fa93 f2a3 	rbit	r2, r3
 80064d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80064e2:	2202      	movs	r2, #2
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	fa93 f2a3 	rbit	r2, r3
 80064f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006506:	2202      	movs	r2, #2
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	fa93 f2a3 	rbit	r2, r3
 8006518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800651c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006520:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006522:	4b41      	ldr	r3, [pc, #260]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 8006524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800652a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800652e:	2102      	movs	r1, #2
 8006530:	6019      	str	r1, [r3, #0]
 8006532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006536:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	fa93 f1a3 	rbit	r1, r3
 8006540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006544:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006548:	6019      	str	r1, [r3, #0]
  return result;
 800654a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800654e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	fab3 f383 	clz	r3, r3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f303 	lsl.w	r3, r1, r3
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d197      	bne.n	80064a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006574:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 81a1 	beq.w	80068c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800658c:	4b26      	ldr	r3, [pc, #152]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d116      	bne.n	80065c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006598:	4b23      	ldr	r3, [pc, #140]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	4a22      	ldr	r2, [pc, #136]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 800659e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a2:	61d3      	str	r3, [r2, #28]
 80065a4:	4b20      	ldr	r3, [pc, #128]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80065ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80065be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006630 <HAL_RCC_OscConfig+0x93c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d11a      	bne.n	8006608 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <HAL_RCC_OscConfig+0x93c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a16      	ldr	r2, [pc, #88]	@ (8006630 <HAL_RCC_OscConfig+0x93c>)
 80065d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065de:	f7fc fc61 	bl	8002ea4 <HAL_GetTick>
 80065e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e6:	e009      	b.n	80065fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e8:	f7fc fc5c 	bl	8002ea4 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b64      	cmp	r3, #100	@ 0x64
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e3b1      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <HAL_RCC_OscConfig+0x93c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0ef      	beq.n	80065e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800660c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10d      	bne.n	8006634 <HAL_RCC_OscConfig+0x940>
 8006618:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	4a02      	ldr	r2, [pc, #8]	@ (8006628 <HAL_RCC_OscConfig+0x934>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6213      	str	r3, [r2, #32]
 8006624:	e03c      	b.n	80066a0 <HAL_RCC_OscConfig+0x9ac>
 8006626:	bf00      	nop
 8006628:	40021000 	.word	0x40021000
 800662c:	10908120 	.word	0x10908120
 8006630:	40007000 	.word	0x40007000
 8006634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10c      	bne.n	800665e <HAL_RCC_OscConfig+0x96a>
 8006644:	4bc1      	ldr	r3, [pc, #772]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	4ac0      	ldr	r2, [pc, #768]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	6213      	str	r3, [r2, #32]
 8006650:	4bbe      	ldr	r3, [pc, #760]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4abd      	ldr	r2, [pc, #756]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006656:	f023 0304 	bic.w	r3, r3, #4
 800665a:	6213      	str	r3, [r2, #32]
 800665c:	e020      	b.n	80066a0 <HAL_RCC_OscConfig+0x9ac>
 800665e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b05      	cmp	r3, #5
 800666c:	d10c      	bne.n	8006688 <HAL_RCC_OscConfig+0x994>
 800666e:	4bb7      	ldr	r3, [pc, #732]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	4ab6      	ldr	r2, [pc, #728]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006674:	f043 0304 	orr.w	r3, r3, #4
 8006678:	6213      	str	r3, [r2, #32]
 800667a:	4bb4      	ldr	r3, [pc, #720]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	4ab3      	ldr	r2, [pc, #716]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	6213      	str	r3, [r2, #32]
 8006686:	e00b      	b.n	80066a0 <HAL_RCC_OscConfig+0x9ac>
 8006688:	4bb0      	ldr	r3, [pc, #704]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	4aaf      	ldr	r2, [pc, #700]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	6213      	str	r3, [r2, #32]
 8006694:	4bad      	ldr	r3, [pc, #692]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	4aac      	ldr	r2, [pc, #688]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800669a:	f023 0304 	bic.w	r3, r3, #4
 800669e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8081 	beq.w	80067b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b2:	f7fc fbf7 	bl	8002ea4 <HAL_GetTick>
 80066b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ba:	e00b      	b.n	80066d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fc fbf2 	bl	8002ea4 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e345      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
 80066d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80066dc:	2202      	movs	r2, #2
 80066de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	fa93 f2a3 	rbit	r2, r3
 80066ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006700:	2202      	movs	r2, #2
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006708:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	fa93 f2a3 	rbit	r2, r3
 8006712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006716:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800671a:	601a      	str	r2, [r3, #0]
  return result;
 800671c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006720:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006724:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006726:	fab3 f383 	clz	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d102      	bne.n	8006740 <HAL_RCC_OscConfig+0xa4c>
 800673a:	4b84      	ldr	r3, [pc, #528]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	e013      	b.n	8006768 <HAL_RCC_OscConfig+0xa74>
 8006740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006744:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006748:	2202      	movs	r2, #2
 800674a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006750:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	fa93 f2a3 	rbit	r2, r3
 800675a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	4b79      	ldr	r3, [pc, #484]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800676c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006770:	2102      	movs	r1, #2
 8006772:	6011      	str	r1, [r2, #0]
 8006774:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006778:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	fa92 f1a2 	rbit	r1, r2
 8006782:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006786:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800678a:	6011      	str	r1, [r2, #0]
  return result;
 800678c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006790:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	fab2 f282 	clz	r2, r2
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	f002 021f 	and.w	r2, r2, #31
 80067a6:	2101      	movs	r1, #1
 80067a8:	fa01 f202 	lsl.w	r2, r1, r2
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d084      	beq.n	80066bc <HAL_RCC_OscConfig+0x9c8>
 80067b2:	e07f      	b.n	80068b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b4:	f7fc fb76 	bl	8002ea4 <HAL_GetTick>
 80067b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067bc:	e00b      	b.n	80067d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067be:	f7fc fb71 	bl	8002ea4 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e2c4      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
 80067d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80067de:	2202      	movs	r2, #2
 80067e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	fa93 f2a3 	rbit	r2, r3
 80067f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006802:	2202      	movs	r2, #2
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800680a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	fa93 f2a3 	rbit	r2, r3
 8006814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006818:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800681c:	601a      	str	r2, [r3, #0]
  return result;
 800681e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006822:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f043 0302 	orr.w	r3, r3, #2
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d102      	bne.n	8006842 <HAL_RCC_OscConfig+0xb4e>
 800683c:	4b43      	ldr	r3, [pc, #268]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	e013      	b.n	800686a <HAL_RCC_OscConfig+0xb76>
 8006842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006846:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800684a:	2202      	movs	r2, #2
 800684c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006852:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	fa93 f2a3 	rbit	r2, r3
 800685c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006860:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	4b39      	ldr	r3, [pc, #228]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800686e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006872:	2102      	movs	r1, #2
 8006874:	6011      	str	r1, [r2, #0]
 8006876:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800687a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	fa92 f1a2 	rbit	r1, r2
 8006884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006888:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800688c:	6011      	str	r1, [r2, #0]
  return result;
 800688e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006892:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	fab2 f282 	clz	r2, r2
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	f002 021f 	and.w	r2, r2, #31
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f202 	lsl.w	r2, r1, r2
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d184      	bne.n	80067be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d105      	bne.n	80068c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068bc:	4b23      	ldr	r3, [pc, #140]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	4a22      	ldr	r2, [pc, #136]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 80068c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8242 	beq.w	8006d5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068da:	4b1c      	ldr	r3, [pc, #112]	@ (800694c <HAL_RCC_OscConfig+0xc58>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	f000 8213 	beq.w	8006d0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	f040 8162 	bne.w	8006bbe <HAL_RCC_OscConfig+0xeca>
 80068fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006902:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800690c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	fa93 f2a3 	rbit	r2, r3
 8006916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800691e:	601a      	str	r2, [r3, #0]
  return result;
 8006920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006924:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006928:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692a:	fab3 f383 	clz	r3, r3
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006934:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	461a      	mov	r2, r3
 800693c:	2300      	movs	r3, #0
 800693e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006940:	f7fc fab0 	bl	8002ea4 <HAL_GetTick>
 8006944:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006948:	e00c      	b.n	8006964 <HAL_RCC_OscConfig+0xc70>
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006950:	f7fc faa8 	bl	8002ea4 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e1fd      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
 8006964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006968:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800696c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006976:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	fa93 f2a3 	rbit	r2, r3
 8006980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006984:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006988:	601a      	str	r2, [r3, #0]
  return result;
 800698a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800698e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006992:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006994:	fab3 f383 	clz	r3, r3
 8006998:	b2db      	uxtb	r3, r3
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d102      	bne.n	80069ae <HAL_RCC_OscConfig+0xcba>
 80069a8:	4bb0      	ldr	r3, [pc, #704]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	e027      	b.n	80069fe <HAL_RCC_OscConfig+0xd0a>
 80069ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80069b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	fa93 f2a3 	rbit	r2, r3
 80069ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80069dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	fa93 f2a3 	rbit	r2, r3
 80069f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	4b9c      	ldr	r3, [pc, #624]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a02:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006a06:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006a0a:	6011      	str	r1, [r2, #0]
 8006a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a10:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	fa92 f1a2 	rbit	r1, r2
 8006a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006a22:	6011      	str	r1, [r2, #0]
  return result;
 8006a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a28:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	fab2 f282 	clz	r2, r2
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	f042 0220 	orr.w	r2, r2, #32
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	f002 021f 	and.w	r2, r2, #31
 8006a3e:	2101      	movs	r1, #1
 8006a40:	fa01 f202 	lsl.w	r2, r1, r2
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d182      	bne.n	8006950 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a4a:	4b88      	ldr	r3, [pc, #544]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	497f      	ldr	r1, [pc, #508]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	604b      	str	r3, [r1, #4]
 8006a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a76:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006a7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a84:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	fa93 f2a3 	rbit	r2, r3
 8006a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006a96:	601a      	str	r2, [r3, #0]
  return result;
 8006a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a9c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006aa0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aa2:	fab3 f383 	clz	r3, r3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006aac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab8:	f7fc f9f4 	bl	8002ea4 <HAL_GetTick>
 8006abc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ac0:	e009      	b.n	8006ad6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac2:	f7fc f9ef 	bl	8002ea4 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e144      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
 8006ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ada:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	fa93 f2a3 	rbit	r2, r3
 8006af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006af6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006afa:	601a      	str	r2, [r3, #0]
  return result;
 8006afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b00:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006b04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b06:	fab3 f383 	clz	r3, r3
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d102      	bne.n	8006b20 <HAL_RCC_OscConfig+0xe2c>
 8006b1a:	4b54      	ldr	r3, [pc, #336]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	e027      	b.n	8006b70 <HAL_RCC_OscConfig+0xe7c>
 8006b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b24:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006b28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b32:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	fa93 f2a3 	rbit	r2, r3
 8006b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b58:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	fa93 f2a3 	rbit	r2, r3
 8006b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b66:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b74:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006b78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006b7c:	6011      	str	r1, [r2, #0]
 8006b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b82:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	fa92 f1a2 	rbit	r1, r2
 8006b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b90:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006b94:	6011      	str	r1, [r2, #0]
  return result;
 8006b96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b9a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	fab2 f282 	clz	r2, r2
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	f042 0220 	orr.w	r2, r2, #32
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	f002 021f 	and.w	r2, r2, #31
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d082      	beq.n	8006ac2 <HAL_RCC_OscConfig+0xdce>
 8006bbc:	e0cf      	b.n	8006d5e <HAL_RCC_OscConfig+0x106a>
 8006bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bc2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006bc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bd0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	fa93 f2a3 	rbit	r2, r3
 8006bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bde:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006be2:	601a      	str	r2, [r3, #0]
  return result;
 8006be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006be8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006bec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bee:	fab3 f383 	clz	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006bf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c04:	f7fc f94e 	bl	8002ea4 <HAL_GetTick>
 8006c08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c0c:	e009      	b.n	8006c22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0e:	f7fc f949 	bl	8002ea4 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e09e      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
 8006c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	fa93 f2a3 	rbit	r2, r3
 8006c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c42:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006c46:	601a      	str	r2, [r3, #0]
  return result;
 8006c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c4c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006c50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c52:	fab3 f383 	clz	r3, r3
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d104      	bne.n	8006c70 <HAL_RCC_OscConfig+0xf7c>
 8006c66:	4b01      	ldr	r3, [pc, #4]	@ (8006c6c <HAL_RCC_OscConfig+0xf78>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	e029      	b.n	8006cc0 <HAL_RCC_OscConfig+0xfcc>
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c82:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	fa93 f2a3 	rbit	r2, r3
 8006c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c90:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c9a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006c9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ca8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	fa93 f2a3 	rbit	r2, r3
 8006cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cb6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8006d6c <HAL_RCC_OscConfig+0x1078>)
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cc4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006cc8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cd2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	fa92 f1a2 	rbit	r1, r2
 8006cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ce0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006ce4:	6011      	str	r1, [r2, #0]
  return result;
 8006ce6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006cea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	fab2 f282 	clz	r2, r2
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	f042 0220 	orr.w	r2, r2, #32
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	f002 021f 	and.w	r2, r2, #31
 8006d00:	2101      	movs	r1, #1
 8006d02:	fa01 f202 	lsl.w	r2, r1, r2
 8006d06:	4013      	ands	r3, r2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d180      	bne.n	8006c0e <HAL_RCC_OscConfig+0xf1a>
 8006d0c:	e027      	b.n	8006d5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e01e      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d22:	4b12      	ldr	r3, [pc, #72]	@ (8006d6c <HAL_RCC_OscConfig+0x1078>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006d2e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d10b      	bne.n	8006d5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006d46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d001      	beq.n	8006d5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40021000 	.word	0x40021000

08006d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09e      	sub	sp, #120	@ 0x78
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e162      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d88:	4b90      	ldr	r3, [pc, #576]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d910      	bls.n	8006db8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d96:	4b8d      	ldr	r3, [pc, #564]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 0207 	bic.w	r2, r3, #7
 8006d9e:	498b      	ldr	r1, [pc, #556]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da6:	4b89      	ldr	r3, [pc, #548]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e14a      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc4:	4b82      	ldr	r3, [pc, #520]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	497f      	ldr	r1, [pc, #508]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80dc 	beq.w	8006f9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d13c      	bne.n	8006e66 <HAL_RCC_ClockConfig+0xf6>
 8006dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006df0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006df4:	fa93 f3a3 	rbit	r3, r3
 8006df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfc:	fab3 f383 	clz	r3, r3
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <HAL_RCC_ClockConfig+0xa6>
 8006e10:	4b6f      	ldr	r3, [pc, #444]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	e00f      	b.n	8006e36 <HAL_RCC_ClockConfig+0xc6>
 8006e16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e1e:	fa93 f3a3 	rbit	r3, r3
 8006e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e2c:	fa93 f3a3 	rbit	r3, r3
 8006e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e32:	4b67      	ldr	r3, [pc, #412]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006e3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e3e:	fa92 f2a2 	rbit	r2, r2
 8006e42:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006e44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e46:	fab2 f282 	clz	r2, r2
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	f042 0220 	orr.w	r2, r2, #32
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	f002 021f 	and.w	r2, r2, #31
 8006e56:	2101      	movs	r1, #1
 8006e58:	fa01 f202 	lsl.w	r2, r1, r2
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d17b      	bne.n	8006f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e0f3      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d13c      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x178>
 8006e6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e76:	fa93 f3a3 	rbit	r3, r3
 8006e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7e:	fab3 f383 	clz	r3, r3
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d102      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x128>
 8006e92:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	e00f      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x148>
 8006e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ea0:	fa93 f3a3 	rbit	r3, r3
 8006ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eae:	fa93 f3a3 	rbit	r3, r3
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb4:	4b46      	ldr	r3, [pc, #280]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ebc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ec0:	fa92 f2a2 	rbit	r2, r2
 8006ec4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ec8:	fab2 f282 	clz	r2, r2
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	f042 0220 	orr.w	r2, r2, #32
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	f002 021f 	and.w	r2, r2, #31
 8006ed8:	2101      	movs	r1, #1
 8006eda:	fa01 f202 	lsl.w	r2, r1, r2
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d13a      	bne.n	8006f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0b2      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	fa93 f3a3 	rbit	r3, r3
 8006ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef6:	fab3 f383 	clz	r3, r3
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d102      	bne.n	8006f10 <HAL_RCC_ClockConfig+0x1a0>
 8006f0a:	4b31      	ldr	r3, [pc, #196]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	e00d      	b.n	8006f2c <HAL_RCC_ClockConfig+0x1bc>
 8006f10:	2302      	movs	r3, #2
 8006f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	fa93 f3a3 	rbit	r3, r3
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	623b      	str	r3, [r7, #32]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	fa93 f3a3 	rbit	r3, r3
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	4b29      	ldr	r3, [pc, #164]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	61ba      	str	r2, [r7, #24]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	fa92 f2a2 	rbit	r2, r2
 8006f36:	617a      	str	r2, [r7, #20]
  return result;
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	fab2 f282 	clz	r2, r2
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	f042 0220 	orr.w	r2, r2, #32
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	f002 021f 	and.w	r2, r2, #31
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e079      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f023 0203 	bic.w	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	491a      	ldr	r1, [pc, #104]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f6c:	f7fb ff9a 	bl	8002ea4 <HAL_GetTick>
 8006f70:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f72:	e00a      	b.n	8006f8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f74:	f7fb ff96 	bl	8002ea4 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e061      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8a:	4b11      	ldr	r3, [pc, #68]	@ (8006fd0 <HAL_RCC_ClockConfig+0x260>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f003 020c 	and.w	r2, r3, #12
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d1eb      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d214      	bcs.n	8006fd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 0207 	bic.w	r2, r3, #7
 8006fb2:	4906      	ldr	r1, [pc, #24]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b04      	ldr	r3, [pc, #16]	@ (8006fcc <HAL_RCC_ClockConfig+0x25c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e040      	b.n	800704e <HAL_RCC_ClockConfig+0x2de>
 8006fcc:	40022000 	.word	0x40022000
 8006fd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8007058 <HAL_RCC_ClockConfig+0x2e8>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	491a      	ldr	r1, [pc, #104]	@ (8007058 <HAL_RCC_ClockConfig+0x2e8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ffe:	4b16      	ldr	r3, [pc, #88]	@ (8007058 <HAL_RCC_ClockConfig+0x2e8>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4912      	ldr	r1, [pc, #72]	@ (8007058 <HAL_RCC_ClockConfig+0x2e8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007012:	f000 f829 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8007016:	4601      	mov	r1, r0
 8007018:	4b0f      	ldr	r3, [pc, #60]	@ (8007058 <HAL_RCC_ClockConfig+0x2e8>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007020:	22f0      	movs	r2, #240	@ 0xf0
 8007022:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	fa92 f2a2 	rbit	r2, r2
 800702a:	60fa      	str	r2, [r7, #12]
  return result;
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	fab2 f282 	clz	r2, r2
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	40d3      	lsrs	r3, r2
 8007036:	4a09      	ldr	r2, [pc, #36]	@ (800705c <HAL_RCC_ClockConfig+0x2ec>)
 8007038:	5cd3      	ldrb	r3, [r2, r3]
 800703a:	fa21 f303 	lsr.w	r3, r1, r3
 800703e:	4a08      	ldr	r2, [pc, #32]	@ (8007060 <HAL_RCC_ClockConfig+0x2f0>)
 8007040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007042:	4b08      	ldr	r3, [pc, #32]	@ (8007064 <HAL_RCC_ClockConfig+0x2f4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f7fb fee8 	bl	8002e1c <HAL_InitTick>
  
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3778      	adds	r7, #120	@ 0x78
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40021000 	.word	0x40021000
 800705c:	0800d188 	.word	0x0800d188
 8007060:	20000004 	.word	0x20000004
 8007064:	20000008 	.word	0x20000008

08007068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	2300      	movs	r3, #0
 800707c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007082:	4b1e      	ldr	r3, [pc, #120]	@ (80070fc <HAL_RCC_GetSysClockFreq+0x94>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b04      	cmp	r3, #4
 8007090:	d002      	beq.n	8007098 <HAL_RCC_GetSysClockFreq+0x30>
 8007092:	2b08      	cmp	r3, #8
 8007094:	d003      	beq.n	800709e <HAL_RCC_GetSysClockFreq+0x36>
 8007096:	e026      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007098:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x98>)
 800709a:	613b      	str	r3, [r7, #16]
      break;
 800709c:	e026      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	0c9b      	lsrs	r3, r3, #18
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	4a17      	ldr	r2, [pc, #92]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x9c>)
 80070a8:	5cd3      	ldrb	r3, [r2, r3]
 80070aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80070ac:	4b13      	ldr	r3, [pc, #76]	@ (80070fc <HAL_RCC_GetSysClockFreq+0x94>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	4a14      	ldr	r2, [pc, #80]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xa0>)
 80070b6:	5cd3      	ldrb	r3, [r2, r3]
 80070b8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x98>)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e004      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a0c      	ldr	r2, [pc, #48]	@ (800710c <HAL_RCC_GetSysClockFreq+0xa4>)
 80070da:	fb02 f303 	mul.w	r3, r2, r3
 80070de:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	613b      	str	r3, [r7, #16]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007110 <HAL_RCC_GetSysClockFreq+0xa8>)
 80070e8:	613b      	str	r3, [r7, #16]
      break;
 80070ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070ec:	693b      	ldr	r3, [r7, #16]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40021000 	.word	0x40021000
 8007100:	00f42400 	.word	0x00f42400
 8007104:	0800d1a0 	.word	0x0800d1a0
 8007108:	0800d1b0 	.word	0x0800d1b0
 800710c:	003d0900 	.word	0x003d0900
 8007110:	007a1200 	.word	0x007a1200

08007114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007118:	4b03      	ldr	r3, [pc, #12]	@ (8007128 <HAL_RCC_GetHCLKFreq+0x14>)
 800711a:	681b      	ldr	r3, [r3, #0]
}
 800711c:	4618      	mov	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000004 	.word	0x20000004

0800712c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007132:	f7ff ffef 	bl	8007114 <HAL_RCC_GetHCLKFreq>
 8007136:	4601      	mov	r1, r0
 8007138:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007140:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007144:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	fa92 f2a2 	rbit	r2, r2
 800714c:	603a      	str	r2, [r7, #0]
  return result;
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	fab2 f282 	clz	r2, r2
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	40d3      	lsrs	r3, r2
 8007158:	4a04      	ldr	r2, [pc, #16]	@ (800716c <HAL_RCC_GetPCLK1Freq+0x40>)
 800715a:	5cd3      	ldrb	r3, [r2, r3]
 800715c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40021000 	.word	0x40021000
 800716c:	0800d198 	.word	0x0800d198

08007170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007176:	f7ff ffcd 	bl	8007114 <HAL_RCC_GetHCLKFreq>
 800717a:	4601      	mov	r1, r0
 800717c:	4b0b      	ldr	r3, [pc, #44]	@ (80071ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007184:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007188:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	fa92 f2a2 	rbit	r2, r2
 8007190:	603a      	str	r2, [r7, #0]
  return result;
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	fab2 f282 	clz	r2, r2
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	40d3      	lsrs	r3, r2
 800719c:	4a04      	ldr	r2, [pc, #16]	@ (80071b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800719e:	5cd3      	ldrb	r3, [r2, r3]
 80071a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800d198 	.word	0x0800d198

080071b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b092      	sub	sp, #72	@ 0x48
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 80d4 	beq.w	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10e      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4a4a      	ldr	r2, [pc, #296]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ee:	61d3      	str	r3, [r2, #28]
 80071f0:	4b48      	ldr	r3, [pc, #288]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007202:	4b45      	ldr	r3, [pc, #276]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720a:	2b00      	cmp	r3, #0
 800720c:	d118      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800720e:	4b42      	ldr	r3, [pc, #264]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a41      	ldr	r2, [pc, #260]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007218:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800721a:	f7fb fe43 	bl	8002ea4 <HAL_GetTick>
 800721e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007220:	e008      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007222:	f7fb fe3f 	bl	8002ea4 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b64      	cmp	r3, #100	@ 0x64
 800722e:	d901      	bls.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e169      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007234:	4b38      	ldr	r3, [pc, #224]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007240:	4b34      	ldr	r3, [pc, #208]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800724a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8084 	beq.w	800735a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800725a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800725c:	429a      	cmp	r2, r3
 800725e:	d07c      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007260:	4b2c      	ldr	r3, [pc, #176]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800726a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800726e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	fa93 f3a3 	rbit	r3, r3
 8007276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	4b26      	ldr	r3, [pc, #152]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	461a      	mov	r2, r3
 800728a:	2301      	movs	r3, #1
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007292:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	fa93 f3a3 	rbit	r3, r3
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800729e:	fab3 f383 	clz	r3, r3
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b1d      	ldr	r3, [pc, #116]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	461a      	mov	r2, r3
 80072ae:	2300      	movs	r3, #0
 80072b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072b2:	4a18      	ldr	r2, [pc, #96]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d04b      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c2:	f7fb fdef 	bl	8002ea4 <HAL_GetTick>
 80072c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c8:	e00a      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ca:	f7fb fdeb 	bl	8002ea4 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d8:	4293      	cmp	r3, r2
 80072da:	d901      	bls.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e113      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80072e0:	2302      	movs	r3, #2
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	fa93 f3a3 	rbit	r3, r3
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ec:	2302      	movs	r3, #2
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	fa93 f3a3 	rbit	r3, r3
 80072f6:	61fb      	str	r3, [r7, #28]
  return result;
 80072f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fa:	fab3 f383 	clz	r3, r3
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d108      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800730e:	4b01      	ldr	r3, [pc, #4]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	e00d      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007314:	40021000 	.word	0x40021000
 8007318:	40007000 	.word	0x40007000
 800731c:	10908100 	.word	0x10908100
 8007320:	2302      	movs	r3, #2
 8007322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	fa93 f3a3 	rbit	r3, r3
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	4b78      	ldr	r3, [pc, #480]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	2202      	movs	r2, #2
 8007332:	613a      	str	r2, [r7, #16]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	fa92 f2a2 	rbit	r2, r2
 800733a:	60fa      	str	r2, [r7, #12]
  return result;
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	fab2 f282 	clz	r2, r2
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	f002 021f 	and.w	r2, r2, #31
 800734e:	2101      	movs	r1, #1
 8007350:	fa01 f202 	lsl.w	r2, r1, r2
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0b7      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800735a:	4b6d      	ldr	r3, [pc, #436]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	496a      	ldr	r1, [pc, #424]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007368:	4313      	orrs	r3, r2
 800736a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800736c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007370:	2b01      	cmp	r3, #1
 8007372:	d105      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007374:	4b66      	ldr	r3, [pc, #408]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	4a65      	ldr	r2, [pc, #404]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800737a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800737e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800738c:	4b60      	ldr	r3, [pc, #384]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007390:	f023 0203 	bic.w	r2, r3, #3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	495d      	ldr	r1, [pc, #372]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800739a:	4313      	orrs	r3, r2
 800739c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073aa:	4b59      	ldr	r3, [pc, #356]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	4956      	ldr	r1, [pc, #344]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073c8:	4b51      	ldr	r3, [pc, #324]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	494e      	ldr	r1, [pc, #312]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d008      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ea:	f023 0210 	bic.w	r2, r3, #16
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	4947      	ldr	r1, [pc, #284]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007404:	4b42      	ldr	r3, [pc, #264]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007410:	493f      	ldr	r1, [pc, #252]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007422:	4b3b      	ldr	r3, [pc, #236]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	f023 0220 	bic.w	r2, r3, #32
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	4938      	ldr	r1, [pc, #224]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007430:	4313      	orrs	r3, r2
 8007432:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007440:	4b33      	ldr	r3, [pc, #204]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007444:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	4930      	ldr	r1, [pc, #192]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800744e:	4313      	orrs	r3, r2
 8007450:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0310 	and.w	r3, r3, #16
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800745e:	4b2c      	ldr	r3, [pc, #176]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007462:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	4929      	ldr	r1, [pc, #164]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800746c:	4313      	orrs	r3, r2
 800746e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800747c:	4b24      	ldr	r3, [pc, #144]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	4921      	ldr	r1, [pc, #132]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800748a:	4313      	orrs	r3, r2
 800748c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800749a:	4b1d      	ldr	r3, [pc, #116]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	491a      	ldr	r1, [pc, #104]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80074b8:	4b15      	ldr	r3, [pc, #84]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	4912      	ldr	r1, [pc, #72]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e2:	490b      	ldr	r1, [pc, #44]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80074f4:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007500:	4903      	ldr	r1, [pc, #12]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3748      	adds	r7, #72	@ 0x48
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40021000 	.word	0x40021000

08007514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e049      	b.n	80075ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fb f912 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f000 fd08 	bl	8007f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e049      	b.n	8007668 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d106      	bne.n	80075ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f841 	bl	8007670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f000 fcb1 	bl	8007f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_TIM_PWM_Start+0x24>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	e03c      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d109      	bne.n	80076c2 <HAL_TIM_PWM_Start+0x3e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	e02f      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d109      	bne.n	80076dc <HAL_TIM_PWM_Start+0x58>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e022      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b0c      	cmp	r3, #12
 80076e0:	d109      	bne.n	80076f6 <HAL_TIM_PWM_Start+0x72>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	bf14      	ite	ne
 80076ee:	2301      	movne	r3, #1
 80076f0:	2300      	moveq	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e015      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b10      	cmp	r3, #16
 80076fa:	d109      	bne.n	8007710 <HAL_TIM_PWM_Start+0x8c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	e008      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	bf14      	ite	ne
 800771c:	2301      	movne	r3, #1
 800771e:	2300      	moveq	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e097      	b.n	800785a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xb6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007738:	e023      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b04      	cmp	r3, #4
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start+0xc6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007748:	e01b      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b08      	cmp	r3, #8
 800774e:	d104      	bne.n	800775a <HAL_TIM_PWM_Start+0xd6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007758:	e013      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b0c      	cmp	r3, #12
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Start+0xe6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007768:	e00b      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b10      	cmp	r3, #16
 800776e:	d104      	bne.n	800777a <HAL_TIM_PWM_Start+0xf6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007778:	e003      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f001 f916 	bl	80089bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a33      	ldr	r2, [pc, #204]	@ (8007864 <HAL_TIM_PWM_Start+0x1e0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a32      	ldr	r2, [pc, #200]	@ (8007868 <HAL_TIM_PWM_Start+0x1e4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00e      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a30      	ldr	r2, [pc, #192]	@ (800786c <HAL_TIM_PWM_Start+0x1e8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007870 <HAL_TIM_PWM_Start+0x1ec>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d004      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007874 <HAL_TIM_PWM_Start+0x1f0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_PWM_Start+0x142>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <HAL_TIM_PWM_Start+0x144>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a20      	ldr	r2, [pc, #128]	@ (8007864 <HAL_TIM_PWM_Start+0x1e0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_TIM_PWM_Start+0x194>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ee:	d013      	beq.n	8007818 <HAL_TIM_PWM_Start+0x194>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a20      	ldr	r2, [pc, #128]	@ (8007878 <HAL_TIM_PWM_Start+0x1f4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_TIM_PWM_Start+0x194>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1f      	ldr	r2, [pc, #124]	@ (800787c <HAL_TIM_PWM_Start+0x1f8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_TIM_PWM_Start+0x194>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a17      	ldr	r2, [pc, #92]	@ (8007868 <HAL_TIM_PWM_Start+0x1e4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIM_PWM_Start+0x194>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a16      	ldr	r2, [pc, #88]	@ (800786c <HAL_TIM_PWM_Start+0x1e8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d115      	bne.n	8007844 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	4b18      	ldr	r3, [pc, #96]	@ (8007880 <HAL_TIM_PWM_Start+0x1fc>)
 8007820:	4013      	ands	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b06      	cmp	r3, #6
 8007828:	d015      	beq.n	8007856 <HAL_TIM_PWM_Start+0x1d2>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007830:	d011      	beq.n	8007856 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007842:	e008      	b.n	8007856 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e000      	b.n	8007858 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40012c00 	.word	0x40012c00
 8007868:	40013400 	.word	0x40013400
 800786c:	40014000 	.word	0x40014000
 8007870:	40014400 	.word	0x40014400
 8007874:	40014800 	.word	0x40014800
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	00010007 	.word	0x00010007

08007884 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2200      	movs	r2, #0
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f890 	bl	80089bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a3e      	ldr	r2, [pc, #248]	@ (800799c <HAL_TIM_PWM_Stop+0x118>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIM_PWM_Stop+0x4a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a3d      	ldr	r2, [pc, #244]	@ (80079a0 <HAL_TIM_PWM_Stop+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIM_PWM_Stop+0x4a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a3b      	ldr	r2, [pc, #236]	@ (80079a4 <HAL_TIM_PWM_Stop+0x120>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIM_PWM_Stop+0x4a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a3a      	ldr	r2, [pc, #232]	@ (80079a8 <HAL_TIM_PWM_Stop+0x124>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIM_PWM_Stop+0x4a>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a38      	ldr	r2, [pc, #224]	@ (80079ac <HAL_TIM_PWM_Stop+0x128>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d101      	bne.n	80078d2 <HAL_TIM_PWM_Stop+0x4e>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <HAL_TIM_PWM_Stop+0x50>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d017      	beq.n	8007908 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a1a      	ldr	r2, [r3, #32]
 80078de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10f      	bne.n	8007908 <HAL_TIM_PWM_Stop+0x84>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a1a      	ldr	r2, [r3, #32]
 80078ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d107      	bne.n	8007908 <HAL_TIM_PWM_Stop+0x84>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007906:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10f      	bne.n	8007938 <HAL_TIM_PWM_Stop+0xb4>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007922:	4013      	ands	r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d107      	bne.n	8007938 <HAL_TIM_PWM_Stop+0xb4>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0201 	bic.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <HAL_TIM_PWM_Stop+0xc4>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007946:	e023      	b.n	8007990 <HAL_TIM_PWM_Stop+0x10c>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b04      	cmp	r3, #4
 800794c:	d104      	bne.n	8007958 <HAL_TIM_PWM_Stop+0xd4>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007956:	e01b      	b.n	8007990 <HAL_TIM_PWM_Stop+0x10c>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b08      	cmp	r3, #8
 800795c:	d104      	bne.n	8007968 <HAL_TIM_PWM_Stop+0xe4>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007966:	e013      	b.n	8007990 <HAL_TIM_PWM_Stop+0x10c>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b0c      	cmp	r3, #12
 800796c:	d104      	bne.n	8007978 <HAL_TIM_PWM_Stop+0xf4>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007976:	e00b      	b.n	8007990 <HAL_TIM_PWM_Stop+0x10c>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b10      	cmp	r3, #16
 800797c:	d104      	bne.n	8007988 <HAL_TIM_PWM_Stop+0x104>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007986:	e003      	b.n	8007990 <HAL_TIM_PWM_Stop+0x10c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40012c00 	.word	0x40012c00
 80079a0:	40013400 	.word	0x40013400
 80079a4:	40014000 	.word	0x40014000
 80079a8:	40014400 	.word	0x40014400
 80079ac:	40014800 	.word	0x40014800

080079b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e049      	b.n	8007a56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f841 	bl	8007a5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 faba 	bl	8007f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e088      	b.n	8007ba2 <HAL_TIM_IC_ConfigChannel+0x130>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d11b      	bne.n	8007ad6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007aae:	f000 fdcd 	bl	800864c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 020c 	bic.w	r2, r2, #12
 8007ac0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6999      	ldr	r1, [r3, #24]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	619a      	str	r2, [r3, #24]
 8007ad4:	e060      	b.n	8007b98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d11c      	bne.n	8007b16 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007aec:	f000 fe45 	bl	800877a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007afe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6999      	ldr	r1, [r3, #24]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	021a      	lsls	r2, r3, #8
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	619a      	str	r2, [r3, #24]
 8007b14:	e040      	b.n	8007b98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d11b      	bne.n	8007b54 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007b2c:	f000 fe92 	bl	8008854 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69da      	ldr	r2, [r3, #28]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 020c 	bic.w	r2, r2, #12
 8007b3e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69d9      	ldr	r1, [r3, #28]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	61da      	str	r2, [r3, #28]
 8007b52:	e021      	b.n	8007b98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b0c      	cmp	r3, #12
 8007b58:	d11c      	bne.n	8007b94 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007b6a:	f000 feaf 	bl	80088cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69da      	ldr	r2, [r3, #28]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007b7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69d9      	ldr	r1, [r3, #28]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	021a      	lsls	r2, r3, #8
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	61da      	str	r2, [r3, #28]
 8007b92:	e001      	b.n	8007b98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e0ff      	b.n	8007dca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b14      	cmp	r3, #20
 8007bd6:	f200 80f0 	bhi.w	8007dba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c35 	.word	0x08007c35
 8007be4:	08007dbb 	.word	0x08007dbb
 8007be8:	08007dbb 	.word	0x08007dbb
 8007bec:	08007dbb 	.word	0x08007dbb
 8007bf0:	08007c75 	.word	0x08007c75
 8007bf4:	08007dbb 	.word	0x08007dbb
 8007bf8:	08007dbb 	.word	0x08007dbb
 8007bfc:	08007dbb 	.word	0x08007dbb
 8007c00:	08007cb7 	.word	0x08007cb7
 8007c04:	08007dbb 	.word	0x08007dbb
 8007c08:	08007dbb 	.word	0x08007dbb
 8007c0c:	08007dbb 	.word	0x08007dbb
 8007c10:	08007cf7 	.word	0x08007cf7
 8007c14:	08007dbb 	.word	0x08007dbb
 8007c18:	08007dbb 	.word	0x08007dbb
 8007c1c:	08007dbb 	.word	0x08007dbb
 8007c20:	08007d39 	.word	0x08007d39
 8007c24:	08007dbb 	.word	0x08007dbb
 8007c28:	08007dbb 	.word	0x08007dbb
 8007c2c:	08007dbb 	.word	0x08007dbb
 8007c30:	08007d79 	.word	0x08007d79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fa30 	bl	80080a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0208 	orr.w	r2, r2, #8
 8007c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0204 	bic.w	r2, r2, #4
 8007c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6999      	ldr	r1, [r3, #24]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	619a      	str	r2, [r3, #24]
      break;
 8007c72:	e0a5      	b.n	8007dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 faa0 	bl	80081c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6999      	ldr	r1, [r3, #24]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	021a      	lsls	r2, r3, #8
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	619a      	str	r2, [r3, #24]
      break;
 8007cb4:	e084      	b.n	8007dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fb09 	bl	80082d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69da      	ldr	r2, [r3, #28]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0208 	orr.w	r2, r2, #8
 8007cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0204 	bic.w	r2, r2, #4
 8007ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69d9      	ldr	r1, [r3, #28]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	61da      	str	r2, [r3, #28]
      break;
 8007cf4:	e064      	b.n	8007dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fb71 	bl	80083e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69d9      	ldr	r1, [r3, #28]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	021a      	lsls	r2, r3, #8
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	61da      	str	r2, [r3, #28]
      break;
 8007d36:	e043      	b.n	8007dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fbba 	bl	80084b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0208 	orr.w	r2, r2, #8
 8007d52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0204 	bic.w	r2, r2, #4
 8007d62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	691a      	ldr	r2, [r3, #16]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d76:	e023      	b.n	8007dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fbfe 	bl	8008580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007da2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	021a      	lsls	r2, r3, #8
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007db8:	e002      	b.n	8007dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop

08007dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_ConfigClockSource+0x1c>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e0b6      	b.n	8007f5e <HAL_TIM_ConfigClockSource+0x18a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2c:	d03e      	beq.n	8007eac <HAL_TIM_ConfigClockSource+0xd8>
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e32:	f200 8087 	bhi.w	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3a:	f000 8086 	beq.w	8007f4a <HAL_TIM_ConfigClockSource+0x176>
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e42:	d87f      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e44:	2b70      	cmp	r3, #112	@ 0x70
 8007e46:	d01a      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0xaa>
 8007e48:	2b70      	cmp	r3, #112	@ 0x70
 8007e4a:	d87b      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e4c:	2b60      	cmp	r3, #96	@ 0x60
 8007e4e:	d050      	beq.n	8007ef2 <HAL_TIM_ConfigClockSource+0x11e>
 8007e50:	2b60      	cmp	r3, #96	@ 0x60
 8007e52:	d877      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e54:	2b50      	cmp	r3, #80	@ 0x50
 8007e56:	d03c      	beq.n	8007ed2 <HAL_TIM_ConfigClockSource+0xfe>
 8007e58:	2b50      	cmp	r3, #80	@ 0x50
 8007e5a:	d873      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e5c:	2b40      	cmp	r3, #64	@ 0x40
 8007e5e:	d058      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0x13e>
 8007e60:	2b40      	cmp	r3, #64	@ 0x40
 8007e62:	d86f      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e64:	2b30      	cmp	r3, #48	@ 0x30
 8007e66:	d064      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15e>
 8007e68:	2b30      	cmp	r3, #48	@ 0x30
 8007e6a:	d86b      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d060      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15e>
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d867      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d05c      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15e>
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d05a      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15e>
 8007e7c:	e062      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e8e:	f000 fd75 	bl	800897c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	609a      	str	r2, [r3, #8]
      break;
 8007eaa:	e04f      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ebc:	f000 fd5e 	bl	800897c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ece:	609a      	str	r2, [r3, #8]
      break;
 8007ed0:	e03c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f000 fc1c 	bl	800871c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2150      	movs	r1, #80	@ 0x50
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fd2b 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8007ef0:	e02c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007efe:	461a      	mov	r2, r3
 8007f00:	f000 fc78 	bl	80087f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2160      	movs	r1, #96	@ 0x60
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fd1b 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8007f10:	e01c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f000 fbfc 	bl	800871c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2140      	movs	r1, #64	@ 0x40
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fd0b 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8007f30:	e00c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f000 fd02 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8007f42:	e003      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
      break;
 8007f48:	e000      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a42      	ldr	r2, [pc, #264]	@ (8008084 <TIM_Base_SetConfig+0x11c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00f      	beq.n	8007fa0 <TIM_Base_SetConfig+0x38>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f86:	d00b      	beq.n	8007fa0 <TIM_Base_SetConfig+0x38>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008088 <TIM_Base_SetConfig+0x120>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d007      	beq.n	8007fa0 <TIM_Base_SetConfig+0x38>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3e      	ldr	r2, [pc, #248]	@ (800808c <TIM_Base_SetConfig+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d003      	beq.n	8007fa0 <TIM_Base_SetConfig+0x38>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8008090 <TIM_Base_SetConfig+0x128>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d108      	bne.n	8007fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a33      	ldr	r2, [pc, #204]	@ (8008084 <TIM_Base_SetConfig+0x11c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01b      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc0:	d017      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	@ (8008088 <TIM_Base_SetConfig+0x120>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800808c <TIM_Base_SetConfig+0x124>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00f      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8008090 <TIM_Base_SetConfig+0x128>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00b      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8008094 <TIM_Base_SetConfig+0x12c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8008098 <TIM_Base_SetConfig+0x130>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_Base_SetConfig+0x8a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2b      	ldr	r2, [pc, #172]	@ (800809c <TIM_Base_SetConfig+0x134>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d108      	bne.n	8008004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a16      	ldr	r2, [pc, #88]	@ (8008084 <TIM_Base_SetConfig+0x11c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00f      	beq.n	8008050 <TIM_Base_SetConfig+0xe8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a17      	ldr	r2, [pc, #92]	@ (8008090 <TIM_Base_SetConfig+0x128>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00b      	beq.n	8008050 <TIM_Base_SetConfig+0xe8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a16      	ldr	r2, [pc, #88]	@ (8008094 <TIM_Base_SetConfig+0x12c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_Base_SetConfig+0xe8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a15      	ldr	r2, [pc, #84]	@ (8008098 <TIM_Base_SetConfig+0x130>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0xe8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a14      	ldr	r2, [pc, #80]	@ (800809c <TIM_Base_SetConfig+0x134>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d103      	bne.n	8008058 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d105      	bne.n	8008076 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f023 0201 	bic.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	611a      	str	r2, [r3, #16]
  }
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40012c00 	.word	0x40012c00
 8008088:	40000400 	.word	0x40000400
 800808c:	40000800 	.word	0x40000800
 8008090:	40013400 	.word	0x40013400
 8008094:	40014000 	.word	0x40014000
 8008098:	40014400 	.word	0x40014400
 800809c:	40014800 	.word	0x40014800

080080a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	f023 0201 	bic.w	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f023 0302 	bic.w	r3, r3, #2
 80080ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a2c      	ldr	r2, [pc, #176]	@ (80081ac <TIM_OC1_SetConfig+0x10c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00f      	beq.n	8008120 <TIM_OC1_SetConfig+0x80>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a2b      	ldr	r2, [pc, #172]	@ (80081b0 <TIM_OC1_SetConfig+0x110>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00b      	beq.n	8008120 <TIM_OC1_SetConfig+0x80>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a2a      	ldr	r2, [pc, #168]	@ (80081b4 <TIM_OC1_SetConfig+0x114>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d007      	beq.n	8008120 <TIM_OC1_SetConfig+0x80>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a29      	ldr	r2, [pc, #164]	@ (80081b8 <TIM_OC1_SetConfig+0x118>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_OC1_SetConfig+0x80>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a28      	ldr	r2, [pc, #160]	@ (80081bc <TIM_OC1_SetConfig+0x11c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10c      	bne.n	800813a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0308 	bic.w	r3, r3, #8
 8008126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f023 0304 	bic.w	r3, r3, #4
 8008138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a1b      	ldr	r2, [pc, #108]	@ (80081ac <TIM_OC1_SetConfig+0x10c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <TIM_OC1_SetConfig+0xc2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a1a      	ldr	r2, [pc, #104]	@ (80081b0 <TIM_OC1_SetConfig+0x110>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00b      	beq.n	8008162 <TIM_OC1_SetConfig+0xc2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a19      	ldr	r2, [pc, #100]	@ (80081b4 <TIM_OC1_SetConfig+0x114>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d007      	beq.n	8008162 <TIM_OC1_SetConfig+0xc2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a18      	ldr	r2, [pc, #96]	@ (80081b8 <TIM_OC1_SetConfig+0x118>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <TIM_OC1_SetConfig+0xc2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a17      	ldr	r2, [pc, #92]	@ (80081bc <TIM_OC1_SetConfig+0x11c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d111      	bne.n	8008186 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800

080081c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f023 0210 	bic.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f023 0320 	bic.w	r3, r3, #32
 800820e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a28      	ldr	r2, [pc, #160]	@ (80082c0 <TIM_OC2_SetConfig+0x100>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_OC2_SetConfig+0x6c>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a27      	ldr	r2, [pc, #156]	@ (80082c4 <TIM_OC2_SetConfig+0x104>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d10d      	bne.n	8008248 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <TIM_OC2_SetConfig+0x100>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00f      	beq.n	8008270 <TIM_OC2_SetConfig+0xb0>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a1c      	ldr	r2, [pc, #112]	@ (80082c4 <TIM_OC2_SetConfig+0x104>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00b      	beq.n	8008270 <TIM_OC2_SetConfig+0xb0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1b      	ldr	r2, [pc, #108]	@ (80082c8 <TIM_OC2_SetConfig+0x108>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d007      	beq.n	8008270 <TIM_OC2_SetConfig+0xb0>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a1a      	ldr	r2, [pc, #104]	@ (80082cc <TIM_OC2_SetConfig+0x10c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d003      	beq.n	8008270 <TIM_OC2_SetConfig+0xb0>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a19      	ldr	r2, [pc, #100]	@ (80082d0 <TIM_OC2_SetConfig+0x110>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d113      	bne.n	8008298 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008276:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800827e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	621a      	str	r2, [r3, #32]
}
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40012c00 	.word	0x40012c00
 80082c4:	40013400 	.word	0x40013400
 80082c8:	40014000 	.word	0x40014000
 80082cc:	40014400 	.word	0x40014400
 80082d0:	40014800 	.word	0x40014800

080082d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	021b      	lsls	r3, r3, #8
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a27      	ldr	r2, [pc, #156]	@ (80083d0 <TIM_OC3_SetConfig+0xfc>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d003      	beq.n	800833e <TIM_OC3_SetConfig+0x6a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a26      	ldr	r2, [pc, #152]	@ (80083d4 <TIM_OC3_SetConfig+0x100>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d10d      	bne.n	800835a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008358:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a1c      	ldr	r2, [pc, #112]	@ (80083d0 <TIM_OC3_SetConfig+0xfc>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00f      	beq.n	8008382 <TIM_OC3_SetConfig+0xae>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a1b      	ldr	r2, [pc, #108]	@ (80083d4 <TIM_OC3_SetConfig+0x100>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00b      	beq.n	8008382 <TIM_OC3_SetConfig+0xae>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a1a      	ldr	r2, [pc, #104]	@ (80083d8 <TIM_OC3_SetConfig+0x104>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d007      	beq.n	8008382 <TIM_OC3_SetConfig+0xae>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a19      	ldr	r2, [pc, #100]	@ (80083dc <TIM_OC3_SetConfig+0x108>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d003      	beq.n	8008382 <TIM_OC3_SetConfig+0xae>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a18      	ldr	r2, [pc, #96]	@ (80083e0 <TIM_OC3_SetConfig+0x10c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d113      	bne.n	80083aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	621a      	str	r2, [r3, #32]
}
 80083c4:	bf00      	nop
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400
 80083d8:	40014000 	.word	0x40014000
 80083dc:	40014400 	.word	0x40014400
 80083e0:	40014800 	.word	0x40014800

080083e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800841e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	031b      	lsls	r3, r3, #12
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a18      	ldr	r2, [pc, #96]	@ (80084a4 <TIM_OC4_SetConfig+0xc0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00f      	beq.n	8008468 <TIM_OC4_SetConfig+0x84>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a17      	ldr	r2, [pc, #92]	@ (80084a8 <TIM_OC4_SetConfig+0xc4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00b      	beq.n	8008468 <TIM_OC4_SetConfig+0x84>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a16      	ldr	r2, [pc, #88]	@ (80084ac <TIM_OC4_SetConfig+0xc8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d007      	beq.n	8008468 <TIM_OC4_SetConfig+0x84>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a15      	ldr	r2, [pc, #84]	@ (80084b0 <TIM_OC4_SetConfig+0xcc>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <TIM_OC4_SetConfig+0x84>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a14      	ldr	r2, [pc, #80]	@ (80084b4 <TIM_OC4_SetConfig+0xd0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d109      	bne.n	800847c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800846e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	4313      	orrs	r3, r2
 800847a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40012c00 	.word	0x40012c00
 80084a8:	40013400 	.word	0x40013400
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40014400 	.word	0x40014400
 80084b4:	40014800 	.word	0x40014800

080084b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	041b      	lsls	r3, r3, #16
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a17      	ldr	r2, [pc, #92]	@ (800856c <TIM_OC5_SetConfig+0xb4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00f      	beq.n	8008532 <TIM_OC5_SetConfig+0x7a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a16      	ldr	r2, [pc, #88]	@ (8008570 <TIM_OC5_SetConfig+0xb8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00b      	beq.n	8008532 <TIM_OC5_SetConfig+0x7a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <TIM_OC5_SetConfig+0xbc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d007      	beq.n	8008532 <TIM_OC5_SetConfig+0x7a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a14      	ldr	r2, [pc, #80]	@ (8008578 <TIM_OC5_SetConfig+0xc0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d003      	beq.n	8008532 <TIM_OC5_SetConfig+0x7a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a13      	ldr	r2, [pc, #76]	@ (800857c <TIM_OC5_SetConfig+0xc4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d109      	bne.n	8008546 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	621a      	str	r2, [r3, #32]
}
 8008560:	bf00      	nop
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	40012c00 	.word	0x40012c00
 8008570:	40013400 	.word	0x40013400
 8008574:	40014000 	.word	0x40014000
 8008578:	40014400 	.word	0x40014400
 800857c:	40014800 	.word	0x40014800

08008580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	051b      	lsls	r3, r3, #20
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a18      	ldr	r2, [pc, #96]	@ (8008638 <TIM_OC6_SetConfig+0xb8>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00f      	beq.n	80085fc <TIM_OC6_SetConfig+0x7c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a17      	ldr	r2, [pc, #92]	@ (800863c <TIM_OC6_SetConfig+0xbc>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00b      	beq.n	80085fc <TIM_OC6_SetConfig+0x7c>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a16      	ldr	r2, [pc, #88]	@ (8008640 <TIM_OC6_SetConfig+0xc0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d007      	beq.n	80085fc <TIM_OC6_SetConfig+0x7c>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a15      	ldr	r2, [pc, #84]	@ (8008644 <TIM_OC6_SetConfig+0xc4>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d003      	beq.n	80085fc <TIM_OC6_SetConfig+0x7c>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a14      	ldr	r2, [pc, #80]	@ (8008648 <TIM_OC6_SetConfig+0xc8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d109      	bne.n	8008610 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	029b      	lsls	r3, r3, #10
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40012c00 	.word	0x40012c00
 800863c:	40013400 	.word	0x40013400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800

0800864c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	f023 0201 	bic.w	r2, r3, #1
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4a24      	ldr	r2, [pc, #144]	@ (8008708 <TIM_TI1_SetConfig+0xbc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <TIM_TI1_SetConfig+0x56>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008680:	d00f      	beq.n	80086a2 <TIM_TI1_SetConfig+0x56>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4a21      	ldr	r2, [pc, #132]	@ (800870c <TIM_TI1_SetConfig+0xc0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00b      	beq.n	80086a2 <TIM_TI1_SetConfig+0x56>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a20      	ldr	r2, [pc, #128]	@ (8008710 <TIM_TI1_SetConfig+0xc4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <TIM_TI1_SetConfig+0x56>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <TIM_TI1_SetConfig+0xc8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d003      	beq.n	80086a2 <TIM_TI1_SetConfig+0x56>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4a1e      	ldr	r2, [pc, #120]	@ (8008718 <TIM_TI1_SetConfig+0xcc>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d101      	bne.n	80086a6 <TIM_TI1_SetConfig+0x5a>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <TIM_TI1_SetConfig+0x5c>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f023 0303 	bic.w	r3, r3, #3
 80086b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	e003      	b.n	80086c6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f023 030a 	bic.w	r3, r3, #10
 80086e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f003 030a 	and.w	r3, r3, #10
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40012c00 	.word	0x40012c00
 800870c:	40000400 	.word	0x40000400
 8008710:	40000800 	.word	0x40000800
 8008714:	40013400 	.word	0x40013400
 8008718:	40014000 	.word	0x40014000

0800871c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	f023 0201 	bic.w	r2, r3, #1
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f023 030a 	bic.w	r3, r3, #10
 8008758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	621a      	str	r2, [r3, #32]
}
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800877a:	b480      	push	{r7}
 800877c:	b087      	sub	sp, #28
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f023 0210 	bic.w	r2, r3, #16
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	031b      	lsls	r3, r3, #12
 80087be:	b29b      	uxth	r3, r3
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	621a      	str	r2, [r3, #32]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	f023 0210 	bic.w	r2, r3, #16
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800881e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	031b      	lsls	r3, r3, #12
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008830:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	621a      	str	r2, [r3, #32]
}
 8008848:	bf00      	nop
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f023 0303 	bic.w	r3, r3, #3
 8008880:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008890:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	b2db      	uxtb	r3, r3
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80088a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	621a      	str	r2, [r3, #32]
}
 80088c0:	bf00      	nop
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	021b      	lsls	r3, r3, #8
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800890a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	031b      	lsls	r3, r3, #12
 8008910:	b29b      	uxth	r3, r3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800891e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	031b      	lsls	r3, r3, #12
 8008924:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	f043 0307 	orr.w	r3, r3, #7
 8008968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	609a      	str	r2, [r3, #8]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	021a      	lsls	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	431a      	orrs	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2201      	movs	r2, #1
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1a      	ldr	r2, [r3, #32]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1a      	ldr	r2, [r3, #32]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	fa01 f303 	lsl.w	r3, r1, r3
 80089f4:	431a      	orrs	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <HAL_TIMEx_PWMN_Start+0x24>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	bf14      	ite	ne
 8008a24:	2301      	movne	r3, #1
 8008a26:	2300      	moveq	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	e022      	b.n	8008a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d109      	bne.n	8008a46 <HAL_TIMEx_PWMN_Start+0x3e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	bf14      	ite	ne
 8008a3e:	2301      	movne	r3, #1
 8008a40:	2300      	moveq	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	e015      	b.n	8008a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d109      	bne.n	8008a60 <HAL_TIMEx_PWMN_Start+0x58>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	bf14      	ite	ne
 8008a58:	2301      	movne	r3, #1
 8008a5a:	2300      	moveq	r3, #0
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	e008      	b.n	8008a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e069      	b.n	8008b4e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIMEx_PWMN_Start+0x82>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a88:	e013      	b.n	8008ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d104      	bne.n	8008a9a <HAL_TIMEx_PWMN_Start+0x92>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a98:	e00b      	b.n	8008ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIMEx_PWMN_Start+0xa2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008aa8:	e003      	b.n	8008ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2204      	movs	r2, #4
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f9b4 	bl	8008e28 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ace:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a20      	ldr	r2, [pc, #128]	@ (8008b58 <HAL_TIMEx_PWMN_Start+0x150>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d018      	beq.n	8008b0c <HAL_TIMEx_PWMN_Start+0x104>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae2:	d013      	beq.n	8008b0c <HAL_TIMEx_PWMN_Start+0x104>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b5c <HAL_TIMEx_PWMN_Start+0x154>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <HAL_TIMEx_PWMN_Start+0x104>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a1b      	ldr	r2, [pc, #108]	@ (8008b60 <HAL_TIMEx_PWMN_Start+0x158>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d009      	beq.n	8008b0c <HAL_TIMEx_PWMN_Start+0x104>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a19      	ldr	r2, [pc, #100]	@ (8008b64 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <HAL_TIMEx_PWMN_Start+0x104>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a18      	ldr	r2, [pc, #96]	@ (8008b68 <HAL_TIMEx_PWMN_Start+0x160>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d115      	bne.n	8008b38 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	4b16      	ldr	r3, [pc, #88]	@ (8008b6c <HAL_TIMEx_PWMN_Start+0x164>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b06      	cmp	r3, #6
 8008b1c:	d015      	beq.n	8008b4a <HAL_TIMEx_PWMN_Start+0x142>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b24:	d011      	beq.n	8008b4a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f042 0201 	orr.w	r2, r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b36:	e008      	b.n	8008b4a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	e000      	b.n	8008b4c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40013400 	.word	0x40013400
 8008b68:	40014000 	.word	0x40014000
 8008b6c:	00010007 	.word	0x00010007

08008b70 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f950 	bl	8008e28 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10f      	bne.n	8008bb8 <HAL_TIMEx_PWMN_Stop+0x48>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6a1a      	ldr	r2, [r3, #32]
 8008b9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <HAL_TIMEx_PWMN_Stop+0x48>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10f      	bne.n	8008be8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6a1a      	ldr	r2, [r3, #32]
 8008bce:	f240 4344 	movw	r3, #1092	@ 0x444
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d107      	bne.n	8008be8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d104      	bne.n	8008bf8 <HAL_TIMEx_PWMN_Stop+0x88>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf6:	e013      	b.n	8008c20 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d104      	bne.n	8008c08 <HAL_TIMEx_PWMN_Stop+0x98>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c06:	e00b      	b.n	8008c20 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d104      	bne.n	8008c18 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c16:	e003      	b.n	8008c20 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d101      	bne.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c40:	2302      	movs	r3, #2
 8008c42:	e063      	b.n	8008d0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a2b      	ldr	r2, [pc, #172]	@ (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a2a      	ldr	r2, [pc, #168]	@ (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d108      	bne.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d018      	beq.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb6:	d013      	beq.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a18      	ldr	r2, [pc, #96]	@ (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d009      	beq.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a12      	ldr	r2, [pc, #72]	@ (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d004      	beq.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a13      	ldr	r2, [pc, #76]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d10c      	bne.n	8008cfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	40013400 	.word	0x40013400
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40014000 	.word	0x40014000

08008d2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e065      	b.n	8008e14 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	041b      	lsls	r3, r3, #16
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a16      	ldr	r2, [pc, #88]	@ (8008e20 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d004      	beq.n	8008dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a14      	ldr	r2, [pc, #80]	@ (8008e24 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d115      	bne.n	8008e02 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de0:	051b      	lsls	r3, r3, #20
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	40013400 	.word	0x40013400

08008e28 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a1a      	ldr	r2, [r3, #32]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e60:	431a      	orrs	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e040      	b.n	8008f06 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7f9 fd7b 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2224      	movs	r2, #36	@ 0x24
 8008e9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 0201 	bic.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fe19 	bl	8009af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fc42 	bl	8009748 <UART_SetConfig>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e01b      	b.n	8008f06 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008eec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0201 	orr.w	r2, r2, #1
 8008efc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fe98 	bl	8009c34 <UART_CheckIdleState>
 8008f04:	4603      	mov	r3, r0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	@ 0x28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d165      	bne.n	8008ff2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <HAL_UART_Transmit_DMA+0x22>
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e05e      	b.n	8008ff4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	88fa      	ldrh	r2, [r7, #6]
 8008f40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	88fa      	ldrh	r2, [r7, #6]
 8008f48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2221      	movs	r2, #33	@ 0x21
 8008f58:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d027      	beq.n	8008fb2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f66:	4a25      	ldr	r2, [pc, #148]	@ (8008ffc <HAL_UART_Transmit_DMA+0xec>)
 8008f68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f6e:	4a24      	ldr	r2, [pc, #144]	@ (8009000 <HAL_UART_Transmit_DMA+0xf0>)
 8008f70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f76:	4a23      	ldr	r2, [pc, #140]	@ (8009004 <HAL_UART_Transmit_DMA+0xf4>)
 8008f78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f7e:	2200      	movs	r2, #0
 8008f80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3328      	adds	r3, #40	@ 0x28
 8008f92:	461a      	mov	r2, r3
 8008f94:	88fb      	ldrh	r3, [r7, #6]
 8008f96:	f7fb fd0f 	bl	80049b8 <HAL_DMA_Start_IT>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2210      	movs	r2, #16
 8008fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e020      	b.n	8008ff4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2240      	movs	r2, #64	@ 0x40
 8008fb8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3308      	adds	r3, #8
 8008fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fda:	623a      	str	r2, [r7, #32]
 8008fdc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	69f9      	ldr	r1, [r7, #28]
 8008fe0:	6a3a      	ldr	r2, [r7, #32]
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e5      	bne.n	8008fba <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e000      	b.n	8008ff4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3728      	adds	r7, #40	@ 0x28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	0800a0b5 	.word	0x0800a0b5
 8009000:	0800a149 	.word	0x0800a149
 8009004:	0800a2c9 	.word	0x0800a2c9

08009008 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b090      	sub	sp, #64	@ 0x40
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009014:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009028:	2b80      	cmp	r3, #128	@ 0x80
 800902a:	d139      	bne.n	80090a0 <HAL_UART_DMAStop+0x98>
 800902c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902e:	2b21      	cmp	r3, #33	@ 0x21
 8009030:	d136      	bne.n	80090a0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	61fb      	str	r3, [r7, #28]
   return(result);
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009048:	637b      	str	r3, [r7, #52]	@ 0x34
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e5      	bne.n	8009032 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800906a:	2b00      	cmp	r3, #0
 800906c:	d015      	beq.n	800909a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009072:	4618      	mov	r0, r3
 8009074:	f7fb fcff 	bl	8004a76 <HAL_DMA_Abort>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009082:	4618      	mov	r0, r3
 8009084:	f7fb fe16 	bl	8004cb4 <HAL_DMA_GetError>
 8009088:	4603      	mov	r3, r0
 800908a:	2b20      	cmp	r3, #32
 800908c:	d105      	bne.n	800909a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2210      	movs	r2, #16
 8009092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e044      	b.n	8009124 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 ff80 	bl	8009fa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090aa:	2b40      	cmp	r3, #64	@ 0x40
 80090ac:	d139      	bne.n	8009122 <HAL_UART_DMAStop+0x11a>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	2b22      	cmp	r3, #34	@ 0x22
 80090b2:	d136      	bne.n	8009122 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d4:	61ba      	str	r2, [r7, #24]
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6979      	ldr	r1, [r7, #20]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	613b      	str	r3, [r7, #16]
   return(result);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e5      	bne.n	80090b4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d015      	beq.n	800911c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fb fcbe 	bl	8004a76 <HAL_DMA_Abort>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00d      	beq.n	800911c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009104:	4618      	mov	r0, r3
 8009106:	f7fb fdd5 	bl	8004cb4 <HAL_DMA_GetError>
 800910a:	4603      	mov	r3, r0
 800910c:	2b20      	cmp	r3, #32
 800910e:	d105      	bne.n	800911c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2210      	movs	r2, #16
 8009114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e003      	b.n	8009124 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 ff65 	bl	8009fec <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3740      	adds	r7, #64	@ 0x40
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b0ba      	sub	sp, #232	@ 0xe8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009152:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009156:	f640 030f 	movw	r3, #2063	@ 0x80f
 800915a:	4013      	ands	r3, r2
 800915c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009164:	2b00      	cmp	r3, #0
 8009166:	d115      	bne.n	8009194 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00f      	beq.n	8009194 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 82ab 	beq.w	80096e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
      }
      return;
 8009192:	e2a5      	b.n	80096e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8117 	beq.w	80093cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800919e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80091aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80091ae:	4b85      	ldr	r3, [pc, #532]	@ (80093c4 <HAL_UART_IRQHandler+0x298>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 810a 	beq.w	80093cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d011      	beq.n	80091e8 <HAL_UART_IRQHandler+0xbc>
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2201      	movs	r2, #1
 80091d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091de:	f043 0201 	orr.w	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d011      	beq.n	8009218 <HAL_UART_IRQHandler+0xec>
 80091f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2202      	movs	r2, #2
 8009206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800920e:	f043 0204 	orr.w	r2, r3, #4
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d011      	beq.n	8009248 <HAL_UART_IRQHandler+0x11c>
 8009224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2204      	movs	r2, #4
 8009236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800923e:	f043 0202 	orr.w	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d017      	beq.n	8009284 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d105      	bne.n	800926c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009264:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2208      	movs	r2, #8
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800927a:	f043 0208 	orr.w	r2, r3, #8
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800928c:	2b00      	cmp	r3, #0
 800928e:	d012      	beq.n	80092b6 <HAL_UART_IRQHandler+0x18a>
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009294:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00c      	beq.n	80092b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092ac:	f043 0220 	orr.w	r2, r3, #32
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8211 	beq.w	80096e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00d      	beq.n	80092ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d005      	beq.n	800930e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009306:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800930a:	2b00      	cmp	r3, #0
 800930c:	d04f      	beq.n	80093ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fe6c 	bl	8009fec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931e:	2b40      	cmp	r3, #64	@ 0x40
 8009320:	d141      	bne.n	80093a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800933c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800934e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800935a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1d9      	bne.n	8009322 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009372:	2b00      	cmp	r3, #0
 8009374:	d013      	beq.n	800939e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800937a:	4a13      	ldr	r2, [pc, #76]	@ (80093c8 <HAL_UART_IRQHandler+0x29c>)
 800937c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009382:	4618      	mov	r0, r3
 8009384:	f7fb fbb5 	bl	8004af2 <HAL_DMA_Abort_IT>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d017      	beq.n	80093be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800939c:	e00f      	b.n	80093be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f9c8 	bl	8009734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a4:	e00b      	b.n	80093be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9c4 	bl	8009734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ac:	e007      	b.n	80093be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9c0 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80093bc:	e192      	b.n	80096e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093be:	bf00      	nop
    return;
 80093c0:	e190      	b.n	80096e4 <HAL_UART_IRQHandler+0x5b8>
 80093c2:	bf00      	nop
 80093c4:	04000120 	.word	0x04000120
 80093c8:	0800a347 	.word	0x0800a347

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	f040 814b 	bne.w	800966c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093da:	f003 0310 	and.w	r3, r3, #16
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 8144 	beq.w	800966c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093e8:	f003 0310 	and.w	r3, r3, #16
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 813d 	beq.w	800966c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2210      	movs	r2, #16
 80093f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009404:	2b40      	cmp	r3, #64	@ 0x40
 8009406:	f040 80b5 	bne.w	8009574 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009416:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 8164 	beq.w	80096e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800942a:	429a      	cmp	r2, r3
 800942c:	f080 815c 	bcs.w	80096e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009436:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	2b20      	cmp	r3, #32
 8009442:	f000 8086 	beq.w	8009552 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800945a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800945e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009462:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009474:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009478:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800947c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1da      	bne.n	8009446 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3308      	adds	r3, #8
 8009496:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800949a:	e853 3f00 	ldrex	r3, [r3]
 800949e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80094b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80094b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e1      	bne.n	8009490 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e3      	bne.n	80094cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009522:	f023 0310 	bic.w	r3, r3, #16
 8009526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009536:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800953a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e4      	bne.n	8009512 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800954c:	4618      	mov	r0, r3
 800954e:	f7fb fa92 	bl	8004a76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009564:	b29b      	uxth	r3, r3
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	b29b      	uxth	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7f8 fde3 	bl	8002138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009572:	e0b9      	b.n	80096e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009580:	b29b      	uxth	r3, r3
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 80ab 	beq.w	80096ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80a6 	beq.w	80096ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80095c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e4      	bne.n	80095a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	623b      	str	r3, [r7, #32]
   return(result);
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80095fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e3      	bne.n	80095d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0310 	bic.w	r3, r3, #16
 8009636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	69b9      	ldr	r1, [r7, #24]
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	617b      	str	r3, [r7, #20]
   return(result);
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e4      	bne.n	8009622 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800965e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7f8 fd67 	bl	8002138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800966a:	e03f      	b.n	80096ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00e      	beq.n	8009696 <HAL_UART_IRQHandler+0x56a>
 8009678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800967c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d008      	beq.n	8009696 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800968c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fe99 	bl	800a3c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009694:	e02d      	b.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800969a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00e      	beq.n	80096c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d008      	beq.n	80096c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d01c      	beq.n	80096f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	4798      	blx	r3
    }
    return;
 80096be:	e017      	b.n	80096f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d012      	beq.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
 80096cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00c      	beq.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fe4a 	bl	800a372 <UART_EndTransmit_IT>
    return;
 80096de:	e008      	b.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80096e0:	bf00      	nop
 80096e2:	e006      	b.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80096e4:	bf00      	nop
 80096e6:	e004      	b.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80096e8:	bf00      	nop
 80096ea:	e002      	b.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80096f0:	bf00      	nop
  }

}
 80096f2:	37e8      	adds	r7, #232	@ 0xe8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	431a      	orrs	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	431a      	orrs	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009776:	f023 030c 	bic.w	r3, r3, #12
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6812      	ldr	r2, [r2, #0]
 800977e:	6979      	ldr	r1, [r7, #20]
 8009780:	430b      	orrs	r3, r1
 8009782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4aa7      	ldr	r2, [pc, #668]	@ (8009a60 <UART_SetConfig+0x318>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d120      	bne.n	800980a <UART_SetConfig+0xc2>
 80097c8:	4ba6      	ldr	r3, [pc, #664]	@ (8009a64 <UART_SetConfig+0x31c>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d817      	bhi.n	8009804 <UART_SetConfig+0xbc>
 80097d4:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <UART_SetConfig+0x94>)
 80097d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097da:	bf00      	nop
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	080097f9 	.word	0x080097f9
 80097e4:	080097ff 	.word	0x080097ff
 80097e8:	080097f3 	.word	0x080097f3
 80097ec:	2301      	movs	r3, #1
 80097ee:	77fb      	strb	r3, [r7, #31]
 80097f0:	e0b5      	b.n	800995e <UART_SetConfig+0x216>
 80097f2:	2302      	movs	r3, #2
 80097f4:	77fb      	strb	r3, [r7, #31]
 80097f6:	e0b2      	b.n	800995e <UART_SetConfig+0x216>
 80097f8:	2304      	movs	r3, #4
 80097fa:	77fb      	strb	r3, [r7, #31]
 80097fc:	e0af      	b.n	800995e <UART_SetConfig+0x216>
 80097fe:	2308      	movs	r3, #8
 8009800:	77fb      	strb	r3, [r7, #31]
 8009802:	e0ac      	b.n	800995e <UART_SetConfig+0x216>
 8009804:	2310      	movs	r3, #16
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e0a9      	b.n	800995e <UART_SetConfig+0x216>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a96      	ldr	r2, [pc, #600]	@ (8009a68 <UART_SetConfig+0x320>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d124      	bne.n	800985e <UART_SetConfig+0x116>
 8009814:	4b93      	ldr	r3, [pc, #588]	@ (8009a64 <UART_SetConfig+0x31c>)
 8009816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800981c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009820:	d011      	beq.n	8009846 <UART_SetConfig+0xfe>
 8009822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009826:	d817      	bhi.n	8009858 <UART_SetConfig+0x110>
 8009828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800982c:	d011      	beq.n	8009852 <UART_SetConfig+0x10a>
 800982e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009832:	d811      	bhi.n	8009858 <UART_SetConfig+0x110>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <UART_SetConfig+0xf8>
 8009838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800983c:	d006      	beq.n	800984c <UART_SetConfig+0x104>
 800983e:	e00b      	b.n	8009858 <UART_SetConfig+0x110>
 8009840:	2300      	movs	r3, #0
 8009842:	77fb      	strb	r3, [r7, #31]
 8009844:	e08b      	b.n	800995e <UART_SetConfig+0x216>
 8009846:	2302      	movs	r3, #2
 8009848:	77fb      	strb	r3, [r7, #31]
 800984a:	e088      	b.n	800995e <UART_SetConfig+0x216>
 800984c:	2304      	movs	r3, #4
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e085      	b.n	800995e <UART_SetConfig+0x216>
 8009852:	2308      	movs	r3, #8
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e082      	b.n	800995e <UART_SetConfig+0x216>
 8009858:	2310      	movs	r3, #16
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e07f      	b.n	800995e <UART_SetConfig+0x216>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a82      	ldr	r2, [pc, #520]	@ (8009a6c <UART_SetConfig+0x324>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d124      	bne.n	80098b2 <UART_SetConfig+0x16a>
 8009868:	4b7e      	ldr	r3, [pc, #504]	@ (8009a64 <UART_SetConfig+0x31c>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009870:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009874:	d011      	beq.n	800989a <UART_SetConfig+0x152>
 8009876:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800987a:	d817      	bhi.n	80098ac <UART_SetConfig+0x164>
 800987c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009880:	d011      	beq.n	80098a6 <UART_SetConfig+0x15e>
 8009882:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009886:	d811      	bhi.n	80098ac <UART_SetConfig+0x164>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <UART_SetConfig+0x14c>
 800988c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009890:	d006      	beq.n	80098a0 <UART_SetConfig+0x158>
 8009892:	e00b      	b.n	80098ac <UART_SetConfig+0x164>
 8009894:	2300      	movs	r3, #0
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	e061      	b.n	800995e <UART_SetConfig+0x216>
 800989a:	2302      	movs	r3, #2
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e05e      	b.n	800995e <UART_SetConfig+0x216>
 80098a0:	2304      	movs	r3, #4
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e05b      	b.n	800995e <UART_SetConfig+0x216>
 80098a6:	2308      	movs	r3, #8
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e058      	b.n	800995e <UART_SetConfig+0x216>
 80098ac:	2310      	movs	r3, #16
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e055      	b.n	800995e <UART_SetConfig+0x216>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a6e      	ldr	r2, [pc, #440]	@ (8009a70 <UART_SetConfig+0x328>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d124      	bne.n	8009906 <UART_SetConfig+0x1be>
 80098bc:	4b69      	ldr	r3, [pc, #420]	@ (8009a64 <UART_SetConfig+0x31c>)
 80098be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80098c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098c8:	d011      	beq.n	80098ee <UART_SetConfig+0x1a6>
 80098ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098ce:	d817      	bhi.n	8009900 <UART_SetConfig+0x1b8>
 80098d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098d4:	d011      	beq.n	80098fa <UART_SetConfig+0x1b2>
 80098d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098da:	d811      	bhi.n	8009900 <UART_SetConfig+0x1b8>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <UART_SetConfig+0x1a0>
 80098e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098e4:	d006      	beq.n	80098f4 <UART_SetConfig+0x1ac>
 80098e6:	e00b      	b.n	8009900 <UART_SetConfig+0x1b8>
 80098e8:	2300      	movs	r3, #0
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	e037      	b.n	800995e <UART_SetConfig+0x216>
 80098ee:	2302      	movs	r3, #2
 80098f0:	77fb      	strb	r3, [r7, #31]
 80098f2:	e034      	b.n	800995e <UART_SetConfig+0x216>
 80098f4:	2304      	movs	r3, #4
 80098f6:	77fb      	strb	r3, [r7, #31]
 80098f8:	e031      	b.n	800995e <UART_SetConfig+0x216>
 80098fa:	2308      	movs	r3, #8
 80098fc:	77fb      	strb	r3, [r7, #31]
 80098fe:	e02e      	b.n	800995e <UART_SetConfig+0x216>
 8009900:	2310      	movs	r3, #16
 8009902:	77fb      	strb	r3, [r7, #31]
 8009904:	e02b      	b.n	800995e <UART_SetConfig+0x216>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a5a      	ldr	r2, [pc, #360]	@ (8009a74 <UART_SetConfig+0x32c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d124      	bne.n	800995a <UART_SetConfig+0x212>
 8009910:	4b54      	ldr	r3, [pc, #336]	@ (8009a64 <UART_SetConfig+0x31c>)
 8009912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009914:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009918:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800991c:	d011      	beq.n	8009942 <UART_SetConfig+0x1fa>
 800991e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009922:	d817      	bhi.n	8009954 <UART_SetConfig+0x20c>
 8009924:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009928:	d011      	beq.n	800994e <UART_SetConfig+0x206>
 800992a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800992e:	d811      	bhi.n	8009954 <UART_SetConfig+0x20c>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <UART_SetConfig+0x1f4>
 8009934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009938:	d006      	beq.n	8009948 <UART_SetConfig+0x200>
 800993a:	e00b      	b.n	8009954 <UART_SetConfig+0x20c>
 800993c:	2300      	movs	r3, #0
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e00d      	b.n	800995e <UART_SetConfig+0x216>
 8009942:	2302      	movs	r3, #2
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e00a      	b.n	800995e <UART_SetConfig+0x216>
 8009948:	2304      	movs	r3, #4
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e007      	b.n	800995e <UART_SetConfig+0x216>
 800994e:	2308      	movs	r3, #8
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e004      	b.n	800995e <UART_SetConfig+0x216>
 8009954:	2310      	movs	r3, #16
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e001      	b.n	800995e <UART_SetConfig+0x216>
 800995a:	2310      	movs	r3, #16
 800995c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009966:	d15b      	bne.n	8009a20 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8009968:	7ffb      	ldrb	r3, [r7, #31]
 800996a:	2b08      	cmp	r3, #8
 800996c:	d827      	bhi.n	80099be <UART_SetConfig+0x276>
 800996e:	a201      	add	r2, pc, #4	@ (adr r2, 8009974 <UART_SetConfig+0x22c>)
 8009970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009974:	08009999 	.word	0x08009999
 8009978:	080099a1 	.word	0x080099a1
 800997c:	080099a9 	.word	0x080099a9
 8009980:	080099bf 	.word	0x080099bf
 8009984:	080099af 	.word	0x080099af
 8009988:	080099bf 	.word	0x080099bf
 800998c:	080099bf 	.word	0x080099bf
 8009990:	080099bf 	.word	0x080099bf
 8009994:	080099b7 	.word	0x080099b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009998:	f7fd fbc8 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 800999c:	61b8      	str	r0, [r7, #24]
        break;
 800999e:	e013      	b.n	80099c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099a0:	f7fd fbe6 	bl	8007170 <HAL_RCC_GetPCLK2Freq>
 80099a4:	61b8      	str	r0, [r7, #24]
        break;
 80099a6:	e00f      	b.n	80099c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099a8:	4b33      	ldr	r3, [pc, #204]	@ (8009a78 <UART_SetConfig+0x330>)
 80099aa:	61bb      	str	r3, [r7, #24]
        break;
 80099ac:	e00c      	b.n	80099c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ae:	f7fd fb5b 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 80099b2:	61b8      	str	r0, [r7, #24]
        break;
 80099b4:	e008      	b.n	80099c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ba:	61bb      	str	r3, [r7, #24]
        break;
 80099bc:	e004      	b.n	80099c8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	77bb      	strb	r3, [r7, #30]
        break;
 80099c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 8082 	beq.w	8009ad4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	005a      	lsls	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	085b      	lsrs	r3, r3, #1
 80099da:	441a      	add	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b0f      	cmp	r3, #15
 80099ea:	d916      	bls.n	8009a1a <UART_SetConfig+0x2d2>
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099f2:	d212      	bcs.n	8009a1a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	f023 030f 	bic.w	r3, r3, #15
 80099fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	085b      	lsrs	r3, r3, #1
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	89fb      	ldrh	r3, [r7, #14]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	89fa      	ldrh	r2, [r7, #14]
 8009a16:	60da      	str	r2, [r3, #12]
 8009a18:	e05c      	b.n	8009ad4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	77bb      	strb	r3, [r7, #30]
 8009a1e:	e059      	b.n	8009ad4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a20:	7ffb      	ldrb	r3, [r7, #31]
 8009a22:	2b08      	cmp	r3, #8
 8009a24:	d835      	bhi.n	8009a92 <UART_SetConfig+0x34a>
 8009a26:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <UART_SetConfig+0x2e4>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009a51 	.word	0x08009a51
 8009a30:	08009a59 	.word	0x08009a59
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009a93 	.word	0x08009a93
 8009a3c:	08009a83 	.word	0x08009a83
 8009a40:	08009a93 	.word	0x08009a93
 8009a44:	08009a93 	.word	0x08009a93
 8009a48:	08009a93 	.word	0x08009a93
 8009a4c:	08009a8b 	.word	0x08009a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a50:	f7fd fb6c 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 8009a54:	61b8      	str	r0, [r7, #24]
        break;
 8009a56:	e021      	b.n	8009a9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a58:	f7fd fb8a 	bl	8007170 <HAL_RCC_GetPCLK2Freq>
 8009a5c:	61b8      	str	r0, [r7, #24]
        break;
 8009a5e:	e01d      	b.n	8009a9c <UART_SetConfig+0x354>
 8009a60:	40013800 	.word	0x40013800
 8009a64:	40021000 	.word	0x40021000
 8009a68:	40004400 	.word	0x40004400
 8009a6c:	40004800 	.word	0x40004800
 8009a70:	40004c00 	.word	0x40004c00
 8009a74:	40005000 	.word	0x40005000
 8009a78:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009aec <UART_SetConfig+0x3a4>)
 8009a7e:	61bb      	str	r3, [r7, #24]
        break;
 8009a80:	e00c      	b.n	8009a9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a82:	f7fd faf1 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8009a86:	61b8      	str	r0, [r7, #24]
        break;
 8009a88:	e008      	b.n	8009a9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a8e:	61bb      	str	r3, [r7, #24]
        break;
 8009a90:	e004      	b.n	8009a9c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	77bb      	strb	r3, [r7, #30]
        break;
 8009a9a:	bf00      	nop
    }

    if (pclk != 0U)
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d018      	beq.n	8009ad4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	085a      	lsrs	r2, r3, #1
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	441a      	add	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b0f      	cmp	r3, #15
 8009aba:	d909      	bls.n	8009ad0 <UART_SetConfig+0x388>
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ac2:	d205      	bcs.n	8009ad0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	60da      	str	r2, [r3, #12]
 8009ace:	e001      	b.n	8009ad4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ae0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3720      	adds	r7, #32
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	007a1200 	.word	0x007a1200

08009af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01a      	beq.n	8009c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bee:	d10a      	bne.n	8009c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]
  }
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b098      	sub	sp, #96	@ 0x60
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c44:	f7f9 f92e 	bl	8002ea4 <HAL_GetTick>
 8009c48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d12e      	bne.n	8009cb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c60:	2200      	movs	r2, #0
 8009c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f88c 	bl	8009d84 <UART_WaitOnFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d021      	beq.n	8009cb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e6      	bne.n	8009c72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e062      	b.n	8009d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d149      	bne.n	8009d58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f856 	bl	8009d84 <UART_WaitOnFlagUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d03c      	beq.n	8009d58 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	623b      	str	r3, [r7, #32]
   return(result);
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e6      	bne.n	8009cde <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3308      	adds	r3, #8
 8009d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0301 	bic.w	r3, r3, #1
 8009d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d30:	61fa      	str	r2, [r7, #28]
 8009d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	69b9      	ldr	r1, [r7, #24]
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e5      	bne.n	8009d10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e011      	b.n	8009d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3758      	adds	r7, #88	@ 0x58
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	603b      	str	r3, [r7, #0]
 8009d90:	4613      	mov	r3, r2
 8009d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d94:	e04f      	b.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d04b      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9e:	f7f9 f881 	bl	8002ea4 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d302      	bcc.n	8009db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e04e      	b.n	8009e56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d037      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b80      	cmp	r3, #128	@ 0x80
 8009dca:	d034      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b40      	cmp	r3, #64	@ 0x40
 8009dd0:	d031      	beq.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d110      	bne.n	8009e02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2208      	movs	r2, #8
 8009de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 f8ff 	bl	8009fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2208      	movs	r2, #8
 8009df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e029      	b.n	8009e56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e10:	d111      	bne.n	8009e36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f8e5 	bl	8009fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e00f      	b.n	8009e56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69da      	ldr	r2, [r3, #28]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	bf0c      	ite	eq
 8009e46:	2301      	moveq	r3, #1
 8009e48:	2300      	movne	r3, #0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d0a0      	beq.n	8009d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b096      	sub	sp, #88	@ 0x58
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	88fa      	ldrh	r2, [r7, #6]
 8009e78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2222      	movs	r2, #34	@ 0x22
 8009e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d028      	beq.n	8009ee6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e98:	4a3e      	ldr	r2, [pc, #248]	@ (8009f94 <UART_Start_Receive_DMA+0x134>)
 8009e9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8009f98 <UART_Start_Receive_DMA+0x138>)
 8009ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8009f9c <UART_Start_Receive_DMA+0x13c>)
 8009eaa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3324      	adds	r3, #36	@ 0x24
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	88fb      	ldrh	r3, [r7, #6]
 8009ec8:	f7fa fd76 	bl	80049b8 <HAL_DMA_Start_IT>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2210      	movs	r2, #16
 8009ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e051      	b.n	8009f8a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d018      	beq.n	8009f20 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e6      	bne.n	8009eee <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3308      	adds	r3, #8
 8009f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f40:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	613b      	str	r3, [r7, #16]
   return(result);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3308      	adds	r3, #8
 8009f72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f74:	623a      	str	r2, [r7, #32]
 8009f76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	69f9      	ldr	r1, [r7, #28]
 8009f7a:	6a3a      	ldr	r2, [r7, #32]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e5      	bne.n	8009f54 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3758      	adds	r7, #88	@ 0x58
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	0800a165 	.word	0x0800a165
 8009f98:	0800a28b 	.word	0x0800a28b
 8009f9c:	0800a2c9 	.word	0x0800a2c9

08009fa0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b089      	sub	sp, #36	@ 0x24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fbc:	61fb      	str	r3, [r7, #28]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6979      	ldr	r1, [r7, #20]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e6      	bne.n	8009fa8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009fe0:	bf00      	nop
 8009fe2:	3724      	adds	r7, #36	@ 0x24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b095      	sub	sp, #84	@ 0x54
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a012:	643b      	str	r3, [r7, #64]	@ 0x40
 800a014:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e6      	bne.n	8009ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	61fb      	str	r3, [r7, #28]
   return(result);
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f023 0301 	bic.w	r3, r3, #1
 800a03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a048:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a04c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e5      	bne.n	800a026 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d118      	bne.n	800a094 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	e853 3f00 	ldrex	r3, [r3]
 800a06e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	f023 0310 	bic.w	r3, r3, #16
 800a076:	647b      	str	r3, [r7, #68]	@ 0x44
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	461a      	mov	r2, r3
 800a07e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6979      	ldr	r1, [r7, #20]
 800a086:	69ba      	ldr	r2, [r7, #24]
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	613b      	str	r3, [r7, #16]
   return(result);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e6      	bne.n	800a062 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a0a8:	bf00      	nop
 800a0aa:	3754      	adds	r7, #84	@ 0x54
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b090      	sub	sp, #64	@ 0x40
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	d037      	beq.n	800a13a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e5      	bne.n	800a0d2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	60fb      	str	r3, [r7, #12]
   return(result);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a124:	61fb      	str	r3, [r7, #28]
 800a126:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	69b9      	ldr	r1, [r7, #24]
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	617b      	str	r3, [r7, #20]
   return(result);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e6      	bne.n	800a106 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a138:	e002      	b.n	800a140 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800a13a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a13c:	f7f7 ffc2 	bl	80020c4 <HAL_UART_TxCpltCallback>
}
 800a140:	bf00      	nop
 800a142:	3740      	adds	r7, #64	@ 0x40
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff face 	bl	80096f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a15c:	bf00      	nop
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b09c      	sub	sp, #112	@ 0x70
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a170:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	2b20      	cmp	r3, #32
 800a178:	d071      	beq.n	800a25e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a17c:	2200      	movs	r2, #0
 800a17e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a196:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e6      	bne.n	800a182 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a1d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800a1d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800a200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a208:	633a      	str	r2, [r7, #48]	@ 0x30
 800a20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e5      	bne.n	800a1e8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d118      	bne.n	800a25e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a22c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f023 0310 	bic.w	r3, r3, #16
 800a240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	69b9      	ldr	r1, [r7, #24]
 800a250:	69fa      	ldr	r2, [r7, #28]
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	617b      	str	r3, [r7, #20]
   return(result);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e6      	bne.n	800a22c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a260:	2200      	movs	r2, #0
 800a262:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d107      	bne.n	800a27c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a26e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a272:	4619      	mov	r1, r3
 800a274:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a276:	f7f7 ff5f 	bl	8002138 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a27a:	e002      	b.n	800a282 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a27c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a27e:	f7ff fa45 	bl	800970c <HAL_UART_RxCpltCallback>
}
 800a282:	bf00      	nop
 800a284:	3770      	adds	r7, #112	@ 0x70
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a296:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d109      	bne.n	800a2ba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a2ac:	085b      	lsrs	r3, r3, #1
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7f7 ff40 	bl	8002138 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2b8:	e002      	b.n	800a2c0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7ff fa30 	bl	8009720 <HAL_UART_RxHalfCpltCallback>
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ee:	2b80      	cmp	r3, #128	@ 0x80
 800a2f0:	d109      	bne.n	800a306 <UART_DMAError+0x3e>
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b21      	cmp	r3, #33	@ 0x21
 800a2f6:	d106      	bne.n	800a306 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a300:	6978      	ldr	r0, [r7, #20]
 800a302:	f7ff fe4d 	bl	8009fa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a310:	2b40      	cmp	r3, #64	@ 0x40
 800a312:	d109      	bne.n	800a328 <UART_DMAError+0x60>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b22      	cmp	r3, #34	@ 0x22
 800a318:	d106      	bne.n	800a328 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a322:	6978      	ldr	r0, [r7, #20]
 800a324:	f7ff fe62 	bl	8009fec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a32e:	f043 0210 	orr.w	r2, r3, #16
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a338:	6978      	ldr	r0, [r7, #20]
 800a33a:	f7ff f9fb 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a33e:	bf00      	nop
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff f9e5 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b088      	sub	sp, #32
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	60bb      	str	r3, [r7, #8]
   return(result);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	61bb      	str	r3, [r7, #24]
 800a39a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6979      	ldr	r1, [r7, #20]
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e6      	bne.n	800a37a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7f7 fe83 	bl	80020c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3be:	bf00      	nop
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b08c      	sub	sp, #48	@ 0x30
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ee:	2b20      	cmp	r3, #32
 800a3f0:	d142      	bne.n	800a478 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e03b      	b.n	800a47a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	461a      	mov	r2, r3
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fd23 	bl	8009e60 <UART_Start_Receive_DMA>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a424:	2b00      	cmp	r3, #0
 800a426:	d124      	bne.n	800a472 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d11d      	bne.n	800a46c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2210      	movs	r2, #16
 800a436:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	617b      	str	r3, [r7, #20]
   return(result);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f043 0310 	orr.w	r3, r3, #16
 800a44c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
 800a458:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	6a39      	ldr	r1, [r7, #32]
 800a45c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	61fb      	str	r3, [r7, #28]
   return(result);
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e6      	bne.n	800a438 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a46a:	e002      	b.n	800a472 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a476:	e000      	b.n	800a47a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a478:	2302      	movs	r3, #2
  }
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3730      	adds	r7, #48	@ 0x30
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <__cvt>:
 800a482:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a486:	ec57 6b10 	vmov	r6, r7, d0
 800a48a:	2f00      	cmp	r7, #0
 800a48c:	460c      	mov	r4, r1
 800a48e:	4619      	mov	r1, r3
 800a490:	463b      	mov	r3, r7
 800a492:	bfbb      	ittet	lt
 800a494:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a498:	461f      	movlt	r7, r3
 800a49a:	2300      	movge	r3, #0
 800a49c:	232d      	movlt	r3, #45	@ 0x2d
 800a49e:	700b      	strb	r3, [r1, #0]
 800a4a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4a2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4a6:	4691      	mov	r9, r2
 800a4a8:	f023 0820 	bic.w	r8, r3, #32
 800a4ac:	bfbc      	itt	lt
 800a4ae:	4632      	movlt	r2, r6
 800a4b0:	4616      	movlt	r6, r2
 800a4b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4b6:	d005      	beq.n	800a4c4 <__cvt+0x42>
 800a4b8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4bc:	d100      	bne.n	800a4c0 <__cvt+0x3e>
 800a4be:	3401      	adds	r4, #1
 800a4c0:	2102      	movs	r1, #2
 800a4c2:	e000      	b.n	800a4c6 <__cvt+0x44>
 800a4c4:	2103      	movs	r1, #3
 800a4c6:	ab03      	add	r3, sp, #12
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	ab02      	add	r3, sp, #8
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	ec47 6b10 	vmov	d0, r6, r7
 800a4d2:	4653      	mov	r3, sl
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	f000 fe5b 	bl	800b190 <_dtoa_r>
 800a4da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a4de:	4605      	mov	r5, r0
 800a4e0:	d119      	bne.n	800a516 <__cvt+0x94>
 800a4e2:	f019 0f01 	tst.w	r9, #1
 800a4e6:	d00e      	beq.n	800a506 <__cvt+0x84>
 800a4e8:	eb00 0904 	add.w	r9, r0, r4
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f6 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4f8:	b108      	cbz	r0, 800a4fe <__cvt+0x7c>
 800a4fa:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4fe:	2230      	movs	r2, #48	@ 0x30
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	454b      	cmp	r3, r9
 800a504:	d31e      	bcc.n	800a544 <__cvt+0xc2>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a50a:	1b5b      	subs	r3, r3, r5
 800a50c:	4628      	mov	r0, r5
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	b004      	add	sp, #16
 800a512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a516:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a51a:	eb00 0904 	add.w	r9, r0, r4
 800a51e:	d1e5      	bne.n	800a4ec <__cvt+0x6a>
 800a520:	7803      	ldrb	r3, [r0, #0]
 800a522:	2b30      	cmp	r3, #48	@ 0x30
 800a524:	d10a      	bne.n	800a53c <__cvt+0xba>
 800a526:	2200      	movs	r2, #0
 800a528:	2300      	movs	r3, #0
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a532:	b918      	cbnz	r0, 800a53c <__cvt+0xba>
 800a534:	f1c4 0401 	rsb	r4, r4, #1
 800a538:	f8ca 4000 	str.w	r4, [sl]
 800a53c:	f8da 3000 	ldr.w	r3, [sl]
 800a540:	4499      	add	r9, r3
 800a542:	e7d3      	b.n	800a4ec <__cvt+0x6a>
 800a544:	1c59      	adds	r1, r3, #1
 800a546:	9103      	str	r1, [sp, #12]
 800a548:	701a      	strb	r2, [r3, #0]
 800a54a:	e7d9      	b.n	800a500 <__cvt+0x7e>

0800a54c <__exponent>:
 800a54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a54e:	2900      	cmp	r1, #0
 800a550:	bfba      	itte	lt
 800a552:	4249      	neglt	r1, r1
 800a554:	232d      	movlt	r3, #45	@ 0x2d
 800a556:	232b      	movge	r3, #43	@ 0x2b
 800a558:	2909      	cmp	r1, #9
 800a55a:	7002      	strb	r2, [r0, #0]
 800a55c:	7043      	strb	r3, [r0, #1]
 800a55e:	dd29      	ble.n	800a5b4 <__exponent+0x68>
 800a560:	f10d 0307 	add.w	r3, sp, #7
 800a564:	461d      	mov	r5, r3
 800a566:	270a      	movs	r7, #10
 800a568:	461a      	mov	r2, r3
 800a56a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a56e:	fb07 1416 	mls	r4, r7, r6, r1
 800a572:	3430      	adds	r4, #48	@ 0x30
 800a574:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a578:	460c      	mov	r4, r1
 800a57a:	2c63      	cmp	r4, #99	@ 0x63
 800a57c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a580:	4631      	mov	r1, r6
 800a582:	dcf1      	bgt.n	800a568 <__exponent+0x1c>
 800a584:	3130      	adds	r1, #48	@ 0x30
 800a586:	1e94      	subs	r4, r2, #2
 800a588:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a58c:	1c41      	adds	r1, r0, #1
 800a58e:	4623      	mov	r3, r4
 800a590:	42ab      	cmp	r3, r5
 800a592:	d30a      	bcc.n	800a5aa <__exponent+0x5e>
 800a594:	f10d 0309 	add.w	r3, sp, #9
 800a598:	1a9b      	subs	r3, r3, r2
 800a59a:	42ac      	cmp	r4, r5
 800a59c:	bf88      	it	hi
 800a59e:	2300      	movhi	r3, #0
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	4403      	add	r3, r0
 800a5a4:	1a18      	subs	r0, r3, r0
 800a5a6:	b003      	add	sp, #12
 800a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5b2:	e7ed      	b.n	800a590 <__exponent+0x44>
 800a5b4:	2330      	movs	r3, #48	@ 0x30
 800a5b6:	3130      	adds	r1, #48	@ 0x30
 800a5b8:	7083      	strb	r3, [r0, #2]
 800a5ba:	70c1      	strb	r1, [r0, #3]
 800a5bc:	1d03      	adds	r3, r0, #4
 800a5be:	e7f1      	b.n	800a5a4 <__exponent+0x58>

0800a5c0 <_printf_float>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b08d      	sub	sp, #52	@ 0x34
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a5cc:	4616      	mov	r6, r2
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	f000 fcdb 	bl	800af8c <_localeconv_r>
 800a5d6:	6803      	ldr	r3, [r0, #0]
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7f5 fe48 	bl	8000270 <strlen>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e8:	9005      	str	r0, [sp, #20]
 800a5ea:	3307      	adds	r3, #7
 800a5ec:	f023 0307 	bic.w	r3, r3, #7
 800a5f0:	f103 0208 	add.w	r2, r3, #8
 800a5f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5f8:	f8d4 b000 	ldr.w	fp, [r4]
 800a5fc:	f8c8 2000 	str.w	r2, [r8]
 800a600:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a604:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a60e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a616:	4b9c      	ldr	r3, [pc, #624]	@ (800a888 <_printf_float+0x2c8>)
 800a618:	f04f 32ff 	mov.w	r2, #4294967295
 800a61c:	f7f6 fa86 	bl	8000b2c <__aeabi_dcmpun>
 800a620:	bb70      	cbnz	r0, 800a680 <_printf_float+0xc0>
 800a622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a626:	4b98      	ldr	r3, [pc, #608]	@ (800a888 <_printf_float+0x2c8>)
 800a628:	f04f 32ff 	mov.w	r2, #4294967295
 800a62c:	f7f6 fa60 	bl	8000af0 <__aeabi_dcmple>
 800a630:	bb30      	cbnz	r0, 800a680 <_printf_float+0xc0>
 800a632:	2200      	movs	r2, #0
 800a634:	2300      	movs	r3, #0
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f6 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800a63e:	b110      	cbz	r0, 800a646 <_printf_float+0x86>
 800a640:	232d      	movs	r3, #45	@ 0x2d
 800a642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a646:	4a91      	ldr	r2, [pc, #580]	@ (800a88c <_printf_float+0x2cc>)
 800a648:	4b91      	ldr	r3, [pc, #580]	@ (800a890 <_printf_float+0x2d0>)
 800a64a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a64e:	bf94      	ite	ls
 800a650:	4690      	movls	r8, r2
 800a652:	4698      	movhi	r8, r3
 800a654:	2303      	movs	r3, #3
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	f02b 0304 	bic.w	r3, fp, #4
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	f04f 0900 	mov.w	r9, #0
 800a662:	9700      	str	r7, [sp, #0]
 800a664:	4633      	mov	r3, r6
 800a666:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a668:	4621      	mov	r1, r4
 800a66a:	4628      	mov	r0, r5
 800a66c:	f000 f9d2 	bl	800aa14 <_printf_common>
 800a670:	3001      	adds	r0, #1
 800a672:	f040 808d 	bne.w	800a790 <_printf_float+0x1d0>
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	b00d      	add	sp, #52	@ 0x34
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	4642      	mov	r2, r8
 800a682:	464b      	mov	r3, r9
 800a684:	4640      	mov	r0, r8
 800a686:	4649      	mov	r1, r9
 800a688:	f7f6 fa50 	bl	8000b2c <__aeabi_dcmpun>
 800a68c:	b140      	cbz	r0, 800a6a0 <_printf_float+0xe0>
 800a68e:	464b      	mov	r3, r9
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfbc      	itt	lt
 800a694:	232d      	movlt	r3, #45	@ 0x2d
 800a696:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a69a:	4a7e      	ldr	r2, [pc, #504]	@ (800a894 <_printf_float+0x2d4>)
 800a69c:	4b7e      	ldr	r3, [pc, #504]	@ (800a898 <_printf_float+0x2d8>)
 800a69e:	e7d4      	b.n	800a64a <_printf_float+0x8a>
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6a6:	9206      	str	r2, [sp, #24]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	d13b      	bne.n	800a724 <_printf_float+0x164>
 800a6ac:	2306      	movs	r3, #6
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	6022      	str	r2, [r4, #0]
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a6c0:	ab09      	add	r3, sp, #36	@ 0x24
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	6861      	ldr	r1, [r4, #4]
 800a6c6:	ec49 8b10 	vmov	d0, r8, r9
 800a6ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f7ff fed7 	bl	800a482 <__cvt>
 800a6d4:	9b06      	ldr	r3, [sp, #24]
 800a6d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6d8:	2b47      	cmp	r3, #71	@ 0x47
 800a6da:	4680      	mov	r8, r0
 800a6dc:	d129      	bne.n	800a732 <_printf_float+0x172>
 800a6de:	1cc8      	adds	r0, r1, #3
 800a6e0:	db02      	blt.n	800a6e8 <_printf_float+0x128>
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	4299      	cmp	r1, r3
 800a6e6:	dd41      	ble.n	800a76c <_printf_float+0x1ac>
 800a6e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a6ec:	fa5f fa8a 	uxtb.w	sl, sl
 800a6f0:	3901      	subs	r1, #1
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6fa:	f7ff ff27 	bl	800a54c <__exponent>
 800a6fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a700:	1813      	adds	r3, r2, r0
 800a702:	2a01      	cmp	r2, #1
 800a704:	4681      	mov	r9, r0
 800a706:	6123      	str	r3, [r4, #16]
 800a708:	dc02      	bgt.n	800a710 <_printf_float+0x150>
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	07d2      	lsls	r2, r2, #31
 800a70e:	d501      	bpl.n	800a714 <_printf_float+0x154>
 800a710:	3301      	adds	r3, #1
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0a2      	beq.n	800a662 <_printf_float+0xa2>
 800a71c:	232d      	movs	r3, #45	@ 0x2d
 800a71e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a722:	e79e      	b.n	800a662 <_printf_float+0xa2>
 800a724:	9a06      	ldr	r2, [sp, #24]
 800a726:	2a47      	cmp	r2, #71	@ 0x47
 800a728:	d1c2      	bne.n	800a6b0 <_printf_float+0xf0>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1c0      	bne.n	800a6b0 <_printf_float+0xf0>
 800a72e:	2301      	movs	r3, #1
 800a730:	e7bd      	b.n	800a6ae <_printf_float+0xee>
 800a732:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a736:	d9db      	bls.n	800a6f0 <_printf_float+0x130>
 800a738:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a73c:	d118      	bne.n	800a770 <_printf_float+0x1b0>
 800a73e:	2900      	cmp	r1, #0
 800a740:	6863      	ldr	r3, [r4, #4]
 800a742:	dd0b      	ble.n	800a75c <_printf_float+0x19c>
 800a744:	6121      	str	r1, [r4, #16]
 800a746:	b913      	cbnz	r3, 800a74e <_printf_float+0x18e>
 800a748:	6822      	ldr	r2, [r4, #0]
 800a74a:	07d0      	lsls	r0, r2, #31
 800a74c:	d502      	bpl.n	800a754 <_printf_float+0x194>
 800a74e:	3301      	adds	r3, #1
 800a750:	440b      	add	r3, r1
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a756:	f04f 0900 	mov.w	r9, #0
 800a75a:	e7db      	b.n	800a714 <_printf_float+0x154>
 800a75c:	b913      	cbnz	r3, 800a764 <_printf_float+0x1a4>
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	07d2      	lsls	r2, r2, #31
 800a762:	d501      	bpl.n	800a768 <_printf_float+0x1a8>
 800a764:	3302      	adds	r3, #2
 800a766:	e7f4      	b.n	800a752 <_printf_float+0x192>
 800a768:	2301      	movs	r3, #1
 800a76a:	e7f2      	b.n	800a752 <_printf_float+0x192>
 800a76c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a772:	4299      	cmp	r1, r3
 800a774:	db05      	blt.n	800a782 <_printf_float+0x1c2>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	6121      	str	r1, [r4, #16]
 800a77a:	07d8      	lsls	r0, r3, #31
 800a77c:	d5ea      	bpl.n	800a754 <_printf_float+0x194>
 800a77e:	1c4b      	adds	r3, r1, #1
 800a780:	e7e7      	b.n	800a752 <_printf_float+0x192>
 800a782:	2900      	cmp	r1, #0
 800a784:	bfd4      	ite	le
 800a786:	f1c1 0202 	rsble	r2, r1, #2
 800a78a:	2201      	movgt	r2, #1
 800a78c:	4413      	add	r3, r2
 800a78e:	e7e0      	b.n	800a752 <_printf_float+0x192>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	055a      	lsls	r2, r3, #21
 800a794:	d407      	bmi.n	800a7a6 <_printf_float+0x1e6>
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	4642      	mov	r2, r8
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b8      	blx	r7
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d12b      	bne.n	800a7fc <_printf_float+0x23c>
 800a7a4:	e767      	b.n	800a676 <_printf_float+0xb6>
 800a7a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7aa:	f240 80dd 	bls.w	800a968 <_printf_float+0x3a8>
 800a7ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f7f6 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d033      	beq.n	800a826 <_printf_float+0x266>
 800a7be:	4a37      	ldr	r2, [pc, #220]	@ (800a89c <_printf_float+0x2dc>)
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	47b8      	blx	r7
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	f43f af54 	beq.w	800a676 <_printf_float+0xb6>
 800a7ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a7d2:	4543      	cmp	r3, r8
 800a7d4:	db02      	blt.n	800a7dc <_printf_float+0x21c>
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	07d8      	lsls	r0, r3, #31
 800a7da:	d50f      	bpl.n	800a7fc <_printf_float+0x23c>
 800a7dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f43f af45 	beq.w	800a676 <_printf_float+0xb6>
 800a7ec:	f04f 0900 	mov.w	r9, #0
 800a7f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7f4:	f104 0a1a 	add.w	sl, r4, #26
 800a7f8:	45c8      	cmp	r8, r9
 800a7fa:	dc09      	bgt.n	800a810 <_printf_float+0x250>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	079b      	lsls	r3, r3, #30
 800a800:	f100 8103 	bmi.w	800aa0a <_printf_float+0x44a>
 800a804:	68e0      	ldr	r0, [r4, #12]
 800a806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a808:	4298      	cmp	r0, r3
 800a80a:	bfb8      	it	lt
 800a80c:	4618      	movlt	r0, r3
 800a80e:	e734      	b.n	800a67a <_printf_float+0xba>
 800a810:	2301      	movs	r3, #1
 800a812:	4652      	mov	r2, sl
 800a814:	4631      	mov	r1, r6
 800a816:	4628      	mov	r0, r5
 800a818:	47b8      	blx	r7
 800a81a:	3001      	adds	r0, #1
 800a81c:	f43f af2b 	beq.w	800a676 <_printf_float+0xb6>
 800a820:	f109 0901 	add.w	r9, r9, #1
 800a824:	e7e8      	b.n	800a7f8 <_printf_float+0x238>
 800a826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc39      	bgt.n	800a8a0 <_printf_float+0x2e0>
 800a82c:	4a1b      	ldr	r2, [pc, #108]	@ (800a89c <_printf_float+0x2dc>)
 800a82e:	2301      	movs	r3, #1
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af1d 	beq.w	800a676 <_printf_float+0xb6>
 800a83c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a840:	ea59 0303 	orrs.w	r3, r9, r3
 800a844:	d102      	bne.n	800a84c <_printf_float+0x28c>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	07d9      	lsls	r1, r3, #31
 800a84a:	d5d7      	bpl.n	800a7fc <_printf_float+0x23c>
 800a84c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a850:	4631      	mov	r1, r6
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f af0d 	beq.w	800a676 <_printf_float+0xb6>
 800a85c:	f04f 0a00 	mov.w	sl, #0
 800a860:	f104 0b1a 	add.w	fp, r4, #26
 800a864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a866:	425b      	negs	r3, r3
 800a868:	4553      	cmp	r3, sl
 800a86a:	dc01      	bgt.n	800a870 <_printf_float+0x2b0>
 800a86c:	464b      	mov	r3, r9
 800a86e:	e793      	b.n	800a798 <_printf_float+0x1d8>
 800a870:	2301      	movs	r3, #1
 800a872:	465a      	mov	r2, fp
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	f43f aefb 	beq.w	800a676 <_printf_float+0xb6>
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	e7ee      	b.n	800a864 <_printf_float+0x2a4>
 800a886:	bf00      	nop
 800a888:	7fefffff 	.word	0x7fefffff
 800a88c:	0800d1c0 	.word	0x0800d1c0
 800a890:	0800d1c4 	.word	0x0800d1c4
 800a894:	0800d1c8 	.word	0x0800d1c8
 800a898:	0800d1cc 	.word	0x0800d1cc
 800a89c:	0800d1d0 	.word	0x0800d1d0
 800a8a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8a6:	4553      	cmp	r3, sl
 800a8a8:	bfa8      	it	ge
 800a8aa:	4653      	movge	r3, sl
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	4699      	mov	r9, r3
 800a8b0:	dc36      	bgt.n	800a920 <_printf_float+0x360>
 800a8b2:	f04f 0b00 	mov.w	fp, #0
 800a8b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ba:	f104 021a 	add.w	r2, r4, #26
 800a8be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8c0:	9306      	str	r3, [sp, #24]
 800a8c2:	eba3 0309 	sub.w	r3, r3, r9
 800a8c6:	455b      	cmp	r3, fp
 800a8c8:	dc31      	bgt.n	800a92e <_printf_float+0x36e>
 800a8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8cc:	459a      	cmp	sl, r3
 800a8ce:	dc3a      	bgt.n	800a946 <_printf_float+0x386>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	07da      	lsls	r2, r3, #31
 800a8d4:	d437      	bmi.n	800a946 <_printf_float+0x386>
 800a8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d8:	ebaa 0903 	sub.w	r9, sl, r3
 800a8dc:	9b06      	ldr	r3, [sp, #24]
 800a8de:	ebaa 0303 	sub.w	r3, sl, r3
 800a8e2:	4599      	cmp	r9, r3
 800a8e4:	bfa8      	it	ge
 800a8e6:	4699      	movge	r9, r3
 800a8e8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ec:	dc33      	bgt.n	800a956 <_printf_float+0x396>
 800a8ee:	f04f 0800 	mov.w	r8, #0
 800a8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8f6:	f104 0b1a 	add.w	fp, r4, #26
 800a8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fc:	ebaa 0303 	sub.w	r3, sl, r3
 800a900:	eba3 0309 	sub.w	r3, r3, r9
 800a904:	4543      	cmp	r3, r8
 800a906:	f77f af79 	ble.w	800a7fc <_printf_float+0x23c>
 800a90a:	2301      	movs	r3, #1
 800a90c:	465a      	mov	r2, fp
 800a90e:	4631      	mov	r1, r6
 800a910:	4628      	mov	r0, r5
 800a912:	47b8      	blx	r7
 800a914:	3001      	adds	r0, #1
 800a916:	f43f aeae 	beq.w	800a676 <_printf_float+0xb6>
 800a91a:	f108 0801 	add.w	r8, r8, #1
 800a91e:	e7ec      	b.n	800a8fa <_printf_float+0x33a>
 800a920:	4642      	mov	r2, r8
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	d1c2      	bne.n	800a8b2 <_printf_float+0x2f2>
 800a92c:	e6a3      	b.n	800a676 <_printf_float+0xb6>
 800a92e:	2301      	movs	r3, #1
 800a930:	4631      	mov	r1, r6
 800a932:	4628      	mov	r0, r5
 800a934:	9206      	str	r2, [sp, #24]
 800a936:	47b8      	blx	r7
 800a938:	3001      	adds	r0, #1
 800a93a:	f43f ae9c 	beq.w	800a676 <_printf_float+0xb6>
 800a93e:	9a06      	ldr	r2, [sp, #24]
 800a940:	f10b 0b01 	add.w	fp, fp, #1
 800a944:	e7bb      	b.n	800a8be <_printf_float+0x2fe>
 800a946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	d1c0      	bne.n	800a8d6 <_printf_float+0x316>
 800a954:	e68f      	b.n	800a676 <_printf_float+0xb6>
 800a956:	9a06      	ldr	r2, [sp, #24]
 800a958:	464b      	mov	r3, r9
 800a95a:	4442      	add	r2, r8
 800a95c:	4631      	mov	r1, r6
 800a95e:	4628      	mov	r0, r5
 800a960:	47b8      	blx	r7
 800a962:	3001      	adds	r0, #1
 800a964:	d1c3      	bne.n	800a8ee <_printf_float+0x32e>
 800a966:	e686      	b.n	800a676 <_printf_float+0xb6>
 800a968:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a96c:	f1ba 0f01 	cmp.w	sl, #1
 800a970:	dc01      	bgt.n	800a976 <_printf_float+0x3b6>
 800a972:	07db      	lsls	r3, r3, #31
 800a974:	d536      	bpl.n	800a9e4 <_printf_float+0x424>
 800a976:	2301      	movs	r3, #1
 800a978:	4642      	mov	r2, r8
 800a97a:	4631      	mov	r1, r6
 800a97c:	4628      	mov	r0, r5
 800a97e:	47b8      	blx	r7
 800a980:	3001      	adds	r0, #1
 800a982:	f43f ae78 	beq.w	800a676 <_printf_float+0xb6>
 800a986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a98a:	4631      	mov	r1, r6
 800a98c:	4628      	mov	r0, r5
 800a98e:	47b8      	blx	r7
 800a990:	3001      	adds	r0, #1
 800a992:	f43f ae70 	beq.w	800a676 <_printf_float+0xb6>
 800a996:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a99a:	2200      	movs	r2, #0
 800a99c:	2300      	movs	r3, #0
 800a99e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9a2:	f7f6 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a6:	b9c0      	cbnz	r0, 800a9da <_printf_float+0x41a>
 800a9a8:	4653      	mov	r3, sl
 800a9aa:	f108 0201 	add.w	r2, r8, #1
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	47b8      	blx	r7
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d10c      	bne.n	800a9d2 <_printf_float+0x412>
 800a9b8:	e65d      	b.n	800a676 <_printf_float+0xb6>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	465a      	mov	r2, fp
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f43f ae56 	beq.w	800a676 <_printf_float+0xb6>
 800a9ca:	f108 0801 	add.w	r8, r8, #1
 800a9ce:	45d0      	cmp	r8, sl
 800a9d0:	dbf3      	blt.n	800a9ba <_printf_float+0x3fa>
 800a9d2:	464b      	mov	r3, r9
 800a9d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a9d8:	e6df      	b.n	800a79a <_printf_float+0x1da>
 800a9da:	f04f 0800 	mov.w	r8, #0
 800a9de:	f104 0b1a 	add.w	fp, r4, #26
 800a9e2:	e7f4      	b.n	800a9ce <_printf_float+0x40e>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	4642      	mov	r2, r8
 800a9e8:	e7e1      	b.n	800a9ae <_printf_float+0x3ee>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	464a      	mov	r2, r9
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f43f ae3e 	beq.w	800a676 <_printf_float+0xb6>
 800a9fa:	f108 0801 	add.w	r8, r8, #1
 800a9fe:	68e3      	ldr	r3, [r4, #12]
 800aa00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa02:	1a5b      	subs	r3, r3, r1
 800aa04:	4543      	cmp	r3, r8
 800aa06:	dcf0      	bgt.n	800a9ea <_printf_float+0x42a>
 800aa08:	e6fc      	b.n	800a804 <_printf_float+0x244>
 800aa0a:	f04f 0800 	mov.w	r8, #0
 800aa0e:	f104 0919 	add.w	r9, r4, #25
 800aa12:	e7f4      	b.n	800a9fe <_printf_float+0x43e>

0800aa14 <_printf_common>:
 800aa14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa18:	4616      	mov	r6, r2
 800aa1a:	4698      	mov	r8, r3
 800aa1c:	688a      	ldr	r2, [r1, #8]
 800aa1e:	690b      	ldr	r3, [r1, #16]
 800aa20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa24:	4293      	cmp	r3, r2
 800aa26:	bfb8      	it	lt
 800aa28:	4613      	movlt	r3, r2
 800aa2a:	6033      	str	r3, [r6, #0]
 800aa2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa30:	4607      	mov	r7, r0
 800aa32:	460c      	mov	r4, r1
 800aa34:	b10a      	cbz	r2, 800aa3a <_printf_common+0x26>
 800aa36:	3301      	adds	r3, #1
 800aa38:	6033      	str	r3, [r6, #0]
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	0699      	lsls	r1, r3, #26
 800aa3e:	bf42      	ittt	mi
 800aa40:	6833      	ldrmi	r3, [r6, #0]
 800aa42:	3302      	addmi	r3, #2
 800aa44:	6033      	strmi	r3, [r6, #0]
 800aa46:	6825      	ldr	r5, [r4, #0]
 800aa48:	f015 0506 	ands.w	r5, r5, #6
 800aa4c:	d106      	bne.n	800aa5c <_printf_common+0x48>
 800aa4e:	f104 0a19 	add.w	sl, r4, #25
 800aa52:	68e3      	ldr	r3, [r4, #12]
 800aa54:	6832      	ldr	r2, [r6, #0]
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	42ab      	cmp	r3, r5
 800aa5a:	dc26      	bgt.n	800aaaa <_printf_common+0x96>
 800aa5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa60:	6822      	ldr	r2, [r4, #0]
 800aa62:	3b00      	subs	r3, #0
 800aa64:	bf18      	it	ne
 800aa66:	2301      	movne	r3, #1
 800aa68:	0692      	lsls	r2, r2, #26
 800aa6a:	d42b      	bmi.n	800aac4 <_printf_common+0xb0>
 800aa6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa70:	4641      	mov	r1, r8
 800aa72:	4638      	mov	r0, r7
 800aa74:	47c8      	blx	r9
 800aa76:	3001      	adds	r0, #1
 800aa78:	d01e      	beq.n	800aab8 <_printf_common+0xa4>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	6922      	ldr	r2, [r4, #16]
 800aa7e:	f003 0306 	and.w	r3, r3, #6
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	bf02      	ittt	eq
 800aa86:	68e5      	ldreq	r5, [r4, #12]
 800aa88:	6833      	ldreq	r3, [r6, #0]
 800aa8a:	1aed      	subeq	r5, r5, r3
 800aa8c:	68a3      	ldr	r3, [r4, #8]
 800aa8e:	bf0c      	ite	eq
 800aa90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa94:	2500      	movne	r5, #0
 800aa96:	4293      	cmp	r3, r2
 800aa98:	bfc4      	itt	gt
 800aa9a:	1a9b      	subgt	r3, r3, r2
 800aa9c:	18ed      	addgt	r5, r5, r3
 800aa9e:	2600      	movs	r6, #0
 800aaa0:	341a      	adds	r4, #26
 800aaa2:	42b5      	cmp	r5, r6
 800aaa4:	d11a      	bne.n	800aadc <_printf_common+0xc8>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	e008      	b.n	800aabc <_printf_common+0xa8>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4652      	mov	r2, sl
 800aaae:	4641      	mov	r1, r8
 800aab0:	4638      	mov	r0, r7
 800aab2:	47c8      	blx	r9
 800aab4:	3001      	adds	r0, #1
 800aab6:	d103      	bne.n	800aac0 <_printf_common+0xac>
 800aab8:	f04f 30ff 	mov.w	r0, #4294967295
 800aabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac0:	3501      	adds	r5, #1
 800aac2:	e7c6      	b.n	800aa52 <_printf_common+0x3e>
 800aac4:	18e1      	adds	r1, r4, r3
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	2030      	movs	r0, #48	@ 0x30
 800aaca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aace:	4422      	add	r2, r4
 800aad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aad8:	3302      	adds	r3, #2
 800aada:	e7c7      	b.n	800aa6c <_printf_common+0x58>
 800aadc:	2301      	movs	r3, #1
 800aade:	4622      	mov	r2, r4
 800aae0:	4641      	mov	r1, r8
 800aae2:	4638      	mov	r0, r7
 800aae4:	47c8      	blx	r9
 800aae6:	3001      	adds	r0, #1
 800aae8:	d0e6      	beq.n	800aab8 <_printf_common+0xa4>
 800aaea:	3601      	adds	r6, #1
 800aaec:	e7d9      	b.n	800aaa2 <_printf_common+0x8e>
	...

0800aaf0 <_printf_i>:
 800aaf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	7e0f      	ldrb	r7, [r1, #24]
 800aaf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaf8:	2f78      	cmp	r7, #120	@ 0x78
 800aafa:	4691      	mov	r9, r2
 800aafc:	4680      	mov	r8, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	469a      	mov	sl, r3
 800ab02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab06:	d807      	bhi.n	800ab18 <_printf_i+0x28>
 800ab08:	2f62      	cmp	r7, #98	@ 0x62
 800ab0a:	d80a      	bhi.n	800ab22 <_printf_i+0x32>
 800ab0c:	2f00      	cmp	r7, #0
 800ab0e:	f000 80d2 	beq.w	800acb6 <_printf_i+0x1c6>
 800ab12:	2f58      	cmp	r7, #88	@ 0x58
 800ab14:	f000 80b9 	beq.w	800ac8a <_printf_i+0x19a>
 800ab18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab20:	e03a      	b.n	800ab98 <_printf_i+0xa8>
 800ab22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab26:	2b15      	cmp	r3, #21
 800ab28:	d8f6      	bhi.n	800ab18 <_printf_i+0x28>
 800ab2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ab30 <_printf_i+0x40>)
 800ab2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab30:	0800ab89 	.word	0x0800ab89
 800ab34:	0800ab9d 	.word	0x0800ab9d
 800ab38:	0800ab19 	.word	0x0800ab19
 800ab3c:	0800ab19 	.word	0x0800ab19
 800ab40:	0800ab19 	.word	0x0800ab19
 800ab44:	0800ab19 	.word	0x0800ab19
 800ab48:	0800ab9d 	.word	0x0800ab9d
 800ab4c:	0800ab19 	.word	0x0800ab19
 800ab50:	0800ab19 	.word	0x0800ab19
 800ab54:	0800ab19 	.word	0x0800ab19
 800ab58:	0800ab19 	.word	0x0800ab19
 800ab5c:	0800ac9d 	.word	0x0800ac9d
 800ab60:	0800abc7 	.word	0x0800abc7
 800ab64:	0800ac57 	.word	0x0800ac57
 800ab68:	0800ab19 	.word	0x0800ab19
 800ab6c:	0800ab19 	.word	0x0800ab19
 800ab70:	0800acbf 	.word	0x0800acbf
 800ab74:	0800ab19 	.word	0x0800ab19
 800ab78:	0800abc7 	.word	0x0800abc7
 800ab7c:	0800ab19 	.word	0x0800ab19
 800ab80:	0800ab19 	.word	0x0800ab19
 800ab84:	0800ac5f 	.word	0x0800ac5f
 800ab88:	6833      	ldr	r3, [r6, #0]
 800ab8a:	1d1a      	adds	r2, r3, #4
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6032      	str	r2, [r6, #0]
 800ab90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e09d      	b.n	800acd8 <_printf_i+0x1e8>
 800ab9c:	6833      	ldr	r3, [r6, #0]
 800ab9e:	6820      	ldr	r0, [r4, #0]
 800aba0:	1d19      	adds	r1, r3, #4
 800aba2:	6031      	str	r1, [r6, #0]
 800aba4:	0606      	lsls	r6, r0, #24
 800aba6:	d501      	bpl.n	800abac <_printf_i+0xbc>
 800aba8:	681d      	ldr	r5, [r3, #0]
 800abaa:	e003      	b.n	800abb4 <_printf_i+0xc4>
 800abac:	0645      	lsls	r5, r0, #25
 800abae:	d5fb      	bpl.n	800aba8 <_printf_i+0xb8>
 800abb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	da03      	bge.n	800abc0 <_printf_i+0xd0>
 800abb8:	232d      	movs	r3, #45	@ 0x2d
 800abba:	426d      	negs	r5, r5
 800abbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abc0:	4859      	ldr	r0, [pc, #356]	@ (800ad28 <_printf_i+0x238>)
 800abc2:	230a      	movs	r3, #10
 800abc4:	e011      	b.n	800abea <_printf_i+0xfa>
 800abc6:	6821      	ldr	r1, [r4, #0]
 800abc8:	6833      	ldr	r3, [r6, #0]
 800abca:	0608      	lsls	r0, r1, #24
 800abcc:	f853 5b04 	ldr.w	r5, [r3], #4
 800abd0:	d402      	bmi.n	800abd8 <_printf_i+0xe8>
 800abd2:	0649      	lsls	r1, r1, #25
 800abd4:	bf48      	it	mi
 800abd6:	b2ad      	uxthmi	r5, r5
 800abd8:	2f6f      	cmp	r7, #111	@ 0x6f
 800abda:	4853      	ldr	r0, [pc, #332]	@ (800ad28 <_printf_i+0x238>)
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	bf14      	ite	ne
 800abe0:	230a      	movne	r3, #10
 800abe2:	2308      	moveq	r3, #8
 800abe4:	2100      	movs	r1, #0
 800abe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abea:	6866      	ldr	r6, [r4, #4]
 800abec:	60a6      	str	r6, [r4, #8]
 800abee:	2e00      	cmp	r6, #0
 800abf0:	bfa2      	ittt	ge
 800abf2:	6821      	ldrge	r1, [r4, #0]
 800abf4:	f021 0104 	bicge.w	r1, r1, #4
 800abf8:	6021      	strge	r1, [r4, #0]
 800abfa:	b90d      	cbnz	r5, 800ac00 <_printf_i+0x110>
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	d04b      	beq.n	800ac98 <_printf_i+0x1a8>
 800ac00:	4616      	mov	r6, r2
 800ac02:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac06:	fb03 5711 	mls	r7, r3, r1, r5
 800ac0a:	5dc7      	ldrb	r7, [r0, r7]
 800ac0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac10:	462f      	mov	r7, r5
 800ac12:	42bb      	cmp	r3, r7
 800ac14:	460d      	mov	r5, r1
 800ac16:	d9f4      	bls.n	800ac02 <_printf_i+0x112>
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d10b      	bne.n	800ac34 <_printf_i+0x144>
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	07df      	lsls	r7, r3, #31
 800ac20:	d508      	bpl.n	800ac34 <_printf_i+0x144>
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	6861      	ldr	r1, [r4, #4]
 800ac26:	4299      	cmp	r1, r3
 800ac28:	bfde      	ittt	le
 800ac2a:	2330      	movle	r3, #48	@ 0x30
 800ac2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac34:	1b92      	subs	r2, r2, r6
 800ac36:	6122      	str	r2, [r4, #16]
 800ac38:	f8cd a000 	str.w	sl, [sp]
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	aa03      	add	r2, sp, #12
 800ac40:	4621      	mov	r1, r4
 800ac42:	4640      	mov	r0, r8
 800ac44:	f7ff fee6 	bl	800aa14 <_printf_common>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d14a      	bne.n	800ace2 <_printf_i+0x1f2>
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	b004      	add	sp, #16
 800ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	f043 0320 	orr.w	r3, r3, #32
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	4833      	ldr	r0, [pc, #204]	@ (800ad2c <_printf_i+0x23c>)
 800ac60:	2778      	movs	r7, #120	@ 0x78
 800ac62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	6831      	ldr	r1, [r6, #0]
 800ac6a:	061f      	lsls	r7, r3, #24
 800ac6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac70:	d402      	bmi.n	800ac78 <_printf_i+0x188>
 800ac72:	065f      	lsls	r7, r3, #25
 800ac74:	bf48      	it	mi
 800ac76:	b2ad      	uxthmi	r5, r5
 800ac78:	6031      	str	r1, [r6, #0]
 800ac7a:	07d9      	lsls	r1, r3, #31
 800ac7c:	bf44      	itt	mi
 800ac7e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac82:	6023      	strmi	r3, [r4, #0]
 800ac84:	b11d      	cbz	r5, 800ac8e <_printf_i+0x19e>
 800ac86:	2310      	movs	r3, #16
 800ac88:	e7ac      	b.n	800abe4 <_printf_i+0xf4>
 800ac8a:	4827      	ldr	r0, [pc, #156]	@ (800ad28 <_printf_i+0x238>)
 800ac8c:	e7e9      	b.n	800ac62 <_printf_i+0x172>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	f023 0320 	bic.w	r3, r3, #32
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	e7f6      	b.n	800ac86 <_printf_i+0x196>
 800ac98:	4616      	mov	r6, r2
 800ac9a:	e7bd      	b.n	800ac18 <_printf_i+0x128>
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	6825      	ldr	r5, [r4, #0]
 800aca0:	6961      	ldr	r1, [r4, #20]
 800aca2:	1d18      	adds	r0, r3, #4
 800aca4:	6030      	str	r0, [r6, #0]
 800aca6:	062e      	lsls	r6, r5, #24
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	d501      	bpl.n	800acb0 <_printf_i+0x1c0>
 800acac:	6019      	str	r1, [r3, #0]
 800acae:	e002      	b.n	800acb6 <_printf_i+0x1c6>
 800acb0:	0668      	lsls	r0, r5, #25
 800acb2:	d5fb      	bpl.n	800acac <_printf_i+0x1bc>
 800acb4:	8019      	strh	r1, [r3, #0]
 800acb6:	2300      	movs	r3, #0
 800acb8:	6123      	str	r3, [r4, #16]
 800acba:	4616      	mov	r6, r2
 800acbc:	e7bc      	b.n	800ac38 <_printf_i+0x148>
 800acbe:	6833      	ldr	r3, [r6, #0]
 800acc0:	1d1a      	adds	r2, r3, #4
 800acc2:	6032      	str	r2, [r6, #0]
 800acc4:	681e      	ldr	r6, [r3, #0]
 800acc6:	6862      	ldr	r2, [r4, #4]
 800acc8:	2100      	movs	r1, #0
 800acca:	4630      	mov	r0, r6
 800accc:	f7f5 fa80 	bl	80001d0 <memchr>
 800acd0:	b108      	cbz	r0, 800acd6 <_printf_i+0x1e6>
 800acd2:	1b80      	subs	r0, r0, r6
 800acd4:	6060      	str	r0, [r4, #4]
 800acd6:	6863      	ldr	r3, [r4, #4]
 800acd8:	6123      	str	r3, [r4, #16]
 800acda:	2300      	movs	r3, #0
 800acdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace0:	e7aa      	b.n	800ac38 <_printf_i+0x148>
 800ace2:	6923      	ldr	r3, [r4, #16]
 800ace4:	4632      	mov	r2, r6
 800ace6:	4649      	mov	r1, r9
 800ace8:	4640      	mov	r0, r8
 800acea:	47d0      	blx	sl
 800acec:	3001      	adds	r0, #1
 800acee:	d0ad      	beq.n	800ac4c <_printf_i+0x15c>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	079b      	lsls	r3, r3, #30
 800acf4:	d413      	bmi.n	800ad1e <_printf_i+0x22e>
 800acf6:	68e0      	ldr	r0, [r4, #12]
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	4298      	cmp	r0, r3
 800acfc:	bfb8      	it	lt
 800acfe:	4618      	movlt	r0, r3
 800ad00:	e7a6      	b.n	800ac50 <_printf_i+0x160>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4632      	mov	r2, r6
 800ad06:	4649      	mov	r1, r9
 800ad08:	4640      	mov	r0, r8
 800ad0a:	47d0      	blx	sl
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d09d      	beq.n	800ac4c <_printf_i+0x15c>
 800ad10:	3501      	adds	r5, #1
 800ad12:	68e3      	ldr	r3, [r4, #12]
 800ad14:	9903      	ldr	r1, [sp, #12]
 800ad16:	1a5b      	subs	r3, r3, r1
 800ad18:	42ab      	cmp	r3, r5
 800ad1a:	dcf2      	bgt.n	800ad02 <_printf_i+0x212>
 800ad1c:	e7eb      	b.n	800acf6 <_printf_i+0x206>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	f104 0619 	add.w	r6, r4, #25
 800ad24:	e7f5      	b.n	800ad12 <_printf_i+0x222>
 800ad26:	bf00      	nop
 800ad28:	0800d1d2 	.word	0x0800d1d2
 800ad2c:	0800d1e3 	.word	0x0800d1e3

0800ad30 <std>:
 800ad30:	2300      	movs	r3, #0
 800ad32:	b510      	push	{r4, lr}
 800ad34:	4604      	mov	r4, r0
 800ad36:	e9c0 3300 	strd	r3, r3, [r0]
 800ad3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad3e:	6083      	str	r3, [r0, #8]
 800ad40:	8181      	strh	r1, [r0, #12]
 800ad42:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad44:	81c2      	strh	r2, [r0, #14]
 800ad46:	6183      	str	r3, [r0, #24]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	2208      	movs	r2, #8
 800ad4c:	305c      	adds	r0, #92	@ 0x5c
 800ad4e:	f000 f914 	bl	800af7a <memset>
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <std+0x58>)
 800ad54:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad56:	4b0d      	ldr	r3, [pc, #52]	@ (800ad8c <std+0x5c>)
 800ad58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad90 <std+0x60>)
 800ad5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad94 <std+0x64>)
 800ad60:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad62:	4b0d      	ldr	r3, [pc, #52]	@ (800ad98 <std+0x68>)
 800ad64:	6224      	str	r4, [r4, #32]
 800ad66:	429c      	cmp	r4, r3
 800ad68:	d006      	beq.n	800ad78 <std+0x48>
 800ad6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad6e:	4294      	cmp	r4, r2
 800ad70:	d002      	beq.n	800ad78 <std+0x48>
 800ad72:	33d0      	adds	r3, #208	@ 0xd0
 800ad74:	429c      	cmp	r4, r3
 800ad76:	d105      	bne.n	800ad84 <std+0x54>
 800ad78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad80:	f000 b978 	b.w	800b074 <__retarget_lock_init_recursive>
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	bf00      	nop
 800ad88:	0800aef5 	.word	0x0800aef5
 800ad8c:	0800af17 	.word	0x0800af17
 800ad90:	0800af4f 	.word	0x0800af4f
 800ad94:	0800af73 	.word	0x0800af73
 800ad98:	20000870 	.word	0x20000870

0800ad9c <stdio_exit_handler>:
 800ad9c:	4a02      	ldr	r2, [pc, #8]	@ (800ada8 <stdio_exit_handler+0xc>)
 800ad9e:	4903      	ldr	r1, [pc, #12]	@ (800adac <stdio_exit_handler+0x10>)
 800ada0:	4803      	ldr	r0, [pc, #12]	@ (800adb0 <stdio_exit_handler+0x14>)
 800ada2:	f000 b869 	b.w	800ae78 <_fwalk_sglue>
 800ada6:	bf00      	nop
 800ada8:	20000010 	.word	0x20000010
 800adac:	0800c9d5 	.word	0x0800c9d5
 800adb0:	20000020 	.word	0x20000020

0800adb4 <cleanup_stdio>:
 800adb4:	6841      	ldr	r1, [r0, #4]
 800adb6:	4b0c      	ldr	r3, [pc, #48]	@ (800ade8 <cleanup_stdio+0x34>)
 800adb8:	4299      	cmp	r1, r3
 800adba:	b510      	push	{r4, lr}
 800adbc:	4604      	mov	r4, r0
 800adbe:	d001      	beq.n	800adc4 <cleanup_stdio+0x10>
 800adc0:	f001 fe08 	bl	800c9d4 <_fflush_r>
 800adc4:	68a1      	ldr	r1, [r4, #8]
 800adc6:	4b09      	ldr	r3, [pc, #36]	@ (800adec <cleanup_stdio+0x38>)
 800adc8:	4299      	cmp	r1, r3
 800adca:	d002      	beq.n	800add2 <cleanup_stdio+0x1e>
 800adcc:	4620      	mov	r0, r4
 800adce:	f001 fe01 	bl	800c9d4 <_fflush_r>
 800add2:	68e1      	ldr	r1, [r4, #12]
 800add4:	4b06      	ldr	r3, [pc, #24]	@ (800adf0 <cleanup_stdio+0x3c>)
 800add6:	4299      	cmp	r1, r3
 800add8:	d004      	beq.n	800ade4 <cleanup_stdio+0x30>
 800adda:	4620      	mov	r0, r4
 800addc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ade0:	f001 bdf8 	b.w	800c9d4 <_fflush_r>
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	bf00      	nop
 800ade8:	20000870 	.word	0x20000870
 800adec:	200008d8 	.word	0x200008d8
 800adf0:	20000940 	.word	0x20000940

0800adf4 <global_stdio_init.part.0>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae24 <global_stdio_init.part.0+0x30>)
 800adf8:	4c0b      	ldr	r4, [pc, #44]	@ (800ae28 <global_stdio_init.part.0+0x34>)
 800adfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ae2c <global_stdio_init.part.0+0x38>)
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	4620      	mov	r0, r4
 800ae00:	2200      	movs	r2, #0
 800ae02:	2104      	movs	r1, #4
 800ae04:	f7ff ff94 	bl	800ad30 <std>
 800ae08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	2109      	movs	r1, #9
 800ae10:	f7ff ff8e 	bl	800ad30 <std>
 800ae14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae18:	2202      	movs	r2, #2
 800ae1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae1e:	2112      	movs	r1, #18
 800ae20:	f7ff bf86 	b.w	800ad30 <std>
 800ae24:	200009a8 	.word	0x200009a8
 800ae28:	20000870 	.word	0x20000870
 800ae2c:	0800ad9d 	.word	0x0800ad9d

0800ae30 <__sfp_lock_acquire>:
 800ae30:	4801      	ldr	r0, [pc, #4]	@ (800ae38 <__sfp_lock_acquire+0x8>)
 800ae32:	f000 b920 	b.w	800b076 <__retarget_lock_acquire_recursive>
 800ae36:	bf00      	nop
 800ae38:	200009b1 	.word	0x200009b1

0800ae3c <__sfp_lock_release>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	@ (800ae44 <__sfp_lock_release+0x8>)
 800ae3e:	f000 b91b 	b.w	800b078 <__retarget_lock_release_recursive>
 800ae42:	bf00      	nop
 800ae44:	200009b1 	.word	0x200009b1

0800ae48 <__sinit>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	f7ff fff0 	bl	800ae30 <__sfp_lock_acquire>
 800ae50:	6a23      	ldr	r3, [r4, #32]
 800ae52:	b11b      	cbz	r3, 800ae5c <__sinit+0x14>
 800ae54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae58:	f7ff bff0 	b.w	800ae3c <__sfp_lock_release>
 800ae5c:	4b04      	ldr	r3, [pc, #16]	@ (800ae70 <__sinit+0x28>)
 800ae5e:	6223      	str	r3, [r4, #32]
 800ae60:	4b04      	ldr	r3, [pc, #16]	@ (800ae74 <__sinit+0x2c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1f5      	bne.n	800ae54 <__sinit+0xc>
 800ae68:	f7ff ffc4 	bl	800adf4 <global_stdio_init.part.0>
 800ae6c:	e7f2      	b.n	800ae54 <__sinit+0xc>
 800ae6e:	bf00      	nop
 800ae70:	0800adb5 	.word	0x0800adb5
 800ae74:	200009a8 	.word	0x200009a8

0800ae78 <_fwalk_sglue>:
 800ae78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	4688      	mov	r8, r1
 800ae80:	4614      	mov	r4, r2
 800ae82:	2600      	movs	r6, #0
 800ae84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae88:	f1b9 0901 	subs.w	r9, r9, #1
 800ae8c:	d505      	bpl.n	800ae9a <_fwalk_sglue+0x22>
 800ae8e:	6824      	ldr	r4, [r4, #0]
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	d1f7      	bne.n	800ae84 <_fwalk_sglue+0xc>
 800ae94:	4630      	mov	r0, r6
 800ae96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d907      	bls.n	800aeb0 <_fwalk_sglue+0x38>
 800aea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aea4:	3301      	adds	r3, #1
 800aea6:	d003      	beq.n	800aeb0 <_fwalk_sglue+0x38>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4638      	mov	r0, r7
 800aeac:	47c0      	blx	r8
 800aeae:	4306      	orrs	r6, r0
 800aeb0:	3568      	adds	r5, #104	@ 0x68
 800aeb2:	e7e9      	b.n	800ae88 <_fwalk_sglue+0x10>

0800aeb4 <siprintf>:
 800aeb4:	b40e      	push	{r1, r2, r3}
 800aeb6:	b500      	push	{lr}
 800aeb8:	b09c      	sub	sp, #112	@ 0x70
 800aeba:	ab1d      	add	r3, sp, #116	@ 0x74
 800aebc:	9002      	str	r0, [sp, #8]
 800aebe:	9006      	str	r0, [sp, #24]
 800aec0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aec4:	4809      	ldr	r0, [pc, #36]	@ (800aeec <siprintf+0x38>)
 800aec6:	9107      	str	r1, [sp, #28]
 800aec8:	9104      	str	r1, [sp, #16]
 800aeca:	4909      	ldr	r1, [pc, #36]	@ (800aef0 <siprintf+0x3c>)
 800aecc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed0:	9105      	str	r1, [sp, #20]
 800aed2:	6800      	ldr	r0, [r0, #0]
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	a902      	add	r1, sp, #8
 800aed8:	f001 fbfc 	bl	800c6d4 <_svfiprintf_r>
 800aedc:	9b02      	ldr	r3, [sp, #8]
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
 800aee2:	b01c      	add	sp, #112	@ 0x70
 800aee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee8:	b003      	add	sp, #12
 800aeea:	4770      	bx	lr
 800aeec:	2000001c 	.word	0x2000001c
 800aef0:	ffff0208 	.word	0xffff0208

0800aef4 <__sread>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	460c      	mov	r4, r1
 800aef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefc:	f000 f86c 	bl	800afd8 <_read_r>
 800af00:	2800      	cmp	r0, #0
 800af02:	bfab      	itete	ge
 800af04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af06:	89a3      	ldrhlt	r3, [r4, #12]
 800af08:	181b      	addge	r3, r3, r0
 800af0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af0e:	bfac      	ite	ge
 800af10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af12:	81a3      	strhlt	r3, [r4, #12]
 800af14:	bd10      	pop	{r4, pc}

0800af16 <__swrite>:
 800af16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1a:	461f      	mov	r7, r3
 800af1c:	898b      	ldrh	r3, [r1, #12]
 800af1e:	05db      	lsls	r3, r3, #23
 800af20:	4605      	mov	r5, r0
 800af22:	460c      	mov	r4, r1
 800af24:	4616      	mov	r6, r2
 800af26:	d505      	bpl.n	800af34 <__swrite+0x1e>
 800af28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2c:	2302      	movs	r3, #2
 800af2e:	2200      	movs	r2, #0
 800af30:	f000 f840 	bl	800afb4 <_lseek_r>
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af3e:	81a3      	strh	r3, [r4, #12]
 800af40:	4632      	mov	r2, r6
 800af42:	463b      	mov	r3, r7
 800af44:	4628      	mov	r0, r5
 800af46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af4a:	f000 b857 	b.w	800affc <_write_r>

0800af4e <__sseek>:
 800af4e:	b510      	push	{r4, lr}
 800af50:	460c      	mov	r4, r1
 800af52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af56:	f000 f82d 	bl	800afb4 <_lseek_r>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	bf15      	itete	ne
 800af60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af6a:	81a3      	strheq	r3, [r4, #12]
 800af6c:	bf18      	it	ne
 800af6e:	81a3      	strhne	r3, [r4, #12]
 800af70:	bd10      	pop	{r4, pc}

0800af72 <__sclose>:
 800af72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af76:	f000 b80d 	b.w	800af94 <_close_r>

0800af7a <memset>:
 800af7a:	4402      	add	r2, r0
 800af7c:	4603      	mov	r3, r0
 800af7e:	4293      	cmp	r3, r2
 800af80:	d100      	bne.n	800af84 <memset+0xa>
 800af82:	4770      	bx	lr
 800af84:	f803 1b01 	strb.w	r1, [r3], #1
 800af88:	e7f9      	b.n	800af7e <memset+0x4>
	...

0800af8c <_localeconv_r>:
 800af8c:	4800      	ldr	r0, [pc, #0]	@ (800af90 <_localeconv_r+0x4>)
 800af8e:	4770      	bx	lr
 800af90:	2000015c 	.word	0x2000015c

0800af94 <_close_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4d06      	ldr	r5, [pc, #24]	@ (800afb0 <_close_r+0x1c>)
 800af98:	2300      	movs	r3, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	602b      	str	r3, [r5, #0]
 800afa0:	f7f7 fe80 	bl	8002ca4 <_close>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_close_r+0x1a>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_close_r+0x1a>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	200009ac 	.word	0x200009ac

0800afb4 <_lseek_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d07      	ldr	r5, [pc, #28]	@ (800afd4 <_lseek_r+0x20>)
 800afb8:	4604      	mov	r4, r0
 800afba:	4608      	mov	r0, r1
 800afbc:	4611      	mov	r1, r2
 800afbe:	2200      	movs	r2, #0
 800afc0:	602a      	str	r2, [r5, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	f7f7 fe95 	bl	8002cf2 <_lseek>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_lseek_r+0x1e>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_lseek_r+0x1e>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	200009ac 	.word	0x200009ac

0800afd8 <_read_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	@ (800aff8 <_read_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f7 fe23 	bl	8002c32 <_read>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_read_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_read_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	200009ac 	.word	0x200009ac

0800affc <_write_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d07      	ldr	r5, [pc, #28]	@ (800b01c <_write_r+0x20>)
 800b000:	4604      	mov	r4, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	2200      	movs	r2, #0
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f7 fe2e 	bl	8002c6c <_write>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_write_r+0x1e>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_write_r+0x1e>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	200009ac 	.word	0x200009ac

0800b020 <__errno>:
 800b020:	4b01      	ldr	r3, [pc, #4]	@ (800b028 <__errno+0x8>)
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	2000001c 	.word	0x2000001c

0800b02c <__libc_init_array>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4d0d      	ldr	r5, [pc, #52]	@ (800b064 <__libc_init_array+0x38>)
 800b030:	4c0d      	ldr	r4, [pc, #52]	@ (800b068 <__libc_init_array+0x3c>)
 800b032:	1b64      	subs	r4, r4, r5
 800b034:	10a4      	asrs	r4, r4, #2
 800b036:	2600      	movs	r6, #0
 800b038:	42a6      	cmp	r6, r4
 800b03a:	d109      	bne.n	800b050 <__libc_init_array+0x24>
 800b03c:	4d0b      	ldr	r5, [pc, #44]	@ (800b06c <__libc_init_array+0x40>)
 800b03e:	4c0c      	ldr	r4, [pc, #48]	@ (800b070 <__libc_init_array+0x44>)
 800b040:	f002 f866 	bl	800d110 <_init>
 800b044:	1b64      	subs	r4, r4, r5
 800b046:	10a4      	asrs	r4, r4, #2
 800b048:	2600      	movs	r6, #0
 800b04a:	42a6      	cmp	r6, r4
 800b04c:	d105      	bne.n	800b05a <__libc_init_array+0x2e>
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	f855 3b04 	ldr.w	r3, [r5], #4
 800b054:	4798      	blx	r3
 800b056:	3601      	adds	r6, #1
 800b058:	e7ee      	b.n	800b038 <__libc_init_array+0xc>
 800b05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05e:	4798      	blx	r3
 800b060:	3601      	adds	r6, #1
 800b062:	e7f2      	b.n	800b04a <__libc_init_array+0x1e>
 800b064:	0800d538 	.word	0x0800d538
 800b068:	0800d538 	.word	0x0800d538
 800b06c:	0800d538 	.word	0x0800d538
 800b070:	0800d53c 	.word	0x0800d53c

0800b074 <__retarget_lock_init_recursive>:
 800b074:	4770      	bx	lr

0800b076 <__retarget_lock_acquire_recursive>:
 800b076:	4770      	bx	lr

0800b078 <__retarget_lock_release_recursive>:
 800b078:	4770      	bx	lr

0800b07a <quorem>:
 800b07a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07e:	6903      	ldr	r3, [r0, #16]
 800b080:	690c      	ldr	r4, [r1, #16]
 800b082:	42a3      	cmp	r3, r4
 800b084:	4607      	mov	r7, r0
 800b086:	db7e      	blt.n	800b186 <quorem+0x10c>
 800b088:	3c01      	subs	r4, #1
 800b08a:	f101 0814 	add.w	r8, r1, #20
 800b08e:	00a3      	lsls	r3, r4, #2
 800b090:	f100 0514 	add.w	r5, r0, #20
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0b0:	d32e      	bcc.n	800b110 <quorem+0x96>
 800b0b2:	f04f 0a00 	mov.w	sl, #0
 800b0b6:	46c4      	mov	ip, r8
 800b0b8:	46ae      	mov	lr, r5
 800b0ba:	46d3      	mov	fp, sl
 800b0bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0c0:	b298      	uxth	r0, r3
 800b0c2:	fb06 a000 	mla	r0, r6, r0, sl
 800b0c6:	0c02      	lsrs	r2, r0, #16
 800b0c8:	0c1b      	lsrs	r3, r3, #16
 800b0ca:	fb06 2303 	mla	r3, r6, r3, r2
 800b0ce:	f8de 2000 	ldr.w	r2, [lr]
 800b0d2:	b280      	uxth	r0, r0
 800b0d4:	b292      	uxth	r2, r2
 800b0d6:	1a12      	subs	r2, r2, r0
 800b0d8:	445a      	add	r2, fp
 800b0da:	f8de 0000 	ldr.w	r0, [lr]
 800b0de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0ec:	b292      	uxth	r2, r2
 800b0ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0f2:	45e1      	cmp	r9, ip
 800b0f4:	f84e 2b04 	str.w	r2, [lr], #4
 800b0f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0fc:	d2de      	bcs.n	800b0bc <quorem+0x42>
 800b0fe:	9b00      	ldr	r3, [sp, #0]
 800b100:	58eb      	ldr	r3, [r5, r3]
 800b102:	b92b      	cbnz	r3, 800b110 <quorem+0x96>
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	3b04      	subs	r3, #4
 800b108:	429d      	cmp	r5, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	d32f      	bcc.n	800b16e <quorem+0xf4>
 800b10e:	613c      	str	r4, [r7, #16]
 800b110:	4638      	mov	r0, r7
 800b112:	f001 f97b 	bl	800c40c <__mcmp>
 800b116:	2800      	cmp	r0, #0
 800b118:	db25      	blt.n	800b166 <quorem+0xec>
 800b11a:	4629      	mov	r1, r5
 800b11c:	2000      	movs	r0, #0
 800b11e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b122:	f8d1 c000 	ldr.w	ip, [r1]
 800b126:	fa1f fe82 	uxth.w	lr, r2
 800b12a:	fa1f f38c 	uxth.w	r3, ip
 800b12e:	eba3 030e 	sub.w	r3, r3, lr
 800b132:	4403      	add	r3, r0
 800b134:	0c12      	lsrs	r2, r2, #16
 800b136:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b13a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b13e:	b29b      	uxth	r3, r3
 800b140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b144:	45c1      	cmp	r9, r8
 800b146:	f841 3b04 	str.w	r3, [r1], #4
 800b14a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b14e:	d2e6      	bcs.n	800b11e <quorem+0xa4>
 800b150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b154:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b158:	b922      	cbnz	r2, 800b164 <quorem+0xea>
 800b15a:	3b04      	subs	r3, #4
 800b15c:	429d      	cmp	r5, r3
 800b15e:	461a      	mov	r2, r3
 800b160:	d30b      	bcc.n	800b17a <quorem+0x100>
 800b162:	613c      	str	r4, [r7, #16]
 800b164:	3601      	adds	r6, #1
 800b166:	4630      	mov	r0, r6
 800b168:	b003      	add	sp, #12
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	6812      	ldr	r2, [r2, #0]
 800b170:	3b04      	subs	r3, #4
 800b172:	2a00      	cmp	r2, #0
 800b174:	d1cb      	bne.n	800b10e <quorem+0x94>
 800b176:	3c01      	subs	r4, #1
 800b178:	e7c6      	b.n	800b108 <quorem+0x8e>
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	3b04      	subs	r3, #4
 800b17e:	2a00      	cmp	r2, #0
 800b180:	d1ef      	bne.n	800b162 <quorem+0xe8>
 800b182:	3c01      	subs	r4, #1
 800b184:	e7ea      	b.n	800b15c <quorem+0xe2>
 800b186:	2000      	movs	r0, #0
 800b188:	e7ee      	b.n	800b168 <quorem+0xee>
 800b18a:	0000      	movs	r0, r0
 800b18c:	0000      	movs	r0, r0
	...

0800b190 <_dtoa_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	69c7      	ldr	r7, [r0, #28]
 800b196:	b099      	sub	sp, #100	@ 0x64
 800b198:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b19c:	ec55 4b10 	vmov	r4, r5, d0
 800b1a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1a4:	4683      	mov	fp, r0
 800b1a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1aa:	b97f      	cbnz	r7, 800b1cc <_dtoa_r+0x3c>
 800b1ac:	2010      	movs	r0, #16
 800b1ae:	f000 fdfd 	bl	800bdac <malloc>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1b8:	b920      	cbnz	r0, 800b1c4 <_dtoa_r+0x34>
 800b1ba:	4ba7      	ldr	r3, [pc, #668]	@ (800b458 <_dtoa_r+0x2c8>)
 800b1bc:	21ef      	movs	r1, #239	@ 0xef
 800b1be:	48a7      	ldr	r0, [pc, #668]	@ (800b45c <_dtoa_r+0x2cc>)
 800b1c0:	f001 fc68 	bl	800ca94 <__assert_func>
 800b1c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b1c8:	6007      	str	r7, [r0, #0]
 800b1ca:	60c7      	str	r7, [r0, #12]
 800b1cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1d0:	6819      	ldr	r1, [r3, #0]
 800b1d2:	b159      	cbz	r1, 800b1ec <_dtoa_r+0x5c>
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	604a      	str	r2, [r1, #4]
 800b1d8:	2301      	movs	r3, #1
 800b1da:	4093      	lsls	r3, r2
 800b1dc:	608b      	str	r3, [r1, #8]
 800b1de:	4658      	mov	r0, fp
 800b1e0:	f000 feda 	bl	800bf98 <_Bfree>
 800b1e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	1e2b      	subs	r3, r5, #0
 800b1ee:	bfb9      	ittee	lt
 800b1f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1f4:	9303      	strlt	r3, [sp, #12]
 800b1f6:	2300      	movge	r3, #0
 800b1f8:	6033      	strge	r3, [r6, #0]
 800b1fa:	9f03      	ldr	r7, [sp, #12]
 800b1fc:	4b98      	ldr	r3, [pc, #608]	@ (800b460 <_dtoa_r+0x2d0>)
 800b1fe:	bfbc      	itt	lt
 800b200:	2201      	movlt	r2, #1
 800b202:	6032      	strlt	r2, [r6, #0]
 800b204:	43bb      	bics	r3, r7
 800b206:	d112      	bne.n	800b22e <_dtoa_r+0x9e>
 800b208:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b20a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b214:	4323      	orrs	r3, r4
 800b216:	f000 854d 	beq.w	800bcb4 <_dtoa_r+0xb24>
 800b21a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b21c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b474 <_dtoa_r+0x2e4>
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 854f 	beq.w	800bcc4 <_dtoa_r+0xb34>
 800b226:	f10a 0303 	add.w	r3, sl, #3
 800b22a:	f000 bd49 	b.w	800bcc0 <_dtoa_r+0xb30>
 800b22e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	ec51 0b17 	vmov	r0, r1, d7
 800b238:	2300      	movs	r3, #0
 800b23a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b23e:	f7f5 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800b242:	4680      	mov	r8, r0
 800b244:	b158      	cbz	r0, 800b25e <_dtoa_r+0xce>
 800b246:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b248:	2301      	movs	r3, #1
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b24e:	b113      	cbz	r3, 800b256 <_dtoa_r+0xc6>
 800b250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b252:	4b84      	ldr	r3, [pc, #528]	@ (800b464 <_dtoa_r+0x2d4>)
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b478 <_dtoa_r+0x2e8>
 800b25a:	f000 bd33 	b.w	800bcc4 <_dtoa_r+0xb34>
 800b25e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b262:	aa16      	add	r2, sp, #88	@ 0x58
 800b264:	a917      	add	r1, sp, #92	@ 0x5c
 800b266:	4658      	mov	r0, fp
 800b268:	f001 f980 	bl	800c56c <__d2b>
 800b26c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b270:	4681      	mov	r9, r0
 800b272:	2e00      	cmp	r6, #0
 800b274:	d077      	beq.n	800b366 <_dtoa_r+0x1d6>
 800b276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b278:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b27c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b28c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b290:	4619      	mov	r1, r3
 800b292:	2200      	movs	r2, #0
 800b294:	4b74      	ldr	r3, [pc, #464]	@ (800b468 <_dtoa_r+0x2d8>)
 800b296:	f7f4 fff7 	bl	8000288 <__aeabi_dsub>
 800b29a:	a369      	add	r3, pc, #420	@ (adr r3, 800b440 <_dtoa_r+0x2b0>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f5 f9aa 	bl	80005f8 <__aeabi_dmul>
 800b2a4:	a368      	add	r3, pc, #416	@ (adr r3, 800b448 <_dtoa_r+0x2b8>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f4 ffef 	bl	800028c <__adddf3>
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	f7f5 f936 	bl	8000524 <__aeabi_i2d>
 800b2b8:	a365      	add	r3, pc, #404	@ (adr r3, 800b450 <_dtoa_r+0x2c0>)
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	f7f5 f99b 	bl	80005f8 <__aeabi_dmul>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f4 ffdf 	bl	800028c <__adddf3>
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	f7f5 fc41 	bl	8000b58 <__aeabi_d2iz>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4607      	mov	r7, r0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4620      	mov	r0, r4
 800b2de:	4629      	mov	r1, r5
 800b2e0:	f7f5 fbfc 	bl	8000adc <__aeabi_dcmplt>
 800b2e4:	b140      	cbz	r0, 800b2f8 <_dtoa_r+0x168>
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	f7f5 f91c 	bl	8000524 <__aeabi_i2d>
 800b2ec:	4622      	mov	r2, r4
 800b2ee:	462b      	mov	r3, r5
 800b2f0:	f7f5 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2f4:	b900      	cbnz	r0, 800b2f8 <_dtoa_r+0x168>
 800b2f6:	3f01      	subs	r7, #1
 800b2f8:	2f16      	cmp	r7, #22
 800b2fa:	d851      	bhi.n	800b3a0 <_dtoa_r+0x210>
 800b2fc:	4b5b      	ldr	r3, [pc, #364]	@ (800b46c <_dtoa_r+0x2dc>)
 800b2fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b30a:	f7f5 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d048      	beq.n	800b3a4 <_dtoa_r+0x214>
 800b312:	3f01      	subs	r7, #1
 800b314:	2300      	movs	r3, #0
 800b316:	9312      	str	r3, [sp, #72]	@ 0x48
 800b318:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b31a:	1b9b      	subs	r3, r3, r6
 800b31c:	1e5a      	subs	r2, r3, #1
 800b31e:	bf44      	itt	mi
 800b320:	f1c3 0801 	rsbmi	r8, r3, #1
 800b324:	2300      	movmi	r3, #0
 800b326:	9208      	str	r2, [sp, #32]
 800b328:	bf54      	ite	pl
 800b32a:	f04f 0800 	movpl.w	r8, #0
 800b32e:	9308      	strmi	r3, [sp, #32]
 800b330:	2f00      	cmp	r7, #0
 800b332:	db39      	blt.n	800b3a8 <_dtoa_r+0x218>
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b338:	443b      	add	r3, r7
 800b33a:	9308      	str	r3, [sp, #32]
 800b33c:	2300      	movs	r3, #0
 800b33e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b342:	2b09      	cmp	r3, #9
 800b344:	d864      	bhi.n	800b410 <_dtoa_r+0x280>
 800b346:	2b05      	cmp	r3, #5
 800b348:	bfc4      	itt	gt
 800b34a:	3b04      	subgt	r3, #4
 800b34c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b350:	f1a3 0302 	sub.w	r3, r3, #2
 800b354:	bfcc      	ite	gt
 800b356:	2400      	movgt	r4, #0
 800b358:	2401      	movle	r4, #1
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d863      	bhi.n	800b426 <_dtoa_r+0x296>
 800b35e:	e8df f003 	tbb	[pc, r3]
 800b362:	372a      	.short	0x372a
 800b364:	5535      	.short	0x5535
 800b366:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b36a:	441e      	add	r6, r3
 800b36c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b370:	2b20      	cmp	r3, #32
 800b372:	bfc1      	itttt	gt
 800b374:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b378:	409f      	lslgt	r7, r3
 800b37a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b37e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b382:	bfd6      	itet	le
 800b384:	f1c3 0320 	rsble	r3, r3, #32
 800b388:	ea47 0003 	orrgt.w	r0, r7, r3
 800b38c:	fa04 f003 	lslle.w	r0, r4, r3
 800b390:	f7f5 f8b8 	bl	8000504 <__aeabi_ui2d>
 800b394:	2201      	movs	r2, #1
 800b396:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b39a:	3e01      	subs	r6, #1
 800b39c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b39e:	e777      	b.n	800b290 <_dtoa_r+0x100>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e7b8      	b.n	800b316 <_dtoa_r+0x186>
 800b3a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3a6:	e7b7      	b.n	800b318 <_dtoa_r+0x188>
 800b3a8:	427b      	negs	r3, r7
 800b3aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	eba8 0807 	sub.w	r8, r8, r7
 800b3b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3b4:	e7c4      	b.n	800b340 <_dtoa_r+0x1b0>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dc35      	bgt.n	800b42c <_dtoa_r+0x29c>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	9307      	str	r3, [sp, #28]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3ca:	e00b      	b.n	800b3e4 <_dtoa_r+0x254>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e7f3      	b.n	800b3b8 <_dtoa_r+0x228>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3d6:	18fb      	adds	r3, r7, r3
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	9307      	str	r3, [sp, #28]
 800b3e0:	bfb8      	it	lt
 800b3e2:	2301      	movlt	r3, #1
 800b3e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	2204      	movs	r2, #4
 800b3ec:	f102 0514 	add.w	r5, r2, #20
 800b3f0:	429d      	cmp	r5, r3
 800b3f2:	d91f      	bls.n	800b434 <_dtoa_r+0x2a4>
 800b3f4:	6041      	str	r1, [r0, #4]
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	f000 fd8e 	bl	800bf18 <_Balloc>
 800b3fc:	4682      	mov	sl, r0
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d13c      	bne.n	800b47c <_dtoa_r+0x2ec>
 800b402:	4b1b      	ldr	r3, [pc, #108]	@ (800b470 <_dtoa_r+0x2e0>)
 800b404:	4602      	mov	r2, r0
 800b406:	f240 11af 	movw	r1, #431	@ 0x1af
 800b40a:	e6d8      	b.n	800b1be <_dtoa_r+0x2e>
 800b40c:	2301      	movs	r3, #1
 800b40e:	e7e0      	b.n	800b3d2 <_dtoa_r+0x242>
 800b410:	2401      	movs	r4, #1
 800b412:	2300      	movs	r3, #0
 800b414:	9309      	str	r3, [sp, #36]	@ 0x24
 800b416:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b418:	f04f 33ff 	mov.w	r3, #4294967295
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	9307      	str	r3, [sp, #28]
 800b420:	2200      	movs	r2, #0
 800b422:	2312      	movs	r3, #18
 800b424:	e7d0      	b.n	800b3c8 <_dtoa_r+0x238>
 800b426:	2301      	movs	r3, #1
 800b428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b42a:	e7f5      	b.n	800b418 <_dtoa_r+0x288>
 800b42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	9307      	str	r3, [sp, #28]
 800b432:	e7d7      	b.n	800b3e4 <_dtoa_r+0x254>
 800b434:	3101      	adds	r1, #1
 800b436:	0052      	lsls	r2, r2, #1
 800b438:	e7d8      	b.n	800b3ec <_dtoa_r+0x25c>
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w
 800b440:	636f4361 	.word	0x636f4361
 800b444:	3fd287a7 	.word	0x3fd287a7
 800b448:	8b60c8b3 	.word	0x8b60c8b3
 800b44c:	3fc68a28 	.word	0x3fc68a28
 800b450:	509f79fb 	.word	0x509f79fb
 800b454:	3fd34413 	.word	0x3fd34413
 800b458:	0800d201 	.word	0x0800d201
 800b45c:	0800d218 	.word	0x0800d218
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	0800d1d1 	.word	0x0800d1d1
 800b468:	3ff80000 	.word	0x3ff80000
 800b46c:	0800d310 	.word	0x0800d310
 800b470:	0800d270 	.word	0x0800d270
 800b474:	0800d1fd 	.word	0x0800d1fd
 800b478:	0800d1d0 	.word	0x0800d1d0
 800b47c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b480:	6018      	str	r0, [r3, #0]
 800b482:	9b07      	ldr	r3, [sp, #28]
 800b484:	2b0e      	cmp	r3, #14
 800b486:	f200 80a4 	bhi.w	800b5d2 <_dtoa_r+0x442>
 800b48a:	2c00      	cmp	r4, #0
 800b48c:	f000 80a1 	beq.w	800b5d2 <_dtoa_r+0x442>
 800b490:	2f00      	cmp	r7, #0
 800b492:	dd33      	ble.n	800b4fc <_dtoa_r+0x36c>
 800b494:	4bad      	ldr	r3, [pc, #692]	@ (800b74c <_dtoa_r+0x5bc>)
 800b496:	f007 020f 	and.w	r2, r7, #15
 800b49a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b49e:	ed93 7b00 	vldr	d7, [r3]
 800b4a2:	05f8      	lsls	r0, r7, #23
 800b4a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4ac:	d516      	bpl.n	800b4dc <_dtoa_r+0x34c>
 800b4ae:	4ba8      	ldr	r3, [pc, #672]	@ (800b750 <_dtoa_r+0x5c0>)
 800b4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4b8:	f7f5 f9c8 	bl	800084c <__aeabi_ddiv>
 800b4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c0:	f004 040f 	and.w	r4, r4, #15
 800b4c4:	2603      	movs	r6, #3
 800b4c6:	4da2      	ldr	r5, [pc, #648]	@ (800b750 <_dtoa_r+0x5c0>)
 800b4c8:	b954      	cbnz	r4, 800b4e0 <_dtoa_r+0x350>
 800b4ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4d2:	f7f5 f9bb 	bl	800084c <__aeabi_ddiv>
 800b4d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4da:	e028      	b.n	800b52e <_dtoa_r+0x39e>
 800b4dc:	2602      	movs	r6, #2
 800b4de:	e7f2      	b.n	800b4c6 <_dtoa_r+0x336>
 800b4e0:	07e1      	lsls	r1, r4, #31
 800b4e2:	d508      	bpl.n	800b4f6 <_dtoa_r+0x366>
 800b4e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4ec:	f7f5 f884 	bl	80005f8 <__aeabi_dmul>
 800b4f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4f4:	3601      	adds	r6, #1
 800b4f6:	1064      	asrs	r4, r4, #1
 800b4f8:	3508      	adds	r5, #8
 800b4fa:	e7e5      	b.n	800b4c8 <_dtoa_r+0x338>
 800b4fc:	f000 80d2 	beq.w	800b6a4 <_dtoa_r+0x514>
 800b500:	427c      	negs	r4, r7
 800b502:	4b92      	ldr	r3, [pc, #584]	@ (800b74c <_dtoa_r+0x5bc>)
 800b504:	4d92      	ldr	r5, [pc, #584]	@ (800b750 <_dtoa_r+0x5c0>)
 800b506:	f004 020f 	and.w	r2, r4, #15
 800b50a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b516:	f7f5 f86f 	bl	80005f8 <__aeabi_dmul>
 800b51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51e:	1124      	asrs	r4, r4, #4
 800b520:	2300      	movs	r3, #0
 800b522:	2602      	movs	r6, #2
 800b524:	2c00      	cmp	r4, #0
 800b526:	f040 80b2 	bne.w	800b68e <_dtoa_r+0x4fe>
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1d3      	bne.n	800b4d6 <_dtoa_r+0x346>
 800b52e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b530:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 80b7 	beq.w	800b6a8 <_dtoa_r+0x518>
 800b53a:	4b86      	ldr	r3, [pc, #536]	@ (800b754 <_dtoa_r+0x5c4>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f5 facb 	bl	8000adc <__aeabi_dcmplt>
 800b546:	2800      	cmp	r0, #0
 800b548:	f000 80ae 	beq.w	800b6a8 <_dtoa_r+0x518>
 800b54c:	9b07      	ldr	r3, [sp, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 80aa 	beq.w	800b6a8 <_dtoa_r+0x518>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	dd37      	ble.n	800b5ca <_dtoa_r+0x43a>
 800b55a:	1e7b      	subs	r3, r7, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	4620      	mov	r0, r4
 800b560:	4b7d      	ldr	r3, [pc, #500]	@ (800b758 <_dtoa_r+0x5c8>)
 800b562:	2200      	movs	r2, #0
 800b564:	4629      	mov	r1, r5
 800b566:	f7f5 f847 	bl	80005f8 <__aeabi_dmul>
 800b56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b56e:	9c00      	ldr	r4, [sp, #0]
 800b570:	3601      	adds	r6, #1
 800b572:	4630      	mov	r0, r6
 800b574:	f7f4 ffd6 	bl	8000524 <__aeabi_i2d>
 800b578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	4b76      	ldr	r3, [pc, #472]	@ (800b75c <_dtoa_r+0x5cc>)
 800b582:	2200      	movs	r2, #0
 800b584:	f7f4 fe82 	bl	800028c <__adddf3>
 800b588:	4605      	mov	r5, r0
 800b58a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b58e:	2c00      	cmp	r4, #0
 800b590:	f040 808d 	bne.w	800b6ae <_dtoa_r+0x51e>
 800b594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b598:	4b71      	ldr	r3, [pc, #452]	@ (800b760 <_dtoa_r+0x5d0>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	f7f4 fe74 	bl	8000288 <__aeabi_dsub>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4633      	mov	r3, r6
 800b5ac:	f7f5 fab4 	bl	8000b18 <__aeabi_dcmpgt>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f040 828b 	bne.w	800bacc <_dtoa_r+0x93c>
 800b5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ba:	462a      	mov	r2, r5
 800b5bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b5c0:	f7f5 fa8c 	bl	8000adc <__aeabi_dcmplt>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	f040 8128 	bne.w	800b81a <_dtoa_r+0x68a>
 800b5ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b5ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b5d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f2c0 815a 	blt.w	800b88e <_dtoa_r+0x6fe>
 800b5da:	2f0e      	cmp	r7, #14
 800b5dc:	f300 8157 	bgt.w	800b88e <_dtoa_r+0x6fe>
 800b5e0:	4b5a      	ldr	r3, [pc, #360]	@ (800b74c <_dtoa_r+0x5bc>)
 800b5e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5e6:	ed93 7b00 	vldr	d7, [r3]
 800b5ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	ed8d 7b00 	vstr	d7, [sp]
 800b5f2:	da03      	bge.n	800b5fc <_dtoa_r+0x46c>
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f340 8101 	ble.w	800b7fe <_dtoa_r+0x66e>
 800b5fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b600:	4656      	mov	r6, sl
 800b602:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b606:	4620      	mov	r0, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f5 f91f 	bl	800084c <__aeabi_ddiv>
 800b60e:	f7f5 faa3 	bl	8000b58 <__aeabi_d2iz>
 800b612:	4680      	mov	r8, r0
 800b614:	f7f4 ff86 	bl	8000524 <__aeabi_i2d>
 800b618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b61c:	f7f4 ffec 	bl	80005f8 <__aeabi_dmul>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4620      	mov	r0, r4
 800b626:	4629      	mov	r1, r5
 800b628:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b62c:	f7f4 fe2c 	bl	8000288 <__aeabi_dsub>
 800b630:	f806 4b01 	strb.w	r4, [r6], #1
 800b634:	9d07      	ldr	r5, [sp, #28]
 800b636:	eba6 040a 	sub.w	r4, r6, sl
 800b63a:	42a5      	cmp	r5, r4
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	f040 8117 	bne.w	800b872 <_dtoa_r+0x6e2>
 800b644:	f7f4 fe22 	bl	800028c <__adddf3>
 800b648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b64c:	4604      	mov	r4, r0
 800b64e:	460d      	mov	r5, r1
 800b650:	f7f5 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 800b654:	2800      	cmp	r0, #0
 800b656:	f040 80f9 	bne.w	800b84c <_dtoa_r+0x6bc>
 800b65a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f5 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 800b666:	b118      	cbz	r0, 800b670 <_dtoa_r+0x4e0>
 800b668:	f018 0f01 	tst.w	r8, #1
 800b66c:	f040 80ee 	bne.w	800b84c <_dtoa_r+0x6bc>
 800b670:	4649      	mov	r1, r9
 800b672:	4658      	mov	r0, fp
 800b674:	f000 fc90 	bl	800bf98 <_Bfree>
 800b678:	2300      	movs	r3, #0
 800b67a:	7033      	strb	r3, [r6, #0]
 800b67c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b67e:	3701      	adds	r7, #1
 800b680:	601f      	str	r7, [r3, #0]
 800b682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b684:	2b00      	cmp	r3, #0
 800b686:	f000 831d 	beq.w	800bcc4 <_dtoa_r+0xb34>
 800b68a:	601e      	str	r6, [r3, #0]
 800b68c:	e31a      	b.n	800bcc4 <_dtoa_r+0xb34>
 800b68e:	07e2      	lsls	r2, r4, #31
 800b690:	d505      	bpl.n	800b69e <_dtoa_r+0x50e>
 800b692:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b696:	f7f4 ffaf 	bl	80005f8 <__aeabi_dmul>
 800b69a:	3601      	adds	r6, #1
 800b69c:	2301      	movs	r3, #1
 800b69e:	1064      	asrs	r4, r4, #1
 800b6a0:	3508      	adds	r5, #8
 800b6a2:	e73f      	b.n	800b524 <_dtoa_r+0x394>
 800b6a4:	2602      	movs	r6, #2
 800b6a6:	e742      	b.n	800b52e <_dtoa_r+0x39e>
 800b6a8:	9c07      	ldr	r4, [sp, #28]
 800b6aa:	9704      	str	r7, [sp, #16]
 800b6ac:	e761      	b.n	800b572 <_dtoa_r+0x3e2>
 800b6ae:	4b27      	ldr	r3, [pc, #156]	@ (800b74c <_dtoa_r+0x5bc>)
 800b6b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6ba:	4454      	add	r4, sl
 800b6bc:	2900      	cmp	r1, #0
 800b6be:	d053      	beq.n	800b768 <_dtoa_r+0x5d8>
 800b6c0:	4928      	ldr	r1, [pc, #160]	@ (800b764 <_dtoa_r+0x5d4>)
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	f7f5 f8c2 	bl	800084c <__aeabi_ddiv>
 800b6c8:	4633      	mov	r3, r6
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	f7f4 fddc 	bl	8000288 <__aeabi_dsub>
 800b6d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6d4:	4656      	mov	r6, sl
 800b6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6da:	f7f5 fa3d 	bl	8000b58 <__aeabi_d2iz>
 800b6de:	4605      	mov	r5, r0
 800b6e0:	f7f4 ff20 	bl	8000524 <__aeabi_i2d>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ec:	f7f4 fdcc 	bl	8000288 <__aeabi_dsub>
 800b6f0:	3530      	adds	r5, #48	@ 0x30
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6fa:	f806 5b01 	strb.w	r5, [r6], #1
 800b6fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b702:	f7f5 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d171      	bne.n	800b7ee <_dtoa_r+0x65e>
 800b70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b70e:	4911      	ldr	r1, [pc, #68]	@ (800b754 <_dtoa_r+0x5c4>)
 800b710:	2000      	movs	r0, #0
 800b712:	f7f4 fdb9 	bl	8000288 <__aeabi_dsub>
 800b716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b71a:	f7f5 f9df 	bl	8000adc <__aeabi_dcmplt>
 800b71e:	2800      	cmp	r0, #0
 800b720:	f040 8095 	bne.w	800b84e <_dtoa_r+0x6be>
 800b724:	42a6      	cmp	r6, r4
 800b726:	f43f af50 	beq.w	800b5ca <_dtoa_r+0x43a>
 800b72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b72e:	4b0a      	ldr	r3, [pc, #40]	@ (800b758 <_dtoa_r+0x5c8>)
 800b730:	2200      	movs	r2, #0
 800b732:	f7f4 ff61 	bl	80005f8 <__aeabi_dmul>
 800b736:	4b08      	ldr	r3, [pc, #32]	@ (800b758 <_dtoa_r+0x5c8>)
 800b738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b73c:	2200      	movs	r2, #0
 800b73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b742:	f7f4 ff59 	bl	80005f8 <__aeabi_dmul>
 800b746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b74a:	e7c4      	b.n	800b6d6 <_dtoa_r+0x546>
 800b74c:	0800d310 	.word	0x0800d310
 800b750:	0800d2e8 	.word	0x0800d2e8
 800b754:	3ff00000 	.word	0x3ff00000
 800b758:	40240000 	.word	0x40240000
 800b75c:	401c0000 	.word	0x401c0000
 800b760:	40140000 	.word	0x40140000
 800b764:	3fe00000 	.word	0x3fe00000
 800b768:	4631      	mov	r1, r6
 800b76a:	4628      	mov	r0, r5
 800b76c:	f7f4 ff44 	bl	80005f8 <__aeabi_dmul>
 800b770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b774:	9415      	str	r4, [sp, #84]	@ 0x54
 800b776:	4656      	mov	r6, sl
 800b778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b77c:	f7f5 f9ec 	bl	8000b58 <__aeabi_d2iz>
 800b780:	4605      	mov	r5, r0
 800b782:	f7f4 fecf 	bl	8000524 <__aeabi_i2d>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b78e:	f7f4 fd7b 	bl	8000288 <__aeabi_dsub>
 800b792:	3530      	adds	r5, #48	@ 0x30
 800b794:	f806 5b01 	strb.w	r5, [r6], #1
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	42a6      	cmp	r6, r4
 800b79e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7a2:	f04f 0200 	mov.w	r2, #0
 800b7a6:	d124      	bne.n	800b7f2 <_dtoa_r+0x662>
 800b7a8:	4bac      	ldr	r3, [pc, #688]	@ (800ba5c <_dtoa_r+0x8cc>)
 800b7aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7ae:	f7f4 fd6d 	bl	800028c <__adddf3>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ba:	f7f5 f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d145      	bne.n	800b84e <_dtoa_r+0x6be>
 800b7c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7c6:	49a5      	ldr	r1, [pc, #660]	@ (800ba5c <_dtoa_r+0x8cc>)
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f7f4 fd5d 	bl	8000288 <__aeabi_dsub>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d6:	f7f5 f981 	bl	8000adc <__aeabi_dcmplt>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f43f aef5 	beq.w	800b5ca <_dtoa_r+0x43a>
 800b7e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b7e2:	1e73      	subs	r3, r6, #1
 800b7e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7ea:	2b30      	cmp	r3, #48	@ 0x30
 800b7ec:	d0f8      	beq.n	800b7e0 <_dtoa_r+0x650>
 800b7ee:	9f04      	ldr	r7, [sp, #16]
 800b7f0:	e73e      	b.n	800b670 <_dtoa_r+0x4e0>
 800b7f2:	4b9b      	ldr	r3, [pc, #620]	@ (800ba60 <_dtoa_r+0x8d0>)
 800b7f4:	f7f4 ff00 	bl	80005f8 <__aeabi_dmul>
 800b7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7fc:	e7bc      	b.n	800b778 <_dtoa_r+0x5e8>
 800b7fe:	d10c      	bne.n	800b81a <_dtoa_r+0x68a>
 800b800:	4b98      	ldr	r3, [pc, #608]	@ (800ba64 <_dtoa_r+0x8d4>)
 800b802:	2200      	movs	r2, #0
 800b804:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b808:	f7f4 fef6 	bl	80005f8 <__aeabi_dmul>
 800b80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b810:	f7f5 f978 	bl	8000b04 <__aeabi_dcmpge>
 800b814:	2800      	cmp	r0, #0
 800b816:	f000 8157 	beq.w	800bac8 <_dtoa_r+0x938>
 800b81a:	2400      	movs	r4, #0
 800b81c:	4625      	mov	r5, r4
 800b81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b820:	43db      	mvns	r3, r3
 800b822:	9304      	str	r3, [sp, #16]
 800b824:	4656      	mov	r6, sl
 800b826:	2700      	movs	r7, #0
 800b828:	4621      	mov	r1, r4
 800b82a:	4658      	mov	r0, fp
 800b82c:	f000 fbb4 	bl	800bf98 <_Bfree>
 800b830:	2d00      	cmp	r5, #0
 800b832:	d0dc      	beq.n	800b7ee <_dtoa_r+0x65e>
 800b834:	b12f      	cbz	r7, 800b842 <_dtoa_r+0x6b2>
 800b836:	42af      	cmp	r7, r5
 800b838:	d003      	beq.n	800b842 <_dtoa_r+0x6b2>
 800b83a:	4639      	mov	r1, r7
 800b83c:	4658      	mov	r0, fp
 800b83e:	f000 fbab 	bl	800bf98 <_Bfree>
 800b842:	4629      	mov	r1, r5
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fba7 	bl	800bf98 <_Bfree>
 800b84a:	e7d0      	b.n	800b7ee <_dtoa_r+0x65e>
 800b84c:	9704      	str	r7, [sp, #16]
 800b84e:	4633      	mov	r3, r6
 800b850:	461e      	mov	r6, r3
 800b852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b856:	2a39      	cmp	r2, #57	@ 0x39
 800b858:	d107      	bne.n	800b86a <_dtoa_r+0x6da>
 800b85a:	459a      	cmp	sl, r3
 800b85c:	d1f8      	bne.n	800b850 <_dtoa_r+0x6c0>
 800b85e:	9a04      	ldr	r2, [sp, #16]
 800b860:	3201      	adds	r2, #1
 800b862:	9204      	str	r2, [sp, #16]
 800b864:	2230      	movs	r2, #48	@ 0x30
 800b866:	f88a 2000 	strb.w	r2, [sl]
 800b86a:	781a      	ldrb	r2, [r3, #0]
 800b86c:	3201      	adds	r2, #1
 800b86e:	701a      	strb	r2, [r3, #0]
 800b870:	e7bd      	b.n	800b7ee <_dtoa_r+0x65e>
 800b872:	4b7b      	ldr	r3, [pc, #492]	@ (800ba60 <_dtoa_r+0x8d0>)
 800b874:	2200      	movs	r2, #0
 800b876:	f7f4 febf 	bl	80005f8 <__aeabi_dmul>
 800b87a:	2200      	movs	r2, #0
 800b87c:	2300      	movs	r3, #0
 800b87e:	4604      	mov	r4, r0
 800b880:	460d      	mov	r5, r1
 800b882:	f7f5 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 800b886:	2800      	cmp	r0, #0
 800b888:	f43f aebb 	beq.w	800b602 <_dtoa_r+0x472>
 800b88c:	e6f0      	b.n	800b670 <_dtoa_r+0x4e0>
 800b88e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b890:	2a00      	cmp	r2, #0
 800b892:	f000 80db 	beq.w	800ba4c <_dtoa_r+0x8bc>
 800b896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b898:	2a01      	cmp	r2, #1
 800b89a:	f300 80bf 	bgt.w	800ba1c <_dtoa_r+0x88c>
 800b89e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	f000 80b7 	beq.w	800ba14 <_dtoa_r+0x884>
 800b8a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8ac:	4646      	mov	r6, r8
 800b8ae:	9a08      	ldr	r2, [sp, #32]
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	441a      	add	r2, r3
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	4498      	add	r8, r3
 800b8b8:	9208      	str	r2, [sp, #32]
 800b8ba:	f000 fc21 	bl	800c100 <__i2b>
 800b8be:	4605      	mov	r5, r0
 800b8c0:	b15e      	cbz	r6, 800b8da <_dtoa_r+0x74a>
 800b8c2:	9b08      	ldr	r3, [sp, #32]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	dd08      	ble.n	800b8da <_dtoa_r+0x74a>
 800b8c8:	42b3      	cmp	r3, r6
 800b8ca:	9a08      	ldr	r2, [sp, #32]
 800b8cc:	bfa8      	it	ge
 800b8ce:	4633      	movge	r3, r6
 800b8d0:	eba8 0803 	sub.w	r8, r8, r3
 800b8d4:	1af6      	subs	r6, r6, r3
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	9308      	str	r3, [sp, #32]
 800b8da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8dc:	b1f3      	cbz	r3, 800b91c <_dtoa_r+0x78c>
 800b8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 80b7 	beq.w	800ba54 <_dtoa_r+0x8c4>
 800b8e6:	b18c      	cbz	r4, 800b90c <_dtoa_r+0x77c>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	4658      	mov	r0, fp
 800b8ee:	f000 fcc7 	bl	800c280 <__pow5mult>
 800b8f2:	464a      	mov	r2, r9
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	4658      	mov	r0, fp
 800b8fa:	f000 fc17 	bl	800c12c <__multiply>
 800b8fe:	4649      	mov	r1, r9
 800b900:	9004      	str	r0, [sp, #16]
 800b902:	4658      	mov	r0, fp
 800b904:	f000 fb48 	bl	800bf98 <_Bfree>
 800b908:	9b04      	ldr	r3, [sp, #16]
 800b90a:	4699      	mov	r9, r3
 800b90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b90e:	1b1a      	subs	r2, r3, r4
 800b910:	d004      	beq.n	800b91c <_dtoa_r+0x78c>
 800b912:	4649      	mov	r1, r9
 800b914:	4658      	mov	r0, fp
 800b916:	f000 fcb3 	bl	800c280 <__pow5mult>
 800b91a:	4681      	mov	r9, r0
 800b91c:	2101      	movs	r1, #1
 800b91e:	4658      	mov	r0, fp
 800b920:	f000 fbee 	bl	800c100 <__i2b>
 800b924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b926:	4604      	mov	r4, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 81cf 	beq.w	800bccc <_dtoa_r+0xb3c>
 800b92e:	461a      	mov	r2, r3
 800b930:	4601      	mov	r1, r0
 800b932:	4658      	mov	r0, fp
 800b934:	f000 fca4 	bl	800c280 <__pow5mult>
 800b938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	4604      	mov	r4, r0
 800b93e:	f300 8095 	bgt.w	800ba6c <_dtoa_r+0x8dc>
 800b942:	9b02      	ldr	r3, [sp, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	f040 8087 	bne.w	800ba58 <_dtoa_r+0x8c8>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b950:	2b00      	cmp	r3, #0
 800b952:	f040 8089 	bne.w	800ba68 <_dtoa_r+0x8d8>
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b95c:	0d1b      	lsrs	r3, r3, #20
 800b95e:	051b      	lsls	r3, r3, #20
 800b960:	b12b      	cbz	r3, 800b96e <_dtoa_r+0x7de>
 800b962:	9b08      	ldr	r3, [sp, #32]
 800b964:	3301      	adds	r3, #1
 800b966:	9308      	str	r3, [sp, #32]
 800b968:	f108 0801 	add.w	r8, r8, #1
 800b96c:	2301      	movs	r3, #1
 800b96e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 81b0 	beq.w	800bcd8 <_dtoa_r+0xb48>
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b97e:	6918      	ldr	r0, [r3, #16]
 800b980:	f000 fb72 	bl	800c068 <__hi0bits>
 800b984:	f1c0 0020 	rsb	r0, r0, #32
 800b988:	9b08      	ldr	r3, [sp, #32]
 800b98a:	4418      	add	r0, r3
 800b98c:	f010 001f 	ands.w	r0, r0, #31
 800b990:	d077      	beq.n	800ba82 <_dtoa_r+0x8f2>
 800b992:	f1c0 0320 	rsb	r3, r0, #32
 800b996:	2b04      	cmp	r3, #4
 800b998:	dd6b      	ble.n	800ba72 <_dtoa_r+0x8e2>
 800b99a:	9b08      	ldr	r3, [sp, #32]
 800b99c:	f1c0 001c 	rsb	r0, r0, #28
 800b9a0:	4403      	add	r3, r0
 800b9a2:	4480      	add	r8, r0
 800b9a4:	4406      	add	r6, r0
 800b9a6:	9308      	str	r3, [sp, #32]
 800b9a8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ac:	dd05      	ble.n	800b9ba <_dtoa_r+0x82a>
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	4642      	mov	r2, r8
 800b9b2:	4658      	mov	r0, fp
 800b9b4:	f000 fcbe 	bl	800c334 <__lshift>
 800b9b8:	4681      	mov	r9, r0
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	dd05      	ble.n	800b9cc <_dtoa_r+0x83c>
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	4658      	mov	r0, fp
 800b9c6:	f000 fcb5 	bl	800c334 <__lshift>
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d059      	beq.n	800ba86 <_dtoa_r+0x8f6>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 fd19 	bl	800c40c <__mcmp>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	da53      	bge.n	800ba86 <_dtoa_r+0x8f6>
 800b9de:	1e7b      	subs	r3, r7, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	4649      	mov	r1, r9
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	220a      	movs	r2, #10
 800b9e8:	4658      	mov	r0, fp
 800b9ea:	f000 faf7 	bl	800bfdc <__multadd>
 800b9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9f0:	4681      	mov	r9, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 8172 	beq.w	800bcdc <_dtoa_r+0xb4c>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	220a      	movs	r2, #10
 800b9fe:	4658      	mov	r0, fp
 800ba00:	f000 faec 	bl	800bfdc <__multadd>
 800ba04:	9b00      	ldr	r3, [sp, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	4605      	mov	r5, r0
 800ba0a:	dc67      	bgt.n	800badc <_dtoa_r+0x94c>
 800ba0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	dc41      	bgt.n	800ba96 <_dtoa_r+0x906>
 800ba12:	e063      	b.n	800badc <_dtoa_r+0x94c>
 800ba14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba1a:	e746      	b.n	800b8aa <_dtoa_r+0x71a>
 800ba1c:	9b07      	ldr	r3, [sp, #28]
 800ba1e:	1e5c      	subs	r4, r3, #1
 800ba20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba22:	42a3      	cmp	r3, r4
 800ba24:	bfbf      	itttt	lt
 800ba26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba2c:	1ae3      	sublt	r3, r4, r3
 800ba2e:	bfb4      	ite	lt
 800ba30:	18d2      	addlt	r2, r2, r3
 800ba32:	1b1c      	subge	r4, r3, r4
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	bfbc      	itt	lt
 800ba38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba3a:	2400      	movlt	r4, #0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfb5      	itete	lt
 800ba40:	eba8 0603 	sublt.w	r6, r8, r3
 800ba44:	9b07      	ldrge	r3, [sp, #28]
 800ba46:	2300      	movlt	r3, #0
 800ba48:	4646      	movge	r6, r8
 800ba4a:	e730      	b.n	800b8ae <_dtoa_r+0x71e>
 800ba4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba50:	4646      	mov	r6, r8
 800ba52:	e735      	b.n	800b8c0 <_dtoa_r+0x730>
 800ba54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba56:	e75c      	b.n	800b912 <_dtoa_r+0x782>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e788      	b.n	800b96e <_dtoa_r+0x7de>
 800ba5c:	3fe00000 	.word	0x3fe00000
 800ba60:	40240000 	.word	0x40240000
 800ba64:	40140000 	.word	0x40140000
 800ba68:	9b02      	ldr	r3, [sp, #8]
 800ba6a:	e780      	b.n	800b96e <_dtoa_r+0x7de>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba70:	e782      	b.n	800b978 <_dtoa_r+0x7e8>
 800ba72:	d099      	beq.n	800b9a8 <_dtoa_r+0x818>
 800ba74:	9a08      	ldr	r2, [sp, #32]
 800ba76:	331c      	adds	r3, #28
 800ba78:	441a      	add	r2, r3
 800ba7a:	4498      	add	r8, r3
 800ba7c:	441e      	add	r6, r3
 800ba7e:	9208      	str	r2, [sp, #32]
 800ba80:	e792      	b.n	800b9a8 <_dtoa_r+0x818>
 800ba82:	4603      	mov	r3, r0
 800ba84:	e7f6      	b.n	800ba74 <_dtoa_r+0x8e4>
 800ba86:	9b07      	ldr	r3, [sp, #28]
 800ba88:	9704      	str	r7, [sp, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	dc20      	bgt.n	800bad0 <_dtoa_r+0x940>
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	dd1e      	ble.n	800bad4 <_dtoa_r+0x944>
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f47f aec0 	bne.w	800b81e <_dtoa_r+0x68e>
 800ba9e:	4621      	mov	r1, r4
 800baa0:	2205      	movs	r2, #5
 800baa2:	4658      	mov	r0, fp
 800baa4:	f000 fa9a 	bl	800bfdc <__multadd>
 800baa8:	4601      	mov	r1, r0
 800baaa:	4604      	mov	r4, r0
 800baac:	4648      	mov	r0, r9
 800baae:	f000 fcad 	bl	800c40c <__mcmp>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f77f aeb3 	ble.w	800b81e <_dtoa_r+0x68e>
 800bab8:	4656      	mov	r6, sl
 800baba:	2331      	movs	r3, #49	@ 0x31
 800babc:	f806 3b01 	strb.w	r3, [r6], #1
 800bac0:	9b04      	ldr	r3, [sp, #16]
 800bac2:	3301      	adds	r3, #1
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	e6ae      	b.n	800b826 <_dtoa_r+0x696>
 800bac8:	9c07      	ldr	r4, [sp, #28]
 800baca:	9704      	str	r7, [sp, #16]
 800bacc:	4625      	mov	r5, r4
 800bace:	e7f3      	b.n	800bab8 <_dtoa_r+0x928>
 800bad0:	9b07      	ldr	r3, [sp, #28]
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 8104 	beq.w	800bce4 <_dtoa_r+0xb54>
 800badc:	2e00      	cmp	r6, #0
 800bade:	dd05      	ble.n	800baec <_dtoa_r+0x95c>
 800bae0:	4629      	mov	r1, r5
 800bae2:	4632      	mov	r2, r6
 800bae4:	4658      	mov	r0, fp
 800bae6:	f000 fc25 	bl	800c334 <__lshift>
 800baea:	4605      	mov	r5, r0
 800baec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d05a      	beq.n	800bba8 <_dtoa_r+0xa18>
 800baf2:	6869      	ldr	r1, [r5, #4]
 800baf4:	4658      	mov	r0, fp
 800baf6:	f000 fa0f 	bl	800bf18 <_Balloc>
 800bafa:	4606      	mov	r6, r0
 800bafc:	b928      	cbnz	r0, 800bb0a <_dtoa_r+0x97a>
 800bafe:	4b84      	ldr	r3, [pc, #528]	@ (800bd10 <_dtoa_r+0xb80>)
 800bb00:	4602      	mov	r2, r0
 800bb02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb06:	f7ff bb5a 	b.w	800b1be <_dtoa_r+0x2e>
 800bb0a:	692a      	ldr	r2, [r5, #16]
 800bb0c:	3202      	adds	r2, #2
 800bb0e:	0092      	lsls	r2, r2, #2
 800bb10:	f105 010c 	add.w	r1, r5, #12
 800bb14:	300c      	adds	r0, #12
 800bb16:	f000 ffaf 	bl	800ca78 <memcpy>
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 fc08 	bl	800c334 <__lshift>
 800bb24:	f10a 0301 	add.w	r3, sl, #1
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	9b00      	ldr	r3, [sp, #0]
 800bb2c:	4453      	add	r3, sl
 800bb2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb30:	9b02      	ldr	r3, [sp, #8]
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	462f      	mov	r7, r5
 800bb38:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	9b07      	ldr	r3, [sp, #28]
 800bb3e:	4621      	mov	r1, r4
 800bb40:	3b01      	subs	r3, #1
 800bb42:	4648      	mov	r0, r9
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	f7ff fa98 	bl	800b07a <quorem>
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	9002      	str	r0, [sp, #8]
 800bb4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb52:	4648      	mov	r0, r9
 800bb54:	f000 fc5a 	bl	800c40c <__mcmp>
 800bb58:	462a      	mov	r2, r5
 800bb5a:	9008      	str	r0, [sp, #32]
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4658      	mov	r0, fp
 800bb60:	f000 fc70 	bl	800c444 <__mdiff>
 800bb64:	68c2      	ldr	r2, [r0, #12]
 800bb66:	4606      	mov	r6, r0
 800bb68:	bb02      	cbnz	r2, 800bbac <_dtoa_r+0xa1c>
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f000 fc4d 	bl	800c40c <__mcmp>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4631      	mov	r1, r6
 800bb76:	4658      	mov	r0, fp
 800bb78:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb7a:	f000 fa0d 	bl	800bf98 <_Bfree>
 800bb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb82:	9e07      	ldr	r6, [sp, #28]
 800bb84:	ea43 0102 	orr.w	r1, r3, r2
 800bb88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb8a:	4319      	orrs	r1, r3
 800bb8c:	d110      	bne.n	800bbb0 <_dtoa_r+0xa20>
 800bb8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb92:	d029      	beq.n	800bbe8 <_dtoa_r+0xa58>
 800bb94:	9b08      	ldr	r3, [sp, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dd02      	ble.n	800bba0 <_dtoa_r+0xa10>
 800bb9a:	9b02      	ldr	r3, [sp, #8]
 800bb9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bba0:	9b00      	ldr	r3, [sp, #0]
 800bba2:	f883 8000 	strb.w	r8, [r3]
 800bba6:	e63f      	b.n	800b828 <_dtoa_r+0x698>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	e7bb      	b.n	800bb24 <_dtoa_r+0x994>
 800bbac:	2201      	movs	r2, #1
 800bbae:	e7e1      	b.n	800bb74 <_dtoa_r+0x9e4>
 800bbb0:	9b08      	ldr	r3, [sp, #32]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	db04      	blt.n	800bbc0 <_dtoa_r+0xa30>
 800bbb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	d120      	bne.n	800bc02 <_dtoa_r+0xa72>
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	dded      	ble.n	800bba0 <_dtoa_r+0xa10>
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	4658      	mov	r0, fp
 800bbca:	f000 fbb3 	bl	800c334 <__lshift>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4681      	mov	r9, r0
 800bbd2:	f000 fc1b 	bl	800c40c <__mcmp>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	dc03      	bgt.n	800bbe2 <_dtoa_r+0xa52>
 800bbda:	d1e1      	bne.n	800bba0 <_dtoa_r+0xa10>
 800bbdc:	f018 0f01 	tst.w	r8, #1
 800bbe0:	d0de      	beq.n	800bba0 <_dtoa_r+0xa10>
 800bbe2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbe6:	d1d8      	bne.n	800bb9a <_dtoa_r+0xa0a>
 800bbe8:	9a00      	ldr	r2, [sp, #0]
 800bbea:	2339      	movs	r3, #57	@ 0x39
 800bbec:	7013      	strb	r3, [r2, #0]
 800bbee:	4633      	mov	r3, r6
 800bbf0:	461e      	mov	r6, r3
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbf8:	2a39      	cmp	r2, #57	@ 0x39
 800bbfa:	d052      	beq.n	800bca2 <_dtoa_r+0xb12>
 800bbfc:	3201      	adds	r2, #1
 800bbfe:	701a      	strb	r2, [r3, #0]
 800bc00:	e612      	b.n	800b828 <_dtoa_r+0x698>
 800bc02:	2a00      	cmp	r2, #0
 800bc04:	dd07      	ble.n	800bc16 <_dtoa_r+0xa86>
 800bc06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc0a:	d0ed      	beq.n	800bbe8 <_dtoa_r+0xa58>
 800bc0c:	9a00      	ldr	r2, [sp, #0]
 800bc0e:	f108 0301 	add.w	r3, r8, #1
 800bc12:	7013      	strb	r3, [r2, #0]
 800bc14:	e608      	b.n	800b828 <_dtoa_r+0x698>
 800bc16:	9b07      	ldr	r3, [sp, #28]
 800bc18:	9a07      	ldr	r2, [sp, #28]
 800bc1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d028      	beq.n	800bc76 <_dtoa_r+0xae6>
 800bc24:	4649      	mov	r1, r9
 800bc26:	2300      	movs	r3, #0
 800bc28:	220a      	movs	r2, #10
 800bc2a:	4658      	mov	r0, fp
 800bc2c:	f000 f9d6 	bl	800bfdc <__multadd>
 800bc30:	42af      	cmp	r7, r5
 800bc32:	4681      	mov	r9, r0
 800bc34:	f04f 0300 	mov.w	r3, #0
 800bc38:	f04f 020a 	mov.w	r2, #10
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4658      	mov	r0, fp
 800bc40:	d107      	bne.n	800bc52 <_dtoa_r+0xac2>
 800bc42:	f000 f9cb 	bl	800bfdc <__multadd>
 800bc46:	4607      	mov	r7, r0
 800bc48:	4605      	mov	r5, r0
 800bc4a:	9b07      	ldr	r3, [sp, #28]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	e774      	b.n	800bb3c <_dtoa_r+0x9ac>
 800bc52:	f000 f9c3 	bl	800bfdc <__multadd>
 800bc56:	4629      	mov	r1, r5
 800bc58:	4607      	mov	r7, r0
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	220a      	movs	r2, #10
 800bc5e:	4658      	mov	r0, fp
 800bc60:	f000 f9bc 	bl	800bfdc <__multadd>
 800bc64:	4605      	mov	r5, r0
 800bc66:	e7f0      	b.n	800bc4a <_dtoa_r+0xaba>
 800bc68:	9b00      	ldr	r3, [sp, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	bfcc      	ite	gt
 800bc6e:	461e      	movgt	r6, r3
 800bc70:	2601      	movle	r6, #1
 800bc72:	4456      	add	r6, sl
 800bc74:	2700      	movs	r7, #0
 800bc76:	4649      	mov	r1, r9
 800bc78:	2201      	movs	r2, #1
 800bc7a:	4658      	mov	r0, fp
 800bc7c:	f000 fb5a 	bl	800c334 <__lshift>
 800bc80:	4621      	mov	r1, r4
 800bc82:	4681      	mov	r9, r0
 800bc84:	f000 fbc2 	bl	800c40c <__mcmp>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	dcb0      	bgt.n	800bbee <_dtoa_r+0xa5e>
 800bc8c:	d102      	bne.n	800bc94 <_dtoa_r+0xb04>
 800bc8e:	f018 0f01 	tst.w	r8, #1
 800bc92:	d1ac      	bne.n	800bbee <_dtoa_r+0xa5e>
 800bc94:	4633      	mov	r3, r6
 800bc96:	461e      	mov	r6, r3
 800bc98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc9c:	2a30      	cmp	r2, #48	@ 0x30
 800bc9e:	d0fa      	beq.n	800bc96 <_dtoa_r+0xb06>
 800bca0:	e5c2      	b.n	800b828 <_dtoa_r+0x698>
 800bca2:	459a      	cmp	sl, r3
 800bca4:	d1a4      	bne.n	800bbf0 <_dtoa_r+0xa60>
 800bca6:	9b04      	ldr	r3, [sp, #16]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	2331      	movs	r3, #49	@ 0x31
 800bcae:	f88a 3000 	strb.w	r3, [sl]
 800bcb2:	e5b9      	b.n	800b828 <_dtoa_r+0x698>
 800bcb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd14 <_dtoa_r+0xb84>
 800bcba:	b11b      	cbz	r3, 800bcc4 <_dtoa_r+0xb34>
 800bcbc:	f10a 0308 	add.w	r3, sl, #8
 800bcc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcc2:	6013      	str	r3, [r2, #0]
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	b019      	add	sp, #100	@ 0x64
 800bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	f77f ae37 	ble.w	800b942 <_dtoa_r+0x7b2>
 800bcd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd8:	2001      	movs	r0, #1
 800bcda:	e655      	b.n	800b988 <_dtoa_r+0x7f8>
 800bcdc:	9b00      	ldr	r3, [sp, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f77f aed6 	ble.w	800ba90 <_dtoa_r+0x900>
 800bce4:	4656      	mov	r6, sl
 800bce6:	4621      	mov	r1, r4
 800bce8:	4648      	mov	r0, r9
 800bcea:	f7ff f9c6 	bl	800b07a <quorem>
 800bcee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcf2:	f806 8b01 	strb.w	r8, [r6], #1
 800bcf6:	9b00      	ldr	r3, [sp, #0]
 800bcf8:	eba6 020a 	sub.w	r2, r6, sl
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	ddb3      	ble.n	800bc68 <_dtoa_r+0xad8>
 800bd00:	4649      	mov	r1, r9
 800bd02:	2300      	movs	r3, #0
 800bd04:	220a      	movs	r2, #10
 800bd06:	4658      	mov	r0, fp
 800bd08:	f000 f968 	bl	800bfdc <__multadd>
 800bd0c:	4681      	mov	r9, r0
 800bd0e:	e7ea      	b.n	800bce6 <_dtoa_r+0xb56>
 800bd10:	0800d270 	.word	0x0800d270
 800bd14:	0800d1f4 	.word	0x0800d1f4

0800bd18 <_free_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	2900      	cmp	r1, #0
 800bd1e:	d041      	beq.n	800bda4 <_free_r+0x8c>
 800bd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd24:	1f0c      	subs	r4, r1, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	bfb8      	it	lt
 800bd2a:	18e4      	addlt	r4, r4, r3
 800bd2c:	f000 f8e8 	bl	800bf00 <__malloc_lock>
 800bd30:	4a1d      	ldr	r2, [pc, #116]	@ (800bda8 <_free_r+0x90>)
 800bd32:	6813      	ldr	r3, [r2, #0]
 800bd34:	b933      	cbnz	r3, 800bd44 <_free_r+0x2c>
 800bd36:	6063      	str	r3, [r4, #4]
 800bd38:	6014      	str	r4, [r2, #0]
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd40:	f000 b8e4 	b.w	800bf0c <__malloc_unlock>
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	d908      	bls.n	800bd5a <_free_r+0x42>
 800bd48:	6820      	ldr	r0, [r4, #0]
 800bd4a:	1821      	adds	r1, r4, r0
 800bd4c:	428b      	cmp	r3, r1
 800bd4e:	bf01      	itttt	eq
 800bd50:	6819      	ldreq	r1, [r3, #0]
 800bd52:	685b      	ldreq	r3, [r3, #4]
 800bd54:	1809      	addeq	r1, r1, r0
 800bd56:	6021      	streq	r1, [r4, #0]
 800bd58:	e7ed      	b.n	800bd36 <_free_r+0x1e>
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	b10b      	cbz	r3, 800bd64 <_free_r+0x4c>
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	d9fa      	bls.n	800bd5a <_free_r+0x42>
 800bd64:	6811      	ldr	r1, [r2, #0]
 800bd66:	1850      	adds	r0, r2, r1
 800bd68:	42a0      	cmp	r0, r4
 800bd6a:	d10b      	bne.n	800bd84 <_free_r+0x6c>
 800bd6c:	6820      	ldr	r0, [r4, #0]
 800bd6e:	4401      	add	r1, r0
 800bd70:	1850      	adds	r0, r2, r1
 800bd72:	4283      	cmp	r3, r0
 800bd74:	6011      	str	r1, [r2, #0]
 800bd76:	d1e0      	bne.n	800bd3a <_free_r+0x22>
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	6053      	str	r3, [r2, #4]
 800bd7e:	4408      	add	r0, r1
 800bd80:	6010      	str	r0, [r2, #0]
 800bd82:	e7da      	b.n	800bd3a <_free_r+0x22>
 800bd84:	d902      	bls.n	800bd8c <_free_r+0x74>
 800bd86:	230c      	movs	r3, #12
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	e7d6      	b.n	800bd3a <_free_r+0x22>
 800bd8c:	6820      	ldr	r0, [r4, #0]
 800bd8e:	1821      	adds	r1, r4, r0
 800bd90:	428b      	cmp	r3, r1
 800bd92:	bf04      	itt	eq
 800bd94:	6819      	ldreq	r1, [r3, #0]
 800bd96:	685b      	ldreq	r3, [r3, #4]
 800bd98:	6063      	str	r3, [r4, #4]
 800bd9a:	bf04      	itt	eq
 800bd9c:	1809      	addeq	r1, r1, r0
 800bd9e:	6021      	streq	r1, [r4, #0]
 800bda0:	6054      	str	r4, [r2, #4]
 800bda2:	e7ca      	b.n	800bd3a <_free_r+0x22>
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
 800bda6:	bf00      	nop
 800bda8:	200009b8 	.word	0x200009b8

0800bdac <malloc>:
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <malloc+0xc>)
 800bdae:	4601      	mov	r1, r0
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f000 b825 	b.w	800be00 <_malloc_r>
 800bdb6:	bf00      	nop
 800bdb8:	2000001c 	.word	0x2000001c

0800bdbc <sbrk_aligned>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	4e0f      	ldr	r6, [pc, #60]	@ (800bdfc <sbrk_aligned+0x40>)
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	6831      	ldr	r1, [r6, #0]
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	b911      	cbnz	r1, 800bdce <sbrk_aligned+0x12>
 800bdc8:	f000 fe46 	bl	800ca58 <_sbrk_r>
 800bdcc:	6030      	str	r0, [r6, #0]
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f000 fe41 	bl	800ca58 <_sbrk_r>
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	d103      	bne.n	800bde2 <sbrk_aligned+0x26>
 800bdda:	f04f 34ff 	mov.w	r4, #4294967295
 800bdde:	4620      	mov	r0, r4
 800bde0:	bd70      	pop	{r4, r5, r6, pc}
 800bde2:	1cc4      	adds	r4, r0, #3
 800bde4:	f024 0403 	bic.w	r4, r4, #3
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d0f8      	beq.n	800bdde <sbrk_aligned+0x22>
 800bdec:	1a21      	subs	r1, r4, r0
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f000 fe32 	bl	800ca58 <_sbrk_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d1f2      	bne.n	800bdde <sbrk_aligned+0x22>
 800bdf8:	e7ef      	b.n	800bdda <sbrk_aligned+0x1e>
 800bdfa:	bf00      	nop
 800bdfc:	200009b4 	.word	0x200009b4

0800be00 <_malloc_r>:
 800be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be04:	1ccd      	adds	r5, r1, #3
 800be06:	f025 0503 	bic.w	r5, r5, #3
 800be0a:	3508      	adds	r5, #8
 800be0c:	2d0c      	cmp	r5, #12
 800be0e:	bf38      	it	cc
 800be10:	250c      	movcc	r5, #12
 800be12:	2d00      	cmp	r5, #0
 800be14:	4606      	mov	r6, r0
 800be16:	db01      	blt.n	800be1c <_malloc_r+0x1c>
 800be18:	42a9      	cmp	r1, r5
 800be1a:	d904      	bls.n	800be26 <_malloc_r+0x26>
 800be1c:	230c      	movs	r3, #12
 800be1e:	6033      	str	r3, [r6, #0]
 800be20:	2000      	movs	r0, #0
 800be22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800befc <_malloc_r+0xfc>
 800be2a:	f000 f869 	bl	800bf00 <__malloc_lock>
 800be2e:	f8d8 3000 	ldr.w	r3, [r8]
 800be32:	461c      	mov	r4, r3
 800be34:	bb44      	cbnz	r4, 800be88 <_malloc_r+0x88>
 800be36:	4629      	mov	r1, r5
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ffbf 	bl	800bdbc <sbrk_aligned>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	4604      	mov	r4, r0
 800be42:	d158      	bne.n	800bef6 <_malloc_r+0xf6>
 800be44:	f8d8 4000 	ldr.w	r4, [r8]
 800be48:	4627      	mov	r7, r4
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	d143      	bne.n	800bed6 <_malloc_r+0xd6>
 800be4e:	2c00      	cmp	r4, #0
 800be50:	d04b      	beq.n	800beea <_malloc_r+0xea>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	4639      	mov	r1, r7
 800be56:	4630      	mov	r0, r6
 800be58:	eb04 0903 	add.w	r9, r4, r3
 800be5c:	f000 fdfc 	bl	800ca58 <_sbrk_r>
 800be60:	4581      	cmp	r9, r0
 800be62:	d142      	bne.n	800beea <_malloc_r+0xea>
 800be64:	6821      	ldr	r1, [r4, #0]
 800be66:	1a6d      	subs	r5, r5, r1
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff ffa6 	bl	800bdbc <sbrk_aligned>
 800be70:	3001      	adds	r0, #1
 800be72:	d03a      	beq.n	800beea <_malloc_r+0xea>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	442b      	add	r3, r5
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	f8d8 3000 	ldr.w	r3, [r8]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	bb62      	cbnz	r2, 800bedc <_malloc_r+0xdc>
 800be82:	f8c8 7000 	str.w	r7, [r8]
 800be86:	e00f      	b.n	800bea8 <_malloc_r+0xa8>
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	1b52      	subs	r2, r2, r5
 800be8c:	d420      	bmi.n	800bed0 <_malloc_r+0xd0>
 800be8e:	2a0b      	cmp	r2, #11
 800be90:	d917      	bls.n	800bec2 <_malloc_r+0xc2>
 800be92:	1961      	adds	r1, r4, r5
 800be94:	42a3      	cmp	r3, r4
 800be96:	6025      	str	r5, [r4, #0]
 800be98:	bf18      	it	ne
 800be9a:	6059      	strne	r1, [r3, #4]
 800be9c:	6863      	ldr	r3, [r4, #4]
 800be9e:	bf08      	it	eq
 800bea0:	f8c8 1000 	streq.w	r1, [r8]
 800bea4:	5162      	str	r2, [r4, r5]
 800bea6:	604b      	str	r3, [r1, #4]
 800bea8:	4630      	mov	r0, r6
 800beaa:	f000 f82f 	bl	800bf0c <__malloc_unlock>
 800beae:	f104 000b 	add.w	r0, r4, #11
 800beb2:	1d23      	adds	r3, r4, #4
 800beb4:	f020 0007 	bic.w	r0, r0, #7
 800beb8:	1ac2      	subs	r2, r0, r3
 800beba:	bf1c      	itt	ne
 800bebc:	1a1b      	subne	r3, r3, r0
 800bebe:	50a3      	strne	r3, [r4, r2]
 800bec0:	e7af      	b.n	800be22 <_malloc_r+0x22>
 800bec2:	6862      	ldr	r2, [r4, #4]
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	bf0c      	ite	eq
 800bec8:	f8c8 2000 	streq.w	r2, [r8]
 800becc:	605a      	strne	r2, [r3, #4]
 800bece:	e7eb      	b.n	800bea8 <_malloc_r+0xa8>
 800bed0:	4623      	mov	r3, r4
 800bed2:	6864      	ldr	r4, [r4, #4]
 800bed4:	e7ae      	b.n	800be34 <_malloc_r+0x34>
 800bed6:	463c      	mov	r4, r7
 800bed8:	687f      	ldr	r7, [r7, #4]
 800beda:	e7b6      	b.n	800be4a <_malloc_r+0x4a>
 800bedc:	461a      	mov	r2, r3
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	d1fb      	bne.n	800bedc <_malloc_r+0xdc>
 800bee4:	2300      	movs	r3, #0
 800bee6:	6053      	str	r3, [r2, #4]
 800bee8:	e7de      	b.n	800bea8 <_malloc_r+0xa8>
 800beea:	230c      	movs	r3, #12
 800beec:	6033      	str	r3, [r6, #0]
 800beee:	4630      	mov	r0, r6
 800bef0:	f000 f80c 	bl	800bf0c <__malloc_unlock>
 800bef4:	e794      	b.n	800be20 <_malloc_r+0x20>
 800bef6:	6005      	str	r5, [r0, #0]
 800bef8:	e7d6      	b.n	800bea8 <_malloc_r+0xa8>
 800befa:	bf00      	nop
 800befc:	200009b8 	.word	0x200009b8

0800bf00 <__malloc_lock>:
 800bf00:	4801      	ldr	r0, [pc, #4]	@ (800bf08 <__malloc_lock+0x8>)
 800bf02:	f7ff b8b8 	b.w	800b076 <__retarget_lock_acquire_recursive>
 800bf06:	bf00      	nop
 800bf08:	200009b0 	.word	0x200009b0

0800bf0c <__malloc_unlock>:
 800bf0c:	4801      	ldr	r0, [pc, #4]	@ (800bf14 <__malloc_unlock+0x8>)
 800bf0e:	f7ff b8b3 	b.w	800b078 <__retarget_lock_release_recursive>
 800bf12:	bf00      	nop
 800bf14:	200009b0 	.word	0x200009b0

0800bf18 <_Balloc>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	69c6      	ldr	r6, [r0, #28]
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	b976      	cbnz	r6, 800bf40 <_Balloc+0x28>
 800bf22:	2010      	movs	r0, #16
 800bf24:	f7ff ff42 	bl	800bdac <malloc>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	61e0      	str	r0, [r4, #28]
 800bf2c:	b920      	cbnz	r0, 800bf38 <_Balloc+0x20>
 800bf2e:	4b18      	ldr	r3, [pc, #96]	@ (800bf90 <_Balloc+0x78>)
 800bf30:	4818      	ldr	r0, [pc, #96]	@ (800bf94 <_Balloc+0x7c>)
 800bf32:	216b      	movs	r1, #107	@ 0x6b
 800bf34:	f000 fdae 	bl	800ca94 <__assert_func>
 800bf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf3c:	6006      	str	r6, [r0, #0]
 800bf3e:	60c6      	str	r6, [r0, #12]
 800bf40:	69e6      	ldr	r6, [r4, #28]
 800bf42:	68f3      	ldr	r3, [r6, #12]
 800bf44:	b183      	cbz	r3, 800bf68 <_Balloc+0x50>
 800bf46:	69e3      	ldr	r3, [r4, #28]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf4e:	b9b8      	cbnz	r0, 800bf80 <_Balloc+0x68>
 800bf50:	2101      	movs	r1, #1
 800bf52:	fa01 f605 	lsl.w	r6, r1, r5
 800bf56:	1d72      	adds	r2, r6, #5
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 fdb8 	bl	800cad0 <_calloc_r>
 800bf60:	b160      	cbz	r0, 800bf7c <_Balloc+0x64>
 800bf62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf66:	e00e      	b.n	800bf86 <_Balloc+0x6e>
 800bf68:	2221      	movs	r2, #33	@ 0x21
 800bf6a:	2104      	movs	r1, #4
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fdaf 	bl	800cad0 <_calloc_r>
 800bf72:	69e3      	ldr	r3, [r4, #28]
 800bf74:	60f0      	str	r0, [r6, #12]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e4      	bne.n	800bf46 <_Balloc+0x2e>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	6802      	ldr	r2, [r0, #0]
 800bf82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf86:	2300      	movs	r3, #0
 800bf88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf8c:	e7f7      	b.n	800bf7e <_Balloc+0x66>
 800bf8e:	bf00      	nop
 800bf90:	0800d201 	.word	0x0800d201
 800bf94:	0800d281 	.word	0x0800d281

0800bf98 <_Bfree>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	69c6      	ldr	r6, [r0, #28]
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	b976      	cbnz	r6, 800bfc0 <_Bfree+0x28>
 800bfa2:	2010      	movs	r0, #16
 800bfa4:	f7ff ff02 	bl	800bdac <malloc>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	61e8      	str	r0, [r5, #28]
 800bfac:	b920      	cbnz	r0, 800bfb8 <_Bfree+0x20>
 800bfae:	4b09      	ldr	r3, [pc, #36]	@ (800bfd4 <_Bfree+0x3c>)
 800bfb0:	4809      	ldr	r0, [pc, #36]	@ (800bfd8 <_Bfree+0x40>)
 800bfb2:	218f      	movs	r1, #143	@ 0x8f
 800bfb4:	f000 fd6e 	bl	800ca94 <__assert_func>
 800bfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfbc:	6006      	str	r6, [r0, #0]
 800bfbe:	60c6      	str	r6, [r0, #12]
 800bfc0:	b13c      	cbz	r4, 800bfd2 <_Bfree+0x3a>
 800bfc2:	69eb      	ldr	r3, [r5, #28]
 800bfc4:	6862      	ldr	r2, [r4, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfcc:	6021      	str	r1, [r4, #0]
 800bfce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	0800d201 	.word	0x0800d201
 800bfd8:	0800d281 	.word	0x0800d281

0800bfdc <__multadd>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	690d      	ldr	r5, [r1, #16]
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	461e      	mov	r6, r3
 800bfe8:	f101 0c14 	add.w	ip, r1, #20
 800bfec:	2000      	movs	r0, #0
 800bfee:	f8dc 3000 	ldr.w	r3, [ip]
 800bff2:	b299      	uxth	r1, r3
 800bff4:	fb02 6101 	mla	r1, r2, r1, r6
 800bff8:	0c1e      	lsrs	r6, r3, #16
 800bffa:	0c0b      	lsrs	r3, r1, #16
 800bffc:	fb02 3306 	mla	r3, r2, r6, r3
 800c000:	b289      	uxth	r1, r1
 800c002:	3001      	adds	r0, #1
 800c004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c008:	4285      	cmp	r5, r0
 800c00a:	f84c 1b04 	str.w	r1, [ip], #4
 800c00e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c012:	dcec      	bgt.n	800bfee <__multadd+0x12>
 800c014:	b30e      	cbz	r6, 800c05a <__multadd+0x7e>
 800c016:	68a3      	ldr	r3, [r4, #8]
 800c018:	42ab      	cmp	r3, r5
 800c01a:	dc19      	bgt.n	800c050 <__multadd+0x74>
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	4638      	mov	r0, r7
 800c020:	3101      	adds	r1, #1
 800c022:	f7ff ff79 	bl	800bf18 <_Balloc>
 800c026:	4680      	mov	r8, r0
 800c028:	b928      	cbnz	r0, 800c036 <__multadd+0x5a>
 800c02a:	4602      	mov	r2, r0
 800c02c:	4b0c      	ldr	r3, [pc, #48]	@ (800c060 <__multadd+0x84>)
 800c02e:	480d      	ldr	r0, [pc, #52]	@ (800c064 <__multadd+0x88>)
 800c030:	21ba      	movs	r1, #186	@ 0xba
 800c032:	f000 fd2f 	bl	800ca94 <__assert_func>
 800c036:	6922      	ldr	r2, [r4, #16]
 800c038:	3202      	adds	r2, #2
 800c03a:	f104 010c 	add.w	r1, r4, #12
 800c03e:	0092      	lsls	r2, r2, #2
 800c040:	300c      	adds	r0, #12
 800c042:	f000 fd19 	bl	800ca78 <memcpy>
 800c046:	4621      	mov	r1, r4
 800c048:	4638      	mov	r0, r7
 800c04a:	f7ff ffa5 	bl	800bf98 <_Bfree>
 800c04e:	4644      	mov	r4, r8
 800c050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c054:	3501      	adds	r5, #1
 800c056:	615e      	str	r6, [r3, #20]
 800c058:	6125      	str	r5, [r4, #16]
 800c05a:	4620      	mov	r0, r4
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c060:	0800d270 	.word	0x0800d270
 800c064:	0800d281 	.word	0x0800d281

0800c068 <__hi0bits>:
 800c068:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c06c:	4603      	mov	r3, r0
 800c06e:	bf36      	itet	cc
 800c070:	0403      	lslcc	r3, r0, #16
 800c072:	2000      	movcs	r0, #0
 800c074:	2010      	movcc	r0, #16
 800c076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c07a:	bf3c      	itt	cc
 800c07c:	021b      	lslcc	r3, r3, #8
 800c07e:	3008      	addcc	r0, #8
 800c080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c084:	bf3c      	itt	cc
 800c086:	011b      	lslcc	r3, r3, #4
 800c088:	3004      	addcc	r0, #4
 800c08a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08e:	bf3c      	itt	cc
 800c090:	009b      	lslcc	r3, r3, #2
 800c092:	3002      	addcc	r0, #2
 800c094:	2b00      	cmp	r3, #0
 800c096:	db05      	blt.n	800c0a4 <__hi0bits+0x3c>
 800c098:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c09c:	f100 0001 	add.w	r0, r0, #1
 800c0a0:	bf08      	it	eq
 800c0a2:	2020      	moveq	r0, #32
 800c0a4:	4770      	bx	lr

0800c0a6 <__lo0bits>:
 800c0a6:	6803      	ldr	r3, [r0, #0]
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	f013 0007 	ands.w	r0, r3, #7
 800c0ae:	d00b      	beq.n	800c0c8 <__lo0bits+0x22>
 800c0b0:	07d9      	lsls	r1, r3, #31
 800c0b2:	d421      	bmi.n	800c0f8 <__lo0bits+0x52>
 800c0b4:	0798      	lsls	r0, r3, #30
 800c0b6:	bf49      	itett	mi
 800c0b8:	085b      	lsrmi	r3, r3, #1
 800c0ba:	089b      	lsrpl	r3, r3, #2
 800c0bc:	2001      	movmi	r0, #1
 800c0be:	6013      	strmi	r3, [r2, #0]
 800c0c0:	bf5c      	itt	pl
 800c0c2:	6013      	strpl	r3, [r2, #0]
 800c0c4:	2002      	movpl	r0, #2
 800c0c6:	4770      	bx	lr
 800c0c8:	b299      	uxth	r1, r3
 800c0ca:	b909      	cbnz	r1, 800c0d0 <__lo0bits+0x2a>
 800c0cc:	0c1b      	lsrs	r3, r3, #16
 800c0ce:	2010      	movs	r0, #16
 800c0d0:	b2d9      	uxtb	r1, r3
 800c0d2:	b909      	cbnz	r1, 800c0d8 <__lo0bits+0x32>
 800c0d4:	3008      	adds	r0, #8
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	0719      	lsls	r1, r3, #28
 800c0da:	bf04      	itt	eq
 800c0dc:	091b      	lsreq	r3, r3, #4
 800c0de:	3004      	addeq	r0, #4
 800c0e0:	0799      	lsls	r1, r3, #30
 800c0e2:	bf04      	itt	eq
 800c0e4:	089b      	lsreq	r3, r3, #2
 800c0e6:	3002      	addeq	r0, #2
 800c0e8:	07d9      	lsls	r1, r3, #31
 800c0ea:	d403      	bmi.n	800c0f4 <__lo0bits+0x4e>
 800c0ec:	085b      	lsrs	r3, r3, #1
 800c0ee:	f100 0001 	add.w	r0, r0, #1
 800c0f2:	d003      	beq.n	800c0fc <__lo0bits+0x56>
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	4770      	bx	lr
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	4770      	bx	lr
 800c0fc:	2020      	movs	r0, #32
 800c0fe:	4770      	bx	lr

0800c100 <__i2b>:
 800c100:	b510      	push	{r4, lr}
 800c102:	460c      	mov	r4, r1
 800c104:	2101      	movs	r1, #1
 800c106:	f7ff ff07 	bl	800bf18 <_Balloc>
 800c10a:	4602      	mov	r2, r0
 800c10c:	b928      	cbnz	r0, 800c11a <__i2b+0x1a>
 800c10e:	4b05      	ldr	r3, [pc, #20]	@ (800c124 <__i2b+0x24>)
 800c110:	4805      	ldr	r0, [pc, #20]	@ (800c128 <__i2b+0x28>)
 800c112:	f240 1145 	movw	r1, #325	@ 0x145
 800c116:	f000 fcbd 	bl	800ca94 <__assert_func>
 800c11a:	2301      	movs	r3, #1
 800c11c:	6144      	str	r4, [r0, #20]
 800c11e:	6103      	str	r3, [r0, #16]
 800c120:	bd10      	pop	{r4, pc}
 800c122:	bf00      	nop
 800c124:	0800d270 	.word	0x0800d270
 800c128:	0800d281 	.word	0x0800d281

0800c12c <__multiply>:
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	4614      	mov	r4, r2
 800c132:	690a      	ldr	r2, [r1, #16]
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	429a      	cmp	r2, r3
 800c138:	bfa8      	it	ge
 800c13a:	4623      	movge	r3, r4
 800c13c:	460f      	mov	r7, r1
 800c13e:	bfa4      	itt	ge
 800c140:	460c      	movge	r4, r1
 800c142:	461f      	movge	r7, r3
 800c144:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c148:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c14c:	68a3      	ldr	r3, [r4, #8]
 800c14e:	6861      	ldr	r1, [r4, #4]
 800c150:	eb0a 0609 	add.w	r6, sl, r9
 800c154:	42b3      	cmp	r3, r6
 800c156:	b085      	sub	sp, #20
 800c158:	bfb8      	it	lt
 800c15a:	3101      	addlt	r1, #1
 800c15c:	f7ff fedc 	bl	800bf18 <_Balloc>
 800c160:	b930      	cbnz	r0, 800c170 <__multiply+0x44>
 800c162:	4602      	mov	r2, r0
 800c164:	4b44      	ldr	r3, [pc, #272]	@ (800c278 <__multiply+0x14c>)
 800c166:	4845      	ldr	r0, [pc, #276]	@ (800c27c <__multiply+0x150>)
 800c168:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c16c:	f000 fc92 	bl	800ca94 <__assert_func>
 800c170:	f100 0514 	add.w	r5, r0, #20
 800c174:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c178:	462b      	mov	r3, r5
 800c17a:	2200      	movs	r2, #0
 800c17c:	4543      	cmp	r3, r8
 800c17e:	d321      	bcc.n	800c1c4 <__multiply+0x98>
 800c180:	f107 0114 	add.w	r1, r7, #20
 800c184:	f104 0214 	add.w	r2, r4, #20
 800c188:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c18c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c190:	9302      	str	r3, [sp, #8]
 800c192:	1b13      	subs	r3, r2, r4
 800c194:	3b15      	subs	r3, #21
 800c196:	f023 0303 	bic.w	r3, r3, #3
 800c19a:	3304      	adds	r3, #4
 800c19c:	f104 0715 	add.w	r7, r4, #21
 800c1a0:	42ba      	cmp	r2, r7
 800c1a2:	bf38      	it	cc
 800c1a4:	2304      	movcc	r3, #4
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	9b02      	ldr	r3, [sp, #8]
 800c1aa:	9103      	str	r1, [sp, #12]
 800c1ac:	428b      	cmp	r3, r1
 800c1ae:	d80c      	bhi.n	800c1ca <__multiply+0x9e>
 800c1b0:	2e00      	cmp	r6, #0
 800c1b2:	dd03      	ble.n	800c1bc <__multiply+0x90>
 800c1b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d05b      	beq.n	800c274 <__multiply+0x148>
 800c1bc:	6106      	str	r6, [r0, #16]
 800c1be:	b005      	add	sp, #20
 800c1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c4:	f843 2b04 	str.w	r2, [r3], #4
 800c1c8:	e7d8      	b.n	800c17c <__multiply+0x50>
 800c1ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1ce:	f1ba 0f00 	cmp.w	sl, #0
 800c1d2:	d024      	beq.n	800c21e <__multiply+0xf2>
 800c1d4:	f104 0e14 	add.w	lr, r4, #20
 800c1d8:	46a9      	mov	r9, r5
 800c1da:	f04f 0c00 	mov.w	ip, #0
 800c1de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1e2:	f8d9 3000 	ldr.w	r3, [r9]
 800c1e6:	fa1f fb87 	uxth.w	fp, r7
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1f4:	f8d9 7000 	ldr.w	r7, [r9]
 800c1f8:	4463      	add	r3, ip
 800c1fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800c202:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c206:	b29b      	uxth	r3, r3
 800c208:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c20c:	4572      	cmp	r2, lr
 800c20e:	f849 3b04 	str.w	r3, [r9], #4
 800c212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c216:	d8e2      	bhi.n	800c1de <__multiply+0xb2>
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	f845 c003 	str.w	ip, [r5, r3]
 800c21e:	9b03      	ldr	r3, [sp, #12]
 800c220:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c224:	3104      	adds	r1, #4
 800c226:	f1b9 0f00 	cmp.w	r9, #0
 800c22a:	d021      	beq.n	800c270 <__multiply+0x144>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	f104 0c14 	add.w	ip, r4, #20
 800c232:	46ae      	mov	lr, r5
 800c234:	f04f 0a00 	mov.w	sl, #0
 800c238:	f8bc b000 	ldrh.w	fp, [ip]
 800c23c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c240:	fb09 770b 	mla	r7, r9, fp, r7
 800c244:	4457      	add	r7, sl
 800c246:	b29b      	uxth	r3, r3
 800c248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c24c:	f84e 3b04 	str.w	r3, [lr], #4
 800c250:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c254:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c258:	f8be 3000 	ldrh.w	r3, [lr]
 800c25c:	fb09 330a 	mla	r3, r9, sl, r3
 800c260:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c264:	4562      	cmp	r2, ip
 800c266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c26a:	d8e5      	bhi.n	800c238 <__multiply+0x10c>
 800c26c:	9f01      	ldr	r7, [sp, #4]
 800c26e:	51eb      	str	r3, [r5, r7]
 800c270:	3504      	adds	r5, #4
 800c272:	e799      	b.n	800c1a8 <__multiply+0x7c>
 800c274:	3e01      	subs	r6, #1
 800c276:	e79b      	b.n	800c1b0 <__multiply+0x84>
 800c278:	0800d270 	.word	0x0800d270
 800c27c:	0800d281 	.word	0x0800d281

0800c280 <__pow5mult>:
 800c280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c284:	4615      	mov	r5, r2
 800c286:	f012 0203 	ands.w	r2, r2, #3
 800c28a:	4607      	mov	r7, r0
 800c28c:	460e      	mov	r6, r1
 800c28e:	d007      	beq.n	800c2a0 <__pow5mult+0x20>
 800c290:	4c25      	ldr	r4, [pc, #148]	@ (800c328 <__pow5mult+0xa8>)
 800c292:	3a01      	subs	r2, #1
 800c294:	2300      	movs	r3, #0
 800c296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c29a:	f7ff fe9f 	bl	800bfdc <__multadd>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	10ad      	asrs	r5, r5, #2
 800c2a2:	d03d      	beq.n	800c320 <__pow5mult+0xa0>
 800c2a4:	69fc      	ldr	r4, [r7, #28]
 800c2a6:	b97c      	cbnz	r4, 800c2c8 <__pow5mult+0x48>
 800c2a8:	2010      	movs	r0, #16
 800c2aa:	f7ff fd7f 	bl	800bdac <malloc>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	61f8      	str	r0, [r7, #28]
 800c2b2:	b928      	cbnz	r0, 800c2c0 <__pow5mult+0x40>
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <__pow5mult+0xac>)
 800c2b6:	481e      	ldr	r0, [pc, #120]	@ (800c330 <__pow5mult+0xb0>)
 800c2b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2bc:	f000 fbea 	bl	800ca94 <__assert_func>
 800c2c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2c4:	6004      	str	r4, [r0, #0]
 800c2c6:	60c4      	str	r4, [r0, #12]
 800c2c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2d0:	b94c      	cbnz	r4, 800c2e6 <__pow5mult+0x66>
 800c2d2:	f240 2171 	movw	r1, #625	@ 0x271
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f7ff ff12 	bl	800c100 <__i2b>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	6003      	str	r3, [r0, #0]
 800c2e6:	f04f 0900 	mov.w	r9, #0
 800c2ea:	07eb      	lsls	r3, r5, #31
 800c2ec:	d50a      	bpl.n	800c304 <__pow5mult+0x84>
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f7ff ff1a 	bl	800c12c <__multiply>
 800c2f8:	4631      	mov	r1, r6
 800c2fa:	4680      	mov	r8, r0
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff fe4b 	bl	800bf98 <_Bfree>
 800c302:	4646      	mov	r6, r8
 800c304:	106d      	asrs	r5, r5, #1
 800c306:	d00b      	beq.n	800c320 <__pow5mult+0xa0>
 800c308:	6820      	ldr	r0, [r4, #0]
 800c30a:	b938      	cbnz	r0, 800c31c <__pow5mult+0x9c>
 800c30c:	4622      	mov	r2, r4
 800c30e:	4621      	mov	r1, r4
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff ff0b 	bl	800c12c <__multiply>
 800c316:	6020      	str	r0, [r4, #0]
 800c318:	f8c0 9000 	str.w	r9, [r0]
 800c31c:	4604      	mov	r4, r0
 800c31e:	e7e4      	b.n	800c2ea <__pow5mult+0x6a>
 800c320:	4630      	mov	r0, r6
 800c322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c326:	bf00      	nop
 800c328:	0800d2dc 	.word	0x0800d2dc
 800c32c:	0800d201 	.word	0x0800d201
 800c330:	0800d281 	.word	0x0800d281

0800c334 <__lshift>:
 800c334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c338:	460c      	mov	r4, r1
 800c33a:	6849      	ldr	r1, [r1, #4]
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	4607      	mov	r7, r0
 800c346:	4691      	mov	r9, r2
 800c348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c34c:	f108 0601 	add.w	r6, r8, #1
 800c350:	42b3      	cmp	r3, r6
 800c352:	db0b      	blt.n	800c36c <__lshift+0x38>
 800c354:	4638      	mov	r0, r7
 800c356:	f7ff fddf 	bl	800bf18 <_Balloc>
 800c35a:	4605      	mov	r5, r0
 800c35c:	b948      	cbnz	r0, 800c372 <__lshift+0x3e>
 800c35e:	4602      	mov	r2, r0
 800c360:	4b28      	ldr	r3, [pc, #160]	@ (800c404 <__lshift+0xd0>)
 800c362:	4829      	ldr	r0, [pc, #164]	@ (800c408 <__lshift+0xd4>)
 800c364:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c368:	f000 fb94 	bl	800ca94 <__assert_func>
 800c36c:	3101      	adds	r1, #1
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	e7ee      	b.n	800c350 <__lshift+0x1c>
 800c372:	2300      	movs	r3, #0
 800c374:	f100 0114 	add.w	r1, r0, #20
 800c378:	f100 0210 	add.w	r2, r0, #16
 800c37c:	4618      	mov	r0, r3
 800c37e:	4553      	cmp	r3, sl
 800c380:	db33      	blt.n	800c3ea <__lshift+0xb6>
 800c382:	6920      	ldr	r0, [r4, #16]
 800c384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c388:	f104 0314 	add.w	r3, r4, #20
 800c38c:	f019 091f 	ands.w	r9, r9, #31
 800c390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c394:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c398:	d02b      	beq.n	800c3f2 <__lshift+0xbe>
 800c39a:	f1c9 0e20 	rsb	lr, r9, #32
 800c39e:	468a      	mov	sl, r1
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c3a8:	4310      	orrs	r0, r2
 800c3aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b2:	459c      	cmp	ip, r3
 800c3b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3b8:	d8f3      	bhi.n	800c3a2 <__lshift+0x6e>
 800c3ba:	ebac 0304 	sub.w	r3, ip, r4
 800c3be:	3b15      	subs	r3, #21
 800c3c0:	f023 0303 	bic.w	r3, r3, #3
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	f104 0015 	add.w	r0, r4, #21
 800c3ca:	4584      	cmp	ip, r0
 800c3cc:	bf38      	it	cc
 800c3ce:	2304      	movcc	r3, #4
 800c3d0:	50ca      	str	r2, [r1, r3]
 800c3d2:	b10a      	cbz	r2, 800c3d8 <__lshift+0xa4>
 800c3d4:	f108 0602 	add.w	r6, r8, #2
 800c3d8:	3e01      	subs	r6, #1
 800c3da:	4638      	mov	r0, r7
 800c3dc:	612e      	str	r6, [r5, #16]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f7ff fdda 	bl	800bf98 <_Bfree>
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	e7c5      	b.n	800c37e <__lshift+0x4a>
 800c3f2:	3904      	subs	r1, #4
 800c3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3fc:	459c      	cmp	ip, r3
 800c3fe:	d8f9      	bhi.n	800c3f4 <__lshift+0xc0>
 800c400:	e7ea      	b.n	800c3d8 <__lshift+0xa4>
 800c402:	bf00      	nop
 800c404:	0800d270 	.word	0x0800d270
 800c408:	0800d281 	.word	0x0800d281

0800c40c <__mcmp>:
 800c40c:	690a      	ldr	r2, [r1, #16]
 800c40e:	4603      	mov	r3, r0
 800c410:	6900      	ldr	r0, [r0, #16]
 800c412:	1a80      	subs	r0, r0, r2
 800c414:	b530      	push	{r4, r5, lr}
 800c416:	d10e      	bne.n	800c436 <__mcmp+0x2a>
 800c418:	3314      	adds	r3, #20
 800c41a:	3114      	adds	r1, #20
 800c41c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c420:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c424:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c428:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c42c:	4295      	cmp	r5, r2
 800c42e:	d003      	beq.n	800c438 <__mcmp+0x2c>
 800c430:	d205      	bcs.n	800c43e <__mcmp+0x32>
 800c432:	f04f 30ff 	mov.w	r0, #4294967295
 800c436:	bd30      	pop	{r4, r5, pc}
 800c438:	42a3      	cmp	r3, r4
 800c43a:	d3f3      	bcc.n	800c424 <__mcmp+0x18>
 800c43c:	e7fb      	b.n	800c436 <__mcmp+0x2a>
 800c43e:	2001      	movs	r0, #1
 800c440:	e7f9      	b.n	800c436 <__mcmp+0x2a>
	...

0800c444 <__mdiff>:
 800c444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c448:	4689      	mov	r9, r1
 800c44a:	4606      	mov	r6, r0
 800c44c:	4611      	mov	r1, r2
 800c44e:	4648      	mov	r0, r9
 800c450:	4614      	mov	r4, r2
 800c452:	f7ff ffdb 	bl	800c40c <__mcmp>
 800c456:	1e05      	subs	r5, r0, #0
 800c458:	d112      	bne.n	800c480 <__mdiff+0x3c>
 800c45a:	4629      	mov	r1, r5
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff fd5b 	bl	800bf18 <_Balloc>
 800c462:	4602      	mov	r2, r0
 800c464:	b928      	cbnz	r0, 800c472 <__mdiff+0x2e>
 800c466:	4b3f      	ldr	r3, [pc, #252]	@ (800c564 <__mdiff+0x120>)
 800c468:	f240 2137 	movw	r1, #567	@ 0x237
 800c46c:	483e      	ldr	r0, [pc, #248]	@ (800c568 <__mdiff+0x124>)
 800c46e:	f000 fb11 	bl	800ca94 <__assert_func>
 800c472:	2301      	movs	r3, #1
 800c474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c478:	4610      	mov	r0, r2
 800c47a:	b003      	add	sp, #12
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	bfbc      	itt	lt
 800c482:	464b      	movlt	r3, r9
 800c484:	46a1      	movlt	r9, r4
 800c486:	4630      	mov	r0, r6
 800c488:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c48c:	bfba      	itte	lt
 800c48e:	461c      	movlt	r4, r3
 800c490:	2501      	movlt	r5, #1
 800c492:	2500      	movge	r5, #0
 800c494:	f7ff fd40 	bl	800bf18 <_Balloc>
 800c498:	4602      	mov	r2, r0
 800c49a:	b918      	cbnz	r0, 800c4a4 <__mdiff+0x60>
 800c49c:	4b31      	ldr	r3, [pc, #196]	@ (800c564 <__mdiff+0x120>)
 800c49e:	f240 2145 	movw	r1, #581	@ 0x245
 800c4a2:	e7e3      	b.n	800c46c <__mdiff+0x28>
 800c4a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4a8:	6926      	ldr	r6, [r4, #16]
 800c4aa:	60c5      	str	r5, [r0, #12]
 800c4ac:	f109 0310 	add.w	r3, r9, #16
 800c4b0:	f109 0514 	add.w	r5, r9, #20
 800c4b4:	f104 0e14 	add.w	lr, r4, #20
 800c4b8:	f100 0b14 	add.w	fp, r0, #20
 800c4bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	46d9      	mov	r9, fp
 800c4c8:	f04f 0c00 	mov.w	ip, #0
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4d6:	9301      	str	r3, [sp, #4]
 800c4d8:	fa1f f38a 	uxth.w	r3, sl
 800c4dc:	4619      	mov	r1, r3
 800c4de:	b283      	uxth	r3, r0
 800c4e0:	1acb      	subs	r3, r1, r3
 800c4e2:	0c00      	lsrs	r0, r0, #16
 800c4e4:	4463      	add	r3, ip
 800c4e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4f4:	4576      	cmp	r6, lr
 800c4f6:	f849 3b04 	str.w	r3, [r9], #4
 800c4fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4fe:	d8e5      	bhi.n	800c4cc <__mdiff+0x88>
 800c500:	1b33      	subs	r3, r6, r4
 800c502:	3b15      	subs	r3, #21
 800c504:	f023 0303 	bic.w	r3, r3, #3
 800c508:	3415      	adds	r4, #21
 800c50a:	3304      	adds	r3, #4
 800c50c:	42a6      	cmp	r6, r4
 800c50e:	bf38      	it	cc
 800c510:	2304      	movcc	r3, #4
 800c512:	441d      	add	r5, r3
 800c514:	445b      	add	r3, fp
 800c516:	461e      	mov	r6, r3
 800c518:	462c      	mov	r4, r5
 800c51a:	4544      	cmp	r4, r8
 800c51c:	d30e      	bcc.n	800c53c <__mdiff+0xf8>
 800c51e:	f108 0103 	add.w	r1, r8, #3
 800c522:	1b49      	subs	r1, r1, r5
 800c524:	f021 0103 	bic.w	r1, r1, #3
 800c528:	3d03      	subs	r5, #3
 800c52a:	45a8      	cmp	r8, r5
 800c52c:	bf38      	it	cc
 800c52e:	2100      	movcc	r1, #0
 800c530:	440b      	add	r3, r1
 800c532:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c536:	b191      	cbz	r1, 800c55e <__mdiff+0x11a>
 800c538:	6117      	str	r7, [r2, #16]
 800c53a:	e79d      	b.n	800c478 <__mdiff+0x34>
 800c53c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c540:	46e6      	mov	lr, ip
 800c542:	0c08      	lsrs	r0, r1, #16
 800c544:	fa1c fc81 	uxtah	ip, ip, r1
 800c548:	4471      	add	r1, lr
 800c54a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c54e:	b289      	uxth	r1, r1
 800c550:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c554:	f846 1b04 	str.w	r1, [r6], #4
 800c558:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c55c:	e7dd      	b.n	800c51a <__mdiff+0xd6>
 800c55e:	3f01      	subs	r7, #1
 800c560:	e7e7      	b.n	800c532 <__mdiff+0xee>
 800c562:	bf00      	nop
 800c564:	0800d270 	.word	0x0800d270
 800c568:	0800d281 	.word	0x0800d281

0800c56c <__d2b>:
 800c56c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c570:	460f      	mov	r7, r1
 800c572:	2101      	movs	r1, #1
 800c574:	ec59 8b10 	vmov	r8, r9, d0
 800c578:	4616      	mov	r6, r2
 800c57a:	f7ff fccd 	bl	800bf18 <_Balloc>
 800c57e:	4604      	mov	r4, r0
 800c580:	b930      	cbnz	r0, 800c590 <__d2b+0x24>
 800c582:	4602      	mov	r2, r0
 800c584:	4b23      	ldr	r3, [pc, #140]	@ (800c614 <__d2b+0xa8>)
 800c586:	4824      	ldr	r0, [pc, #144]	@ (800c618 <__d2b+0xac>)
 800c588:	f240 310f 	movw	r1, #783	@ 0x30f
 800c58c:	f000 fa82 	bl	800ca94 <__assert_func>
 800c590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c598:	b10d      	cbz	r5, 800c59e <__d2b+0x32>
 800c59a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5a4:	d023      	beq.n	800c5ee <__d2b+0x82>
 800c5a6:	4668      	mov	r0, sp
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	f7ff fd7c 	bl	800c0a6 <__lo0bits>
 800c5ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5b2:	b1d0      	cbz	r0, 800c5ea <__d2b+0x7e>
 800c5b4:	f1c0 0320 	rsb	r3, r0, #32
 800c5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	40c2      	lsrs	r2, r0
 800c5c0:	6163      	str	r3, [r4, #20]
 800c5c2:	9201      	str	r2, [sp, #4]
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	61a3      	str	r3, [r4, #24]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bf0c      	ite	eq
 800c5cc:	2201      	moveq	r2, #1
 800c5ce:	2202      	movne	r2, #2
 800c5d0:	6122      	str	r2, [r4, #16]
 800c5d2:	b1a5      	cbz	r5, 800c5fe <__d2b+0x92>
 800c5d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5d8:	4405      	add	r5, r0
 800c5da:	603d      	str	r5, [r7, #0]
 800c5dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5e0:	6030      	str	r0, [r6, #0]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	b003      	add	sp, #12
 800c5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ea:	6161      	str	r1, [r4, #20]
 800c5ec:	e7ea      	b.n	800c5c4 <__d2b+0x58>
 800c5ee:	a801      	add	r0, sp, #4
 800c5f0:	f7ff fd59 	bl	800c0a6 <__lo0bits>
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	6163      	str	r3, [r4, #20]
 800c5f8:	3020      	adds	r0, #32
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	e7e8      	b.n	800c5d0 <__d2b+0x64>
 800c5fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c602:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c606:	6038      	str	r0, [r7, #0]
 800c608:	6918      	ldr	r0, [r3, #16]
 800c60a:	f7ff fd2d 	bl	800c068 <__hi0bits>
 800c60e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c612:	e7e5      	b.n	800c5e0 <__d2b+0x74>
 800c614:	0800d270 	.word	0x0800d270
 800c618:	0800d281 	.word	0x0800d281

0800c61c <__ssputs_r>:
 800c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	688e      	ldr	r6, [r1, #8]
 800c622:	461f      	mov	r7, r3
 800c624:	42be      	cmp	r6, r7
 800c626:	680b      	ldr	r3, [r1, #0]
 800c628:	4682      	mov	sl, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	4690      	mov	r8, r2
 800c62e:	d82d      	bhi.n	800c68c <__ssputs_r+0x70>
 800c630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c638:	d026      	beq.n	800c688 <__ssputs_r+0x6c>
 800c63a:	6965      	ldr	r5, [r4, #20]
 800c63c:	6909      	ldr	r1, [r1, #16]
 800c63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c642:	eba3 0901 	sub.w	r9, r3, r1
 800c646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c64a:	1c7b      	adds	r3, r7, #1
 800c64c:	444b      	add	r3, r9
 800c64e:	106d      	asrs	r5, r5, #1
 800c650:	429d      	cmp	r5, r3
 800c652:	bf38      	it	cc
 800c654:	461d      	movcc	r5, r3
 800c656:	0553      	lsls	r3, r2, #21
 800c658:	d527      	bpl.n	800c6aa <__ssputs_r+0x8e>
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7ff fbd0 	bl	800be00 <_malloc_r>
 800c660:	4606      	mov	r6, r0
 800c662:	b360      	cbz	r0, 800c6be <__ssputs_r+0xa2>
 800c664:	6921      	ldr	r1, [r4, #16]
 800c666:	464a      	mov	r2, r9
 800c668:	f000 fa06 	bl	800ca78 <memcpy>
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c676:	81a3      	strh	r3, [r4, #12]
 800c678:	6126      	str	r6, [r4, #16]
 800c67a:	6165      	str	r5, [r4, #20]
 800c67c:	444e      	add	r6, r9
 800c67e:	eba5 0509 	sub.w	r5, r5, r9
 800c682:	6026      	str	r6, [r4, #0]
 800c684:	60a5      	str	r5, [r4, #8]
 800c686:	463e      	mov	r6, r7
 800c688:	42be      	cmp	r6, r7
 800c68a:	d900      	bls.n	800c68e <__ssputs_r+0x72>
 800c68c:	463e      	mov	r6, r7
 800c68e:	6820      	ldr	r0, [r4, #0]
 800c690:	4632      	mov	r2, r6
 800c692:	4641      	mov	r1, r8
 800c694:	f000 f9c6 	bl	800ca24 <memmove>
 800c698:	68a3      	ldr	r3, [r4, #8]
 800c69a:	1b9b      	subs	r3, r3, r6
 800c69c:	60a3      	str	r3, [r4, #8]
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	4433      	add	r3, r6
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	f000 fa36 	bl	800cb1c <_realloc_r>
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	d1e0      	bne.n	800c678 <__ssputs_r+0x5c>
 800c6b6:	6921      	ldr	r1, [r4, #16]
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	f7ff fb2d 	bl	800bd18 <_free_r>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	f8ca 3000 	str.w	r3, [sl]
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	e7e9      	b.n	800c6a6 <__ssputs_r+0x8a>
	...

0800c6d4 <_svfiprintf_r>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	4698      	mov	r8, r3
 800c6da:	898b      	ldrh	r3, [r1, #12]
 800c6dc:	061b      	lsls	r3, r3, #24
 800c6de:	b09d      	sub	sp, #116	@ 0x74
 800c6e0:	4607      	mov	r7, r0
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	d510      	bpl.n	800c70a <_svfiprintf_r+0x36>
 800c6e8:	690b      	ldr	r3, [r1, #16]
 800c6ea:	b973      	cbnz	r3, 800c70a <_svfiprintf_r+0x36>
 800c6ec:	2140      	movs	r1, #64	@ 0x40
 800c6ee:	f7ff fb87 	bl	800be00 <_malloc_r>
 800c6f2:	6028      	str	r0, [r5, #0]
 800c6f4:	6128      	str	r0, [r5, #16]
 800c6f6:	b930      	cbnz	r0, 800c706 <_svfiprintf_r+0x32>
 800c6f8:	230c      	movs	r3, #12
 800c6fa:	603b      	str	r3, [r7, #0]
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	b01d      	add	sp, #116	@ 0x74
 800c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c706:	2340      	movs	r3, #64	@ 0x40
 800c708:	616b      	str	r3, [r5, #20]
 800c70a:	2300      	movs	r3, #0
 800c70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70e:	2320      	movs	r3, #32
 800c710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c714:	f8cd 800c 	str.w	r8, [sp, #12]
 800c718:	2330      	movs	r3, #48	@ 0x30
 800c71a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8b8 <_svfiprintf_r+0x1e4>
 800c71e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c722:	f04f 0901 	mov.w	r9, #1
 800c726:	4623      	mov	r3, r4
 800c728:	469a      	mov	sl, r3
 800c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c72e:	b10a      	cbz	r2, 800c734 <_svfiprintf_r+0x60>
 800c730:	2a25      	cmp	r2, #37	@ 0x25
 800c732:	d1f9      	bne.n	800c728 <_svfiprintf_r+0x54>
 800c734:	ebba 0b04 	subs.w	fp, sl, r4
 800c738:	d00b      	beq.n	800c752 <_svfiprintf_r+0x7e>
 800c73a:	465b      	mov	r3, fp
 800c73c:	4622      	mov	r2, r4
 800c73e:	4629      	mov	r1, r5
 800c740:	4638      	mov	r0, r7
 800c742:	f7ff ff6b 	bl	800c61c <__ssputs_r>
 800c746:	3001      	adds	r0, #1
 800c748:	f000 80a7 	beq.w	800c89a <_svfiprintf_r+0x1c6>
 800c74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c74e:	445a      	add	r2, fp
 800c750:	9209      	str	r2, [sp, #36]	@ 0x24
 800c752:	f89a 3000 	ldrb.w	r3, [sl]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 809f 	beq.w	800c89a <_svfiprintf_r+0x1c6>
 800c75c:	2300      	movs	r3, #0
 800c75e:	f04f 32ff 	mov.w	r2, #4294967295
 800c762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c766:	f10a 0a01 	add.w	sl, sl, #1
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	9307      	str	r3, [sp, #28]
 800c76e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c772:	931a      	str	r3, [sp, #104]	@ 0x68
 800c774:	4654      	mov	r4, sl
 800c776:	2205      	movs	r2, #5
 800c778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77c:	484e      	ldr	r0, [pc, #312]	@ (800c8b8 <_svfiprintf_r+0x1e4>)
 800c77e:	f7f3 fd27 	bl	80001d0 <memchr>
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	b9d8      	cbnz	r0, 800c7be <_svfiprintf_r+0xea>
 800c786:	06d0      	lsls	r0, r2, #27
 800c788:	bf44      	itt	mi
 800c78a:	2320      	movmi	r3, #32
 800c78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c790:	0711      	lsls	r1, r2, #28
 800c792:	bf44      	itt	mi
 800c794:	232b      	movmi	r3, #43	@ 0x2b
 800c796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c79a:	f89a 3000 	ldrb.w	r3, [sl]
 800c79e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7a0:	d015      	beq.n	800c7ce <_svfiprintf_r+0xfa>
 800c7a2:	9a07      	ldr	r2, [sp, #28]
 800c7a4:	4654      	mov	r4, sl
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	f04f 0c0a 	mov.w	ip, #10
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b2:	3b30      	subs	r3, #48	@ 0x30
 800c7b4:	2b09      	cmp	r3, #9
 800c7b6:	d94b      	bls.n	800c850 <_svfiprintf_r+0x17c>
 800c7b8:	b1b0      	cbz	r0, 800c7e8 <_svfiprintf_r+0x114>
 800c7ba:	9207      	str	r2, [sp, #28]
 800c7bc:	e014      	b.n	800c7e8 <_svfiprintf_r+0x114>
 800c7be:	eba0 0308 	sub.w	r3, r0, r8
 800c7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	46a2      	mov	sl, r4
 800c7cc:	e7d2      	b.n	800c774 <_svfiprintf_r+0xa0>
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	1d19      	adds	r1, r3, #4
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	9103      	str	r1, [sp, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bfbb      	ittet	lt
 800c7da:	425b      	neglt	r3, r3
 800c7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e0:	9307      	strge	r3, [sp, #28]
 800c7e2:	9307      	strlt	r3, [sp, #28]
 800c7e4:	bfb8      	it	lt
 800c7e6:	9204      	strlt	r2, [sp, #16]
 800c7e8:	7823      	ldrb	r3, [r4, #0]
 800c7ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7ec:	d10a      	bne.n	800c804 <_svfiprintf_r+0x130>
 800c7ee:	7863      	ldrb	r3, [r4, #1]
 800c7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f2:	d132      	bne.n	800c85a <_svfiprintf_r+0x186>
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	9203      	str	r2, [sp, #12]
 800c7fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c800:	3402      	adds	r4, #2
 800c802:	9305      	str	r3, [sp, #20]
 800c804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8c8 <_svfiprintf_r+0x1f4>
 800c808:	7821      	ldrb	r1, [r4, #0]
 800c80a:	2203      	movs	r2, #3
 800c80c:	4650      	mov	r0, sl
 800c80e:	f7f3 fcdf 	bl	80001d0 <memchr>
 800c812:	b138      	cbz	r0, 800c824 <_svfiprintf_r+0x150>
 800c814:	9b04      	ldr	r3, [sp, #16]
 800c816:	eba0 000a 	sub.w	r0, r0, sl
 800c81a:	2240      	movs	r2, #64	@ 0x40
 800c81c:	4082      	lsls	r2, r0
 800c81e:	4313      	orrs	r3, r2
 800c820:	3401      	adds	r4, #1
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c828:	4824      	ldr	r0, [pc, #144]	@ (800c8bc <_svfiprintf_r+0x1e8>)
 800c82a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c82e:	2206      	movs	r2, #6
 800c830:	f7f3 fcce 	bl	80001d0 <memchr>
 800c834:	2800      	cmp	r0, #0
 800c836:	d036      	beq.n	800c8a6 <_svfiprintf_r+0x1d2>
 800c838:	4b21      	ldr	r3, [pc, #132]	@ (800c8c0 <_svfiprintf_r+0x1ec>)
 800c83a:	bb1b      	cbnz	r3, 800c884 <_svfiprintf_r+0x1b0>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	3307      	adds	r3, #7
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	3308      	adds	r3, #8
 800c846:	9303      	str	r3, [sp, #12]
 800c848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84a:	4433      	add	r3, r6
 800c84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c84e:	e76a      	b.n	800c726 <_svfiprintf_r+0x52>
 800c850:	fb0c 3202 	mla	r2, ip, r2, r3
 800c854:	460c      	mov	r4, r1
 800c856:	2001      	movs	r0, #1
 800c858:	e7a8      	b.n	800c7ac <_svfiprintf_r+0xd8>
 800c85a:	2300      	movs	r3, #0
 800c85c:	3401      	adds	r4, #1
 800c85e:	9305      	str	r3, [sp, #20]
 800c860:	4619      	mov	r1, r3
 800c862:	f04f 0c0a 	mov.w	ip, #10
 800c866:	4620      	mov	r0, r4
 800c868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c86c:	3a30      	subs	r2, #48	@ 0x30
 800c86e:	2a09      	cmp	r2, #9
 800c870:	d903      	bls.n	800c87a <_svfiprintf_r+0x1a6>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d0c6      	beq.n	800c804 <_svfiprintf_r+0x130>
 800c876:	9105      	str	r1, [sp, #20]
 800c878:	e7c4      	b.n	800c804 <_svfiprintf_r+0x130>
 800c87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c87e:	4604      	mov	r4, r0
 800c880:	2301      	movs	r3, #1
 800c882:	e7f0      	b.n	800c866 <_svfiprintf_r+0x192>
 800c884:	ab03      	add	r3, sp, #12
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	462a      	mov	r2, r5
 800c88a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c4 <_svfiprintf_r+0x1f0>)
 800c88c:	a904      	add	r1, sp, #16
 800c88e:	4638      	mov	r0, r7
 800c890:	f7fd fe96 	bl	800a5c0 <_printf_float>
 800c894:	1c42      	adds	r2, r0, #1
 800c896:	4606      	mov	r6, r0
 800c898:	d1d6      	bne.n	800c848 <_svfiprintf_r+0x174>
 800c89a:	89ab      	ldrh	r3, [r5, #12]
 800c89c:	065b      	lsls	r3, r3, #25
 800c89e:	f53f af2d 	bmi.w	800c6fc <_svfiprintf_r+0x28>
 800c8a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8a4:	e72c      	b.n	800c700 <_svfiprintf_r+0x2c>
 800c8a6:	ab03      	add	r3, sp, #12
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	462a      	mov	r2, r5
 800c8ac:	4b05      	ldr	r3, [pc, #20]	@ (800c8c4 <_svfiprintf_r+0x1f0>)
 800c8ae:	a904      	add	r1, sp, #16
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7fe f91d 	bl	800aaf0 <_printf_i>
 800c8b6:	e7ed      	b.n	800c894 <_svfiprintf_r+0x1c0>
 800c8b8:	0800d3d8 	.word	0x0800d3d8
 800c8bc:	0800d3e2 	.word	0x0800d3e2
 800c8c0:	0800a5c1 	.word	0x0800a5c1
 800c8c4:	0800c61d 	.word	0x0800c61d
 800c8c8:	0800d3de 	.word	0x0800d3de

0800c8cc <__sflush_r>:
 800c8cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	0716      	lsls	r6, r2, #28
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	460c      	mov	r4, r1
 800c8da:	d454      	bmi.n	800c986 <__sflush_r+0xba>
 800c8dc:	684b      	ldr	r3, [r1, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	dc02      	bgt.n	800c8e8 <__sflush_r+0x1c>
 800c8e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dd48      	ble.n	800c97a <__sflush_r+0xae>
 800c8e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8ea:	2e00      	cmp	r6, #0
 800c8ec:	d045      	beq.n	800c97a <__sflush_r+0xae>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8f4:	682f      	ldr	r7, [r5, #0]
 800c8f6:	6a21      	ldr	r1, [r4, #32]
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	d030      	beq.n	800c95e <__sflush_r+0x92>
 800c8fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	0759      	lsls	r1, r3, #29
 800c902:	d505      	bpl.n	800c910 <__sflush_r+0x44>
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c90a:	b10b      	cbz	r3, 800c910 <__sflush_r+0x44>
 800c90c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	2300      	movs	r3, #0
 800c912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c914:	6a21      	ldr	r1, [r4, #32]
 800c916:	4628      	mov	r0, r5
 800c918:	47b0      	blx	r6
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	d106      	bne.n	800c92e <__sflush_r+0x62>
 800c920:	6829      	ldr	r1, [r5, #0]
 800c922:	291d      	cmp	r1, #29
 800c924:	d82b      	bhi.n	800c97e <__sflush_r+0xb2>
 800c926:	4a2a      	ldr	r2, [pc, #168]	@ (800c9d0 <__sflush_r+0x104>)
 800c928:	410a      	asrs	r2, r1
 800c92a:	07d6      	lsls	r6, r2, #31
 800c92c:	d427      	bmi.n	800c97e <__sflush_r+0xb2>
 800c92e:	2200      	movs	r2, #0
 800c930:	6062      	str	r2, [r4, #4]
 800c932:	04d9      	lsls	r1, r3, #19
 800c934:	6922      	ldr	r2, [r4, #16]
 800c936:	6022      	str	r2, [r4, #0]
 800c938:	d504      	bpl.n	800c944 <__sflush_r+0x78>
 800c93a:	1c42      	adds	r2, r0, #1
 800c93c:	d101      	bne.n	800c942 <__sflush_r+0x76>
 800c93e:	682b      	ldr	r3, [r5, #0]
 800c940:	b903      	cbnz	r3, 800c944 <__sflush_r+0x78>
 800c942:	6560      	str	r0, [r4, #84]	@ 0x54
 800c944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c946:	602f      	str	r7, [r5, #0]
 800c948:	b1b9      	cbz	r1, 800c97a <__sflush_r+0xae>
 800c94a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c94e:	4299      	cmp	r1, r3
 800c950:	d002      	beq.n	800c958 <__sflush_r+0x8c>
 800c952:	4628      	mov	r0, r5
 800c954:	f7ff f9e0 	bl	800bd18 <_free_r>
 800c958:	2300      	movs	r3, #0
 800c95a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c95c:	e00d      	b.n	800c97a <__sflush_r+0xae>
 800c95e:	2301      	movs	r3, #1
 800c960:	4628      	mov	r0, r5
 800c962:	47b0      	blx	r6
 800c964:	4602      	mov	r2, r0
 800c966:	1c50      	adds	r0, r2, #1
 800c968:	d1c9      	bne.n	800c8fe <__sflush_r+0x32>
 800c96a:	682b      	ldr	r3, [r5, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0c6      	beq.n	800c8fe <__sflush_r+0x32>
 800c970:	2b1d      	cmp	r3, #29
 800c972:	d001      	beq.n	800c978 <__sflush_r+0xac>
 800c974:	2b16      	cmp	r3, #22
 800c976:	d11e      	bne.n	800c9b6 <__sflush_r+0xea>
 800c978:	602f      	str	r7, [r5, #0]
 800c97a:	2000      	movs	r0, #0
 800c97c:	e022      	b.n	800c9c4 <__sflush_r+0xf8>
 800c97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c982:	b21b      	sxth	r3, r3
 800c984:	e01b      	b.n	800c9be <__sflush_r+0xf2>
 800c986:	690f      	ldr	r7, [r1, #16]
 800c988:	2f00      	cmp	r7, #0
 800c98a:	d0f6      	beq.n	800c97a <__sflush_r+0xae>
 800c98c:	0793      	lsls	r3, r2, #30
 800c98e:	680e      	ldr	r6, [r1, #0]
 800c990:	bf08      	it	eq
 800c992:	694b      	ldreq	r3, [r1, #20]
 800c994:	600f      	str	r7, [r1, #0]
 800c996:	bf18      	it	ne
 800c998:	2300      	movne	r3, #0
 800c99a:	eba6 0807 	sub.w	r8, r6, r7
 800c99e:	608b      	str	r3, [r1, #8]
 800c9a0:	f1b8 0f00 	cmp.w	r8, #0
 800c9a4:	dde9      	ble.n	800c97a <__sflush_r+0xae>
 800c9a6:	6a21      	ldr	r1, [r4, #32]
 800c9a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c9aa:	4643      	mov	r3, r8
 800c9ac:	463a      	mov	r2, r7
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	47b0      	blx	r6
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	dc08      	bgt.n	800c9c8 <__sflush_r+0xfc>
 800c9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9be:	81a3      	strh	r3, [r4, #12]
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c8:	4407      	add	r7, r0
 800c9ca:	eba8 0800 	sub.w	r8, r8, r0
 800c9ce:	e7e7      	b.n	800c9a0 <__sflush_r+0xd4>
 800c9d0:	dfbffffe 	.word	0xdfbffffe

0800c9d4 <_fflush_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	690b      	ldr	r3, [r1, #16]
 800c9d8:	4605      	mov	r5, r0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	b913      	cbnz	r3, 800c9e4 <_fflush_r+0x10>
 800c9de:	2500      	movs	r5, #0
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	b118      	cbz	r0, 800c9ee <_fflush_r+0x1a>
 800c9e6:	6a03      	ldr	r3, [r0, #32]
 800c9e8:	b90b      	cbnz	r3, 800c9ee <_fflush_r+0x1a>
 800c9ea:	f7fe fa2d 	bl	800ae48 <__sinit>
 800c9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d0f3      	beq.n	800c9de <_fflush_r+0xa>
 800c9f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9f8:	07d0      	lsls	r0, r2, #31
 800c9fa:	d404      	bmi.n	800ca06 <_fflush_r+0x32>
 800c9fc:	0599      	lsls	r1, r3, #22
 800c9fe:	d402      	bmi.n	800ca06 <_fflush_r+0x32>
 800ca00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca02:	f7fe fb38 	bl	800b076 <__retarget_lock_acquire_recursive>
 800ca06:	4628      	mov	r0, r5
 800ca08:	4621      	mov	r1, r4
 800ca0a:	f7ff ff5f 	bl	800c8cc <__sflush_r>
 800ca0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca10:	07da      	lsls	r2, r3, #31
 800ca12:	4605      	mov	r5, r0
 800ca14:	d4e4      	bmi.n	800c9e0 <_fflush_r+0xc>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	059b      	lsls	r3, r3, #22
 800ca1a:	d4e1      	bmi.n	800c9e0 <_fflush_r+0xc>
 800ca1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca1e:	f7fe fb2b 	bl	800b078 <__retarget_lock_release_recursive>
 800ca22:	e7dd      	b.n	800c9e0 <_fflush_r+0xc>

0800ca24 <memmove>:
 800ca24:	4288      	cmp	r0, r1
 800ca26:	b510      	push	{r4, lr}
 800ca28:	eb01 0402 	add.w	r4, r1, r2
 800ca2c:	d902      	bls.n	800ca34 <memmove+0x10>
 800ca2e:	4284      	cmp	r4, r0
 800ca30:	4623      	mov	r3, r4
 800ca32:	d807      	bhi.n	800ca44 <memmove+0x20>
 800ca34:	1e43      	subs	r3, r0, #1
 800ca36:	42a1      	cmp	r1, r4
 800ca38:	d008      	beq.n	800ca4c <memmove+0x28>
 800ca3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca42:	e7f8      	b.n	800ca36 <memmove+0x12>
 800ca44:	4402      	add	r2, r0
 800ca46:	4601      	mov	r1, r0
 800ca48:	428a      	cmp	r2, r1
 800ca4a:	d100      	bne.n	800ca4e <memmove+0x2a>
 800ca4c:	bd10      	pop	{r4, pc}
 800ca4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca56:	e7f7      	b.n	800ca48 <memmove+0x24>

0800ca58 <_sbrk_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4d06      	ldr	r5, [pc, #24]	@ (800ca74 <_sbrk_r+0x1c>)
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	602b      	str	r3, [r5, #0]
 800ca64:	f7f6 f952 	bl	8002d0c <_sbrk>
 800ca68:	1c43      	adds	r3, r0, #1
 800ca6a:	d102      	bne.n	800ca72 <_sbrk_r+0x1a>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	b103      	cbz	r3, 800ca72 <_sbrk_r+0x1a>
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	200009ac 	.word	0x200009ac

0800ca78 <memcpy>:
 800ca78:	440a      	add	r2, r1
 800ca7a:	4291      	cmp	r1, r2
 800ca7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca80:	d100      	bne.n	800ca84 <memcpy+0xc>
 800ca82:	4770      	bx	lr
 800ca84:	b510      	push	{r4, lr}
 800ca86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca8e:	4291      	cmp	r1, r2
 800ca90:	d1f9      	bne.n	800ca86 <memcpy+0xe>
 800ca92:	bd10      	pop	{r4, pc}

0800ca94 <__assert_func>:
 800ca94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca96:	4614      	mov	r4, r2
 800ca98:	461a      	mov	r2, r3
 800ca9a:	4b09      	ldr	r3, [pc, #36]	@ (800cac0 <__assert_func+0x2c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4605      	mov	r5, r0
 800caa0:	68d8      	ldr	r0, [r3, #12]
 800caa2:	b954      	cbnz	r4, 800caba <__assert_func+0x26>
 800caa4:	4b07      	ldr	r3, [pc, #28]	@ (800cac4 <__assert_func+0x30>)
 800caa6:	461c      	mov	r4, r3
 800caa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caac:	9100      	str	r1, [sp, #0]
 800caae:	462b      	mov	r3, r5
 800cab0:	4905      	ldr	r1, [pc, #20]	@ (800cac8 <__assert_func+0x34>)
 800cab2:	f000 f86f 	bl	800cb94 <fiprintf>
 800cab6:	f000 f87f 	bl	800cbb8 <abort>
 800caba:	4b04      	ldr	r3, [pc, #16]	@ (800cacc <__assert_func+0x38>)
 800cabc:	e7f4      	b.n	800caa8 <__assert_func+0x14>
 800cabe:	bf00      	nop
 800cac0:	2000001c 	.word	0x2000001c
 800cac4:	0800d42e 	.word	0x0800d42e
 800cac8:	0800d400 	.word	0x0800d400
 800cacc:	0800d3f3 	.word	0x0800d3f3

0800cad0 <_calloc_r>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	fba1 5402 	umull	r5, r4, r1, r2
 800cad6:	b93c      	cbnz	r4, 800cae8 <_calloc_r+0x18>
 800cad8:	4629      	mov	r1, r5
 800cada:	f7ff f991 	bl	800be00 <_malloc_r>
 800cade:	4606      	mov	r6, r0
 800cae0:	b928      	cbnz	r0, 800caee <_calloc_r+0x1e>
 800cae2:	2600      	movs	r6, #0
 800cae4:	4630      	mov	r0, r6
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	220c      	movs	r2, #12
 800caea:	6002      	str	r2, [r0, #0]
 800caec:	e7f9      	b.n	800cae2 <_calloc_r+0x12>
 800caee:	462a      	mov	r2, r5
 800caf0:	4621      	mov	r1, r4
 800caf2:	f7fe fa42 	bl	800af7a <memset>
 800caf6:	e7f5      	b.n	800cae4 <_calloc_r+0x14>

0800caf8 <__ascii_mbtowc>:
 800caf8:	b082      	sub	sp, #8
 800cafa:	b901      	cbnz	r1, 800cafe <__ascii_mbtowc+0x6>
 800cafc:	a901      	add	r1, sp, #4
 800cafe:	b142      	cbz	r2, 800cb12 <__ascii_mbtowc+0x1a>
 800cb00:	b14b      	cbz	r3, 800cb16 <__ascii_mbtowc+0x1e>
 800cb02:	7813      	ldrb	r3, [r2, #0]
 800cb04:	600b      	str	r3, [r1, #0]
 800cb06:	7812      	ldrb	r2, [r2, #0]
 800cb08:	1e10      	subs	r0, r2, #0
 800cb0a:	bf18      	it	ne
 800cb0c:	2001      	movne	r0, #1
 800cb0e:	b002      	add	sp, #8
 800cb10:	4770      	bx	lr
 800cb12:	4610      	mov	r0, r2
 800cb14:	e7fb      	b.n	800cb0e <__ascii_mbtowc+0x16>
 800cb16:	f06f 0001 	mvn.w	r0, #1
 800cb1a:	e7f8      	b.n	800cb0e <__ascii_mbtowc+0x16>

0800cb1c <_realloc_r>:
 800cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	4680      	mov	r8, r0
 800cb22:	4615      	mov	r5, r2
 800cb24:	460c      	mov	r4, r1
 800cb26:	b921      	cbnz	r1, 800cb32 <_realloc_r+0x16>
 800cb28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	f7ff b967 	b.w	800be00 <_malloc_r>
 800cb32:	b92a      	cbnz	r2, 800cb40 <_realloc_r+0x24>
 800cb34:	f7ff f8f0 	bl	800bd18 <_free_r>
 800cb38:	2400      	movs	r4, #0
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb40:	f000 f841 	bl	800cbc6 <_malloc_usable_size_r>
 800cb44:	4285      	cmp	r5, r0
 800cb46:	4606      	mov	r6, r0
 800cb48:	d802      	bhi.n	800cb50 <_realloc_r+0x34>
 800cb4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb4e:	d8f4      	bhi.n	800cb3a <_realloc_r+0x1e>
 800cb50:	4629      	mov	r1, r5
 800cb52:	4640      	mov	r0, r8
 800cb54:	f7ff f954 	bl	800be00 <_malloc_r>
 800cb58:	4607      	mov	r7, r0
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0ec      	beq.n	800cb38 <_realloc_r+0x1c>
 800cb5e:	42b5      	cmp	r5, r6
 800cb60:	462a      	mov	r2, r5
 800cb62:	4621      	mov	r1, r4
 800cb64:	bf28      	it	cs
 800cb66:	4632      	movcs	r2, r6
 800cb68:	f7ff ff86 	bl	800ca78 <memcpy>
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	4640      	mov	r0, r8
 800cb70:	f7ff f8d2 	bl	800bd18 <_free_r>
 800cb74:	463c      	mov	r4, r7
 800cb76:	e7e0      	b.n	800cb3a <_realloc_r+0x1e>

0800cb78 <__ascii_wctomb>:
 800cb78:	4603      	mov	r3, r0
 800cb7a:	4608      	mov	r0, r1
 800cb7c:	b141      	cbz	r1, 800cb90 <__ascii_wctomb+0x18>
 800cb7e:	2aff      	cmp	r2, #255	@ 0xff
 800cb80:	d904      	bls.n	800cb8c <__ascii_wctomb+0x14>
 800cb82:	228a      	movs	r2, #138	@ 0x8a
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	4770      	bx	lr
 800cb8c:	700a      	strb	r2, [r1, #0]
 800cb8e:	2001      	movs	r0, #1
 800cb90:	4770      	bx	lr
	...

0800cb94 <fiprintf>:
 800cb94:	b40e      	push	{r1, r2, r3}
 800cb96:	b503      	push	{r0, r1, lr}
 800cb98:	4601      	mov	r1, r0
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	4805      	ldr	r0, [pc, #20]	@ (800cbb4 <fiprintf+0x20>)
 800cb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba2:	6800      	ldr	r0, [r0, #0]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	f000 f83f 	bl	800cc28 <_vfiprintf_r>
 800cbaa:	b002      	add	sp, #8
 800cbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb0:	b003      	add	sp, #12
 800cbb2:	4770      	bx	lr
 800cbb4:	2000001c 	.word	0x2000001c

0800cbb8 <abort>:
 800cbb8:	b508      	push	{r3, lr}
 800cbba:	2006      	movs	r0, #6
 800cbbc:	f000 fa08 	bl	800cfd0 <raise>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7f6 f82b 	bl	8002c1c <_exit>

0800cbc6 <_malloc_usable_size_r>:
 800cbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbca:	1f18      	subs	r0, r3, #4
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfbc      	itt	lt
 800cbd0:	580b      	ldrlt	r3, [r1, r0]
 800cbd2:	18c0      	addlt	r0, r0, r3
 800cbd4:	4770      	bx	lr

0800cbd6 <__sfputc_r>:
 800cbd6:	6893      	ldr	r3, [r2, #8]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	b410      	push	{r4}
 800cbde:	6093      	str	r3, [r2, #8]
 800cbe0:	da08      	bge.n	800cbf4 <__sfputc_r+0x1e>
 800cbe2:	6994      	ldr	r4, [r2, #24]
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	db01      	blt.n	800cbec <__sfputc_r+0x16>
 800cbe8:	290a      	cmp	r1, #10
 800cbea:	d103      	bne.n	800cbf4 <__sfputc_r+0x1e>
 800cbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf0:	f000 b932 	b.w	800ce58 <__swbuf_r>
 800cbf4:	6813      	ldr	r3, [r2, #0]
 800cbf6:	1c58      	adds	r0, r3, #1
 800cbf8:	6010      	str	r0, [r2, #0]
 800cbfa:	7019      	strb	r1, [r3, #0]
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <__sfputs_r>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	4606      	mov	r6, r0
 800cc08:	460f      	mov	r7, r1
 800cc0a:	4614      	mov	r4, r2
 800cc0c:	18d5      	adds	r5, r2, r3
 800cc0e:	42ac      	cmp	r4, r5
 800cc10:	d101      	bne.n	800cc16 <__sfputs_r+0x12>
 800cc12:	2000      	movs	r0, #0
 800cc14:	e007      	b.n	800cc26 <__sfputs_r+0x22>
 800cc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc1a:	463a      	mov	r2, r7
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff ffda 	bl	800cbd6 <__sfputc_r>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	d1f3      	bne.n	800cc0e <__sfputs_r+0xa>
 800cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc28 <_vfiprintf_r>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	b09d      	sub	sp, #116	@ 0x74
 800cc30:	4614      	mov	r4, r2
 800cc32:	4698      	mov	r8, r3
 800cc34:	4606      	mov	r6, r0
 800cc36:	b118      	cbz	r0, 800cc40 <_vfiprintf_r+0x18>
 800cc38:	6a03      	ldr	r3, [r0, #32]
 800cc3a:	b90b      	cbnz	r3, 800cc40 <_vfiprintf_r+0x18>
 800cc3c:	f7fe f904 	bl	800ae48 <__sinit>
 800cc40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc42:	07d9      	lsls	r1, r3, #31
 800cc44:	d405      	bmi.n	800cc52 <_vfiprintf_r+0x2a>
 800cc46:	89ab      	ldrh	r3, [r5, #12]
 800cc48:	059a      	lsls	r2, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_vfiprintf_r+0x2a>
 800cc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc4e:	f7fe fa12 	bl	800b076 <__retarget_lock_acquire_recursive>
 800cc52:	89ab      	ldrh	r3, [r5, #12]
 800cc54:	071b      	lsls	r3, r3, #28
 800cc56:	d501      	bpl.n	800cc5c <_vfiprintf_r+0x34>
 800cc58:	692b      	ldr	r3, [r5, #16]
 800cc5a:	b99b      	cbnz	r3, 800cc84 <_vfiprintf_r+0x5c>
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f000 f938 	bl	800ced4 <__swsetup_r>
 800cc64:	b170      	cbz	r0, 800cc84 <_vfiprintf_r+0x5c>
 800cc66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc68:	07dc      	lsls	r4, r3, #31
 800cc6a:	d504      	bpl.n	800cc76 <_vfiprintf_r+0x4e>
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	b01d      	add	sp, #116	@ 0x74
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc76:	89ab      	ldrh	r3, [r5, #12]
 800cc78:	0598      	lsls	r0, r3, #22
 800cc7a:	d4f7      	bmi.n	800cc6c <_vfiprintf_r+0x44>
 800cc7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc7e:	f7fe f9fb 	bl	800b078 <__retarget_lock_release_recursive>
 800cc82:	e7f3      	b.n	800cc6c <_vfiprintf_r+0x44>
 800cc84:	2300      	movs	r3, #0
 800cc86:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc88:	2320      	movs	r3, #32
 800cc8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc92:	2330      	movs	r3, #48	@ 0x30
 800cc94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce44 <_vfiprintf_r+0x21c>
 800cc98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc9c:	f04f 0901 	mov.w	r9, #1
 800cca0:	4623      	mov	r3, r4
 800cca2:	469a      	mov	sl, r3
 800cca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca8:	b10a      	cbz	r2, 800ccae <_vfiprintf_r+0x86>
 800ccaa:	2a25      	cmp	r2, #37	@ 0x25
 800ccac:	d1f9      	bne.n	800cca2 <_vfiprintf_r+0x7a>
 800ccae:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb2:	d00b      	beq.n	800cccc <_vfiprintf_r+0xa4>
 800ccb4:	465b      	mov	r3, fp
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ffa2 	bl	800cc04 <__sfputs_r>
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f000 80a7 	beq.w	800ce14 <_vfiprintf_r+0x1ec>
 800ccc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccc8:	445a      	add	r2, fp
 800ccca:	9209      	str	r2, [sp, #36]	@ 0x24
 800cccc:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 809f 	beq.w	800ce14 <_vfiprintf_r+0x1ec>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce0:	f10a 0a01 	add.w	sl, sl, #1
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	9307      	str	r3, [sp, #28]
 800cce8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccec:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccee:	4654      	mov	r4, sl
 800ccf0:	2205      	movs	r2, #5
 800ccf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf6:	4853      	ldr	r0, [pc, #332]	@ (800ce44 <_vfiprintf_r+0x21c>)
 800ccf8:	f7f3 fa6a 	bl	80001d0 <memchr>
 800ccfc:	9a04      	ldr	r2, [sp, #16]
 800ccfe:	b9d8      	cbnz	r0, 800cd38 <_vfiprintf_r+0x110>
 800cd00:	06d1      	lsls	r1, r2, #27
 800cd02:	bf44      	itt	mi
 800cd04:	2320      	movmi	r3, #32
 800cd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd0a:	0713      	lsls	r3, r2, #28
 800cd0c:	bf44      	itt	mi
 800cd0e:	232b      	movmi	r3, #43	@ 0x2b
 800cd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd14:	f89a 3000 	ldrb.w	r3, [sl]
 800cd18:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd1a:	d015      	beq.n	800cd48 <_vfiprintf_r+0x120>
 800cd1c:	9a07      	ldr	r2, [sp, #28]
 800cd1e:	4654      	mov	r4, sl
 800cd20:	2000      	movs	r0, #0
 800cd22:	f04f 0c0a 	mov.w	ip, #10
 800cd26:	4621      	mov	r1, r4
 800cd28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd2c:	3b30      	subs	r3, #48	@ 0x30
 800cd2e:	2b09      	cmp	r3, #9
 800cd30:	d94b      	bls.n	800cdca <_vfiprintf_r+0x1a2>
 800cd32:	b1b0      	cbz	r0, 800cd62 <_vfiprintf_r+0x13a>
 800cd34:	9207      	str	r2, [sp, #28]
 800cd36:	e014      	b.n	800cd62 <_vfiprintf_r+0x13a>
 800cd38:	eba0 0308 	sub.w	r3, r0, r8
 800cd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd40:	4313      	orrs	r3, r2
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	46a2      	mov	sl, r4
 800cd46:	e7d2      	b.n	800ccee <_vfiprintf_r+0xc6>
 800cd48:	9b03      	ldr	r3, [sp, #12]
 800cd4a:	1d19      	adds	r1, r3, #4
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	9103      	str	r1, [sp, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	bfbb      	ittet	lt
 800cd54:	425b      	neglt	r3, r3
 800cd56:	f042 0202 	orrlt.w	r2, r2, #2
 800cd5a:	9307      	strge	r3, [sp, #28]
 800cd5c:	9307      	strlt	r3, [sp, #28]
 800cd5e:	bfb8      	it	lt
 800cd60:	9204      	strlt	r2, [sp, #16]
 800cd62:	7823      	ldrb	r3, [r4, #0]
 800cd64:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd66:	d10a      	bne.n	800cd7e <_vfiprintf_r+0x156>
 800cd68:	7863      	ldrb	r3, [r4, #1]
 800cd6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd6c:	d132      	bne.n	800cdd4 <_vfiprintf_r+0x1ac>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	1d1a      	adds	r2, r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	9203      	str	r2, [sp, #12]
 800cd76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd7a:	3402      	adds	r4, #2
 800cd7c:	9305      	str	r3, [sp, #20]
 800cd7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce54 <_vfiprintf_r+0x22c>
 800cd82:	7821      	ldrb	r1, [r4, #0]
 800cd84:	2203      	movs	r2, #3
 800cd86:	4650      	mov	r0, sl
 800cd88:	f7f3 fa22 	bl	80001d0 <memchr>
 800cd8c:	b138      	cbz	r0, 800cd9e <_vfiprintf_r+0x176>
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	eba0 000a 	sub.w	r0, r0, sl
 800cd94:	2240      	movs	r2, #64	@ 0x40
 800cd96:	4082      	lsls	r2, r0
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda2:	4829      	ldr	r0, [pc, #164]	@ (800ce48 <_vfiprintf_r+0x220>)
 800cda4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cda8:	2206      	movs	r2, #6
 800cdaa:	f7f3 fa11 	bl	80001d0 <memchr>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d03f      	beq.n	800ce32 <_vfiprintf_r+0x20a>
 800cdb2:	4b26      	ldr	r3, [pc, #152]	@ (800ce4c <_vfiprintf_r+0x224>)
 800cdb4:	bb1b      	cbnz	r3, 800cdfe <_vfiprintf_r+0x1d6>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	3307      	adds	r3, #7
 800cdba:	f023 0307 	bic.w	r3, r3, #7
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc4:	443b      	add	r3, r7
 800cdc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdc8:	e76a      	b.n	800cca0 <_vfiprintf_r+0x78>
 800cdca:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdce:	460c      	mov	r4, r1
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	e7a8      	b.n	800cd26 <_vfiprintf_r+0xfe>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	3401      	adds	r4, #1
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	4619      	mov	r1, r3
 800cddc:	f04f 0c0a 	mov.w	ip, #10
 800cde0:	4620      	mov	r0, r4
 800cde2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cde6:	3a30      	subs	r2, #48	@ 0x30
 800cde8:	2a09      	cmp	r2, #9
 800cdea:	d903      	bls.n	800cdf4 <_vfiprintf_r+0x1cc>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d0c6      	beq.n	800cd7e <_vfiprintf_r+0x156>
 800cdf0:	9105      	str	r1, [sp, #20]
 800cdf2:	e7c4      	b.n	800cd7e <_vfiprintf_r+0x156>
 800cdf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e7f0      	b.n	800cde0 <_vfiprintf_r+0x1b8>
 800cdfe:	ab03      	add	r3, sp, #12
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	462a      	mov	r2, r5
 800ce04:	4b12      	ldr	r3, [pc, #72]	@ (800ce50 <_vfiprintf_r+0x228>)
 800ce06:	a904      	add	r1, sp, #16
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f7fd fbd9 	bl	800a5c0 <_printf_float>
 800ce0e:	4607      	mov	r7, r0
 800ce10:	1c78      	adds	r0, r7, #1
 800ce12:	d1d6      	bne.n	800cdc2 <_vfiprintf_r+0x19a>
 800ce14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce16:	07d9      	lsls	r1, r3, #31
 800ce18:	d405      	bmi.n	800ce26 <_vfiprintf_r+0x1fe>
 800ce1a:	89ab      	ldrh	r3, [r5, #12]
 800ce1c:	059a      	lsls	r2, r3, #22
 800ce1e:	d402      	bmi.n	800ce26 <_vfiprintf_r+0x1fe>
 800ce20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce22:	f7fe f929 	bl	800b078 <__retarget_lock_release_recursive>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	065b      	lsls	r3, r3, #25
 800ce2a:	f53f af1f 	bmi.w	800cc6c <_vfiprintf_r+0x44>
 800ce2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce30:	e71e      	b.n	800cc70 <_vfiprintf_r+0x48>
 800ce32:	ab03      	add	r3, sp, #12
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	462a      	mov	r2, r5
 800ce38:	4b05      	ldr	r3, [pc, #20]	@ (800ce50 <_vfiprintf_r+0x228>)
 800ce3a:	a904      	add	r1, sp, #16
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7fd fe57 	bl	800aaf0 <_printf_i>
 800ce42:	e7e4      	b.n	800ce0e <_vfiprintf_r+0x1e6>
 800ce44:	0800d3d8 	.word	0x0800d3d8
 800ce48:	0800d3e2 	.word	0x0800d3e2
 800ce4c:	0800a5c1 	.word	0x0800a5c1
 800ce50:	0800cc05 	.word	0x0800cc05
 800ce54:	0800d3de 	.word	0x0800d3de

0800ce58 <__swbuf_r>:
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	460e      	mov	r6, r1
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	4605      	mov	r5, r0
 800ce60:	b118      	cbz	r0, 800ce6a <__swbuf_r+0x12>
 800ce62:	6a03      	ldr	r3, [r0, #32]
 800ce64:	b90b      	cbnz	r3, 800ce6a <__swbuf_r+0x12>
 800ce66:	f7fd ffef 	bl	800ae48 <__sinit>
 800ce6a:	69a3      	ldr	r3, [r4, #24]
 800ce6c:	60a3      	str	r3, [r4, #8]
 800ce6e:	89a3      	ldrh	r3, [r4, #12]
 800ce70:	071a      	lsls	r2, r3, #28
 800ce72:	d501      	bpl.n	800ce78 <__swbuf_r+0x20>
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	b943      	cbnz	r3, 800ce8a <__swbuf_r+0x32>
 800ce78:	4621      	mov	r1, r4
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f000 f82a 	bl	800ced4 <__swsetup_r>
 800ce80:	b118      	cbz	r0, 800ce8a <__swbuf_r+0x32>
 800ce82:	f04f 37ff 	mov.w	r7, #4294967295
 800ce86:	4638      	mov	r0, r7
 800ce88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	6922      	ldr	r2, [r4, #16]
 800ce8e:	1a98      	subs	r0, r3, r2
 800ce90:	6963      	ldr	r3, [r4, #20]
 800ce92:	b2f6      	uxtb	r6, r6
 800ce94:	4283      	cmp	r3, r0
 800ce96:	4637      	mov	r7, r6
 800ce98:	dc05      	bgt.n	800cea6 <__swbuf_r+0x4e>
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	f7ff fd99 	bl	800c9d4 <_fflush_r>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d1ed      	bne.n	800ce82 <__swbuf_r+0x2a>
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	60a3      	str	r3, [r4, #8]
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	1c5a      	adds	r2, r3, #1
 800ceb0:	6022      	str	r2, [r4, #0]
 800ceb2:	701e      	strb	r6, [r3, #0]
 800ceb4:	6962      	ldr	r2, [r4, #20]
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d004      	beq.n	800cec6 <__swbuf_r+0x6e>
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	07db      	lsls	r3, r3, #31
 800cec0:	d5e1      	bpl.n	800ce86 <__swbuf_r+0x2e>
 800cec2:	2e0a      	cmp	r6, #10
 800cec4:	d1df      	bne.n	800ce86 <__swbuf_r+0x2e>
 800cec6:	4621      	mov	r1, r4
 800cec8:	4628      	mov	r0, r5
 800ceca:	f7ff fd83 	bl	800c9d4 <_fflush_r>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d0d9      	beq.n	800ce86 <__swbuf_r+0x2e>
 800ced2:	e7d6      	b.n	800ce82 <__swbuf_r+0x2a>

0800ced4 <__swsetup_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4b29      	ldr	r3, [pc, #164]	@ (800cf7c <__swsetup_r+0xa8>)
 800ced8:	4605      	mov	r5, r0
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	460c      	mov	r4, r1
 800cede:	b118      	cbz	r0, 800cee8 <__swsetup_r+0x14>
 800cee0:	6a03      	ldr	r3, [r0, #32]
 800cee2:	b90b      	cbnz	r3, 800cee8 <__swsetup_r+0x14>
 800cee4:	f7fd ffb0 	bl	800ae48 <__sinit>
 800cee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceec:	0719      	lsls	r1, r3, #28
 800ceee:	d422      	bmi.n	800cf36 <__swsetup_r+0x62>
 800cef0:	06da      	lsls	r2, r3, #27
 800cef2:	d407      	bmi.n	800cf04 <__swsetup_r+0x30>
 800cef4:	2209      	movs	r2, #9
 800cef6:	602a      	str	r2, [r5, #0]
 800cef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cefc:	81a3      	strh	r3, [r4, #12]
 800cefe:	f04f 30ff 	mov.w	r0, #4294967295
 800cf02:	e033      	b.n	800cf6c <__swsetup_r+0x98>
 800cf04:	0758      	lsls	r0, r3, #29
 800cf06:	d512      	bpl.n	800cf2e <__swsetup_r+0x5a>
 800cf08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf0a:	b141      	cbz	r1, 800cf1e <__swsetup_r+0x4a>
 800cf0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf10:	4299      	cmp	r1, r3
 800cf12:	d002      	beq.n	800cf1a <__swsetup_r+0x46>
 800cf14:	4628      	mov	r0, r5
 800cf16:	f7fe feff 	bl	800bd18 <_free_r>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	2300      	movs	r3, #0
 800cf28:	6063      	str	r3, [r4, #4]
 800cf2a:	6923      	ldr	r3, [r4, #16]
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	f043 0308 	orr.w	r3, r3, #8
 800cf34:	81a3      	strh	r3, [r4, #12]
 800cf36:	6923      	ldr	r3, [r4, #16]
 800cf38:	b94b      	cbnz	r3, 800cf4e <__swsetup_r+0x7a>
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf44:	d003      	beq.n	800cf4e <__swsetup_r+0x7a>
 800cf46:	4621      	mov	r1, r4
 800cf48:	4628      	mov	r0, r5
 800cf4a:	f000 f883 	bl	800d054 <__smakebuf_r>
 800cf4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf52:	f013 0201 	ands.w	r2, r3, #1
 800cf56:	d00a      	beq.n	800cf6e <__swsetup_r+0x9a>
 800cf58:	2200      	movs	r2, #0
 800cf5a:	60a2      	str	r2, [r4, #8]
 800cf5c:	6962      	ldr	r2, [r4, #20]
 800cf5e:	4252      	negs	r2, r2
 800cf60:	61a2      	str	r2, [r4, #24]
 800cf62:	6922      	ldr	r2, [r4, #16]
 800cf64:	b942      	cbnz	r2, 800cf78 <__swsetup_r+0xa4>
 800cf66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf6a:	d1c5      	bne.n	800cef8 <__swsetup_r+0x24>
 800cf6c:	bd38      	pop	{r3, r4, r5, pc}
 800cf6e:	0799      	lsls	r1, r3, #30
 800cf70:	bf58      	it	pl
 800cf72:	6962      	ldrpl	r2, [r4, #20]
 800cf74:	60a2      	str	r2, [r4, #8]
 800cf76:	e7f4      	b.n	800cf62 <__swsetup_r+0x8e>
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e7f7      	b.n	800cf6c <__swsetup_r+0x98>
 800cf7c:	2000001c 	.word	0x2000001c

0800cf80 <_raise_r>:
 800cf80:	291f      	cmp	r1, #31
 800cf82:	b538      	push	{r3, r4, r5, lr}
 800cf84:	4605      	mov	r5, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	d904      	bls.n	800cf94 <_raise_r+0x14>
 800cf8a:	2316      	movs	r3, #22
 800cf8c:	6003      	str	r3, [r0, #0]
 800cf8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf96:	b112      	cbz	r2, 800cf9e <_raise_r+0x1e>
 800cf98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf9c:	b94b      	cbnz	r3, 800cfb2 <_raise_r+0x32>
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f000 f830 	bl	800d004 <_getpid_r>
 800cfa4:	4622      	mov	r2, r4
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfae:	f000 b817 	b.w	800cfe0 <_kill_r>
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d00a      	beq.n	800cfcc <_raise_r+0x4c>
 800cfb6:	1c59      	adds	r1, r3, #1
 800cfb8:	d103      	bne.n	800cfc2 <_raise_r+0x42>
 800cfba:	2316      	movs	r3, #22
 800cfbc:	6003      	str	r3, [r0, #0]
 800cfbe:	2001      	movs	r0, #1
 800cfc0:	e7e7      	b.n	800cf92 <_raise_r+0x12>
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	4798      	blx	r3
 800cfcc:	2000      	movs	r0, #0
 800cfce:	e7e0      	b.n	800cf92 <_raise_r+0x12>

0800cfd0 <raise>:
 800cfd0:	4b02      	ldr	r3, [pc, #8]	@ (800cfdc <raise+0xc>)
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	6818      	ldr	r0, [r3, #0]
 800cfd6:	f7ff bfd3 	b.w	800cf80 <_raise_r>
 800cfda:	bf00      	nop
 800cfdc:	2000001c 	.word	0x2000001c

0800cfe0 <_kill_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4d07      	ldr	r5, [pc, #28]	@ (800d000 <_kill_r+0x20>)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4608      	mov	r0, r1
 800cfea:	4611      	mov	r1, r2
 800cfec:	602b      	str	r3, [r5, #0]
 800cfee:	f7f5 fe05 	bl	8002bfc <_kill>
 800cff2:	1c43      	adds	r3, r0, #1
 800cff4:	d102      	bne.n	800cffc <_kill_r+0x1c>
 800cff6:	682b      	ldr	r3, [r5, #0]
 800cff8:	b103      	cbz	r3, 800cffc <_kill_r+0x1c>
 800cffa:	6023      	str	r3, [r4, #0]
 800cffc:	bd38      	pop	{r3, r4, r5, pc}
 800cffe:	bf00      	nop
 800d000:	200009ac 	.word	0x200009ac

0800d004 <_getpid_r>:
 800d004:	f7f5 bdf2 	b.w	8002bec <_getpid>

0800d008 <__swhatbuf_r>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	460c      	mov	r4, r1
 800d00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d010:	2900      	cmp	r1, #0
 800d012:	b096      	sub	sp, #88	@ 0x58
 800d014:	4615      	mov	r5, r2
 800d016:	461e      	mov	r6, r3
 800d018:	da0d      	bge.n	800d036 <__swhatbuf_r+0x2e>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d020:	f04f 0100 	mov.w	r1, #0
 800d024:	bf14      	ite	ne
 800d026:	2340      	movne	r3, #64	@ 0x40
 800d028:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d02c:	2000      	movs	r0, #0
 800d02e:	6031      	str	r1, [r6, #0]
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	b016      	add	sp, #88	@ 0x58
 800d034:	bd70      	pop	{r4, r5, r6, pc}
 800d036:	466a      	mov	r2, sp
 800d038:	f000 f848 	bl	800d0cc <_fstat_r>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	dbec      	blt.n	800d01a <__swhatbuf_r+0x12>
 800d040:	9901      	ldr	r1, [sp, #4]
 800d042:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d046:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d04a:	4259      	negs	r1, r3
 800d04c:	4159      	adcs	r1, r3
 800d04e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d052:	e7eb      	b.n	800d02c <__swhatbuf_r+0x24>

0800d054 <__smakebuf_r>:
 800d054:	898b      	ldrh	r3, [r1, #12]
 800d056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d058:	079d      	lsls	r5, r3, #30
 800d05a:	4606      	mov	r6, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	d507      	bpl.n	800d070 <__smakebuf_r+0x1c>
 800d060:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	6123      	str	r3, [r4, #16]
 800d068:	2301      	movs	r3, #1
 800d06a:	6163      	str	r3, [r4, #20]
 800d06c:	b003      	add	sp, #12
 800d06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d070:	ab01      	add	r3, sp, #4
 800d072:	466a      	mov	r2, sp
 800d074:	f7ff ffc8 	bl	800d008 <__swhatbuf_r>
 800d078:	9f00      	ldr	r7, [sp, #0]
 800d07a:	4605      	mov	r5, r0
 800d07c:	4639      	mov	r1, r7
 800d07e:	4630      	mov	r0, r6
 800d080:	f7fe febe 	bl	800be00 <_malloc_r>
 800d084:	b948      	cbnz	r0, 800d09a <__smakebuf_r+0x46>
 800d086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d08a:	059a      	lsls	r2, r3, #22
 800d08c:	d4ee      	bmi.n	800d06c <__smakebuf_r+0x18>
 800d08e:	f023 0303 	bic.w	r3, r3, #3
 800d092:	f043 0302 	orr.w	r3, r3, #2
 800d096:	81a3      	strh	r3, [r4, #12]
 800d098:	e7e2      	b.n	800d060 <__smakebuf_r+0xc>
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	6020      	str	r0, [r4, #0]
 800d09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0a2:	81a3      	strh	r3, [r4, #12]
 800d0a4:	9b01      	ldr	r3, [sp, #4]
 800d0a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0aa:	b15b      	cbz	r3, 800d0c4 <__smakebuf_r+0x70>
 800d0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f000 f81d 	bl	800d0f0 <_isatty_r>
 800d0b6:	b128      	cbz	r0, 800d0c4 <__smakebuf_r+0x70>
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	f023 0303 	bic.w	r3, r3, #3
 800d0be:	f043 0301 	orr.w	r3, r3, #1
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	431d      	orrs	r5, r3
 800d0c8:	81a5      	strh	r5, [r4, #12]
 800d0ca:	e7cf      	b.n	800d06c <__smakebuf_r+0x18>

0800d0cc <_fstat_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d07      	ldr	r5, [pc, #28]	@ (800d0ec <_fstat_r+0x20>)
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	602b      	str	r3, [r5, #0]
 800d0da:	f7f5 fdef 	bl	8002cbc <_fstat>
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	d102      	bne.n	800d0e8 <_fstat_r+0x1c>
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	b103      	cbz	r3, 800d0e8 <_fstat_r+0x1c>
 800d0e6:	6023      	str	r3, [r4, #0]
 800d0e8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ea:	bf00      	nop
 800d0ec:	200009ac 	.word	0x200009ac

0800d0f0 <_isatty_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d06      	ldr	r5, [pc, #24]	@ (800d10c <_isatty_r+0x1c>)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	f7f5 fdee 	bl	8002cdc <_isatty>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_isatty_r+0x1a>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_isatty_r+0x1a>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	200009ac 	.word	0x200009ac

0800d110 <_init>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	bf00      	nop
 800d114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d116:	bc08      	pop	{r3}
 800d118:	469e      	mov	lr, r3
 800d11a:	4770      	bx	lr

0800d11c <_fini>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	bf00      	nop
 800d120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d122:	bc08      	pop	{r3}
 800d124:	469e      	mov	lr, r3
 800d126:	4770      	bx	lr
